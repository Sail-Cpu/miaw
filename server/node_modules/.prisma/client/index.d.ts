
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model applications
 * 
 */
export type applications = $Result.DefaultSelection<Prisma.$applicationsPayload>
/**
 * Model app_categories
 * 
 */
export type app_categories = $Result.DefaultSelection<Prisma.$app_categoriesPayload>
/**
 * Model users_shortcuts
 * 
 */
export type users_shortcuts = $Result.DefaultSelection<Prisma.$users_shortcutsPayload>
/**
 * Model chapters
 * 
 */
export type chapters = $Result.DefaultSelection<Prisma.$chaptersPayload>
/**
 * Model shortcuts
 * 
 */
export type shortcuts = $Result.DefaultSelection<Prisma.$shortcutsPayload>
/**
 * Model speed_line
 * 
 */
export type speed_line = $Result.DefaultSelection<Prisma.$speed_linePayload>
/**
 * Model keys
 * 
 */
export type keys = $Result.DefaultSelection<Prisma.$keysPayload>
/**
 * Model shortcuts_keys
 * 
 */
export type shortcuts_keys = $Result.DefaultSelection<Prisma.$shortcuts_keysPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;

  /**
   * `prisma.applications`: Exposes CRUD operations for the **applications** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applications
    * const applications = await prisma.applications.findMany()
    * ```
    */
  get applications(): Prisma.applicationsDelegate<ExtArgs>;

  /**
   * `prisma.app_categories`: Exposes CRUD operations for the **app_categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more App_categories
    * const app_categories = await prisma.app_categories.findMany()
    * ```
    */
  get app_categories(): Prisma.app_categoriesDelegate<ExtArgs>;

  /**
   * `prisma.users_shortcuts`: Exposes CRUD operations for the **users_shortcuts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users_shortcuts
    * const users_shortcuts = await prisma.users_shortcuts.findMany()
    * ```
    */
  get users_shortcuts(): Prisma.users_shortcutsDelegate<ExtArgs>;

  /**
   * `prisma.chapters`: Exposes CRUD operations for the **chapters** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chapters
    * const chapters = await prisma.chapters.findMany()
    * ```
    */
  get chapters(): Prisma.chaptersDelegate<ExtArgs>;

  /**
   * `prisma.shortcuts`: Exposes CRUD operations for the **shortcuts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shortcuts
    * const shortcuts = await prisma.shortcuts.findMany()
    * ```
    */
  get shortcuts(): Prisma.shortcutsDelegate<ExtArgs>;

  /**
   * `prisma.speed_line`: Exposes CRUD operations for the **speed_line** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Speed_lines
    * const speed_lines = await prisma.speed_line.findMany()
    * ```
    */
  get speed_line(): Prisma.speed_lineDelegate<ExtArgs>;

  /**
   * `prisma.keys`: Exposes CRUD operations for the **keys** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Keys
    * const keys = await prisma.keys.findMany()
    * ```
    */
  get keys(): Prisma.keysDelegate<ExtArgs>;

  /**
   * `prisma.shortcuts_keys`: Exposes CRUD operations for the **shortcuts_keys** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shortcuts_keys
    * const shortcuts_keys = await prisma.shortcuts_keys.findMany()
    * ```
    */
  get shortcuts_keys(): Prisma.shortcuts_keysDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.11.0
   * Query Engine version: efd2449663b3d73d637ea1fd226bafbcf45b3102
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    applications: 'applications',
    app_categories: 'app_categories',
    users_shortcuts: 'users_shortcuts',
    chapters: 'chapters',
    shortcuts: 'shortcuts',
    speed_line: 'speed_line',
    keys: 'keys',
    shortcuts_keys: 'shortcuts_keys'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'applications' | 'app_categories' | 'users_shortcuts' | 'chapters' | 'shortcuts' | 'speed_line' | 'keys' | 'shortcuts_keys'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      applications: {
        payload: Prisma.$applicationsPayload<ExtArgs>
        fields: Prisma.applicationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.applicationsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$applicationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.applicationsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$applicationsPayload>
          }
          findFirst: {
            args: Prisma.applicationsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$applicationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.applicationsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$applicationsPayload>
          }
          findMany: {
            args: Prisma.applicationsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$applicationsPayload>[]
          }
          create: {
            args: Prisma.applicationsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$applicationsPayload>
          }
          createMany: {
            args: Prisma.applicationsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.applicationsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$applicationsPayload>
          }
          update: {
            args: Prisma.applicationsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$applicationsPayload>
          }
          deleteMany: {
            args: Prisma.applicationsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.applicationsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.applicationsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$applicationsPayload>
          }
          aggregate: {
            args: Prisma.ApplicationsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateApplications>
          }
          groupBy: {
            args: Prisma.applicationsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ApplicationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.applicationsCountArgs<ExtArgs>,
            result: $Utils.Optional<ApplicationsCountAggregateOutputType> | number
          }
        }
      }
      app_categories: {
        payload: Prisma.$app_categoriesPayload<ExtArgs>
        fields: Prisma.app_categoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.app_categoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$app_categoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.app_categoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$app_categoriesPayload>
          }
          findFirst: {
            args: Prisma.app_categoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$app_categoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.app_categoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$app_categoriesPayload>
          }
          findMany: {
            args: Prisma.app_categoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$app_categoriesPayload>[]
          }
          create: {
            args: Prisma.app_categoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$app_categoriesPayload>
          }
          createMany: {
            args: Prisma.app_categoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.app_categoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$app_categoriesPayload>
          }
          update: {
            args: Prisma.app_categoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$app_categoriesPayload>
          }
          deleteMany: {
            args: Prisma.app_categoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.app_categoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.app_categoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$app_categoriesPayload>
          }
          aggregate: {
            args: Prisma.App_categoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateApp_categories>
          }
          groupBy: {
            args: Prisma.app_categoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<App_categoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.app_categoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<App_categoriesCountAggregateOutputType> | number
          }
        }
      }
      users_shortcuts: {
        payload: Prisma.$users_shortcutsPayload<ExtArgs>
        fields: Prisma.users_shortcutsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.users_shortcutsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_shortcutsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.users_shortcutsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_shortcutsPayload>
          }
          findFirst: {
            args: Prisma.users_shortcutsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_shortcutsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.users_shortcutsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_shortcutsPayload>
          }
          findMany: {
            args: Prisma.users_shortcutsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_shortcutsPayload>[]
          }
          create: {
            args: Prisma.users_shortcutsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_shortcutsPayload>
          }
          createMany: {
            args: Prisma.users_shortcutsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.users_shortcutsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_shortcutsPayload>
          }
          update: {
            args: Prisma.users_shortcutsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_shortcutsPayload>
          }
          deleteMany: {
            args: Prisma.users_shortcutsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.users_shortcutsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.users_shortcutsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_shortcutsPayload>
          }
          aggregate: {
            args: Prisma.Users_shortcutsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers_shortcuts>
          }
          groupBy: {
            args: Prisma.users_shortcutsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Users_shortcutsGroupByOutputType>[]
          }
          count: {
            args: Prisma.users_shortcutsCountArgs<ExtArgs>,
            result: $Utils.Optional<Users_shortcutsCountAggregateOutputType> | number
          }
        }
      }
      chapters: {
        payload: Prisma.$chaptersPayload<ExtArgs>
        fields: Prisma.chaptersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.chaptersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$chaptersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.chaptersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$chaptersPayload>
          }
          findFirst: {
            args: Prisma.chaptersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$chaptersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.chaptersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$chaptersPayload>
          }
          findMany: {
            args: Prisma.chaptersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$chaptersPayload>[]
          }
          create: {
            args: Prisma.chaptersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$chaptersPayload>
          }
          createMany: {
            args: Prisma.chaptersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.chaptersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$chaptersPayload>
          }
          update: {
            args: Prisma.chaptersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$chaptersPayload>
          }
          deleteMany: {
            args: Prisma.chaptersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.chaptersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.chaptersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$chaptersPayload>
          }
          aggregate: {
            args: Prisma.ChaptersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChapters>
          }
          groupBy: {
            args: Prisma.chaptersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChaptersGroupByOutputType>[]
          }
          count: {
            args: Prisma.chaptersCountArgs<ExtArgs>,
            result: $Utils.Optional<ChaptersCountAggregateOutputType> | number
          }
        }
      }
      shortcuts: {
        payload: Prisma.$shortcutsPayload<ExtArgs>
        fields: Prisma.shortcutsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.shortcutsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcutsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.shortcutsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcutsPayload>
          }
          findFirst: {
            args: Prisma.shortcutsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcutsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.shortcutsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcutsPayload>
          }
          findMany: {
            args: Prisma.shortcutsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcutsPayload>[]
          }
          create: {
            args: Prisma.shortcutsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcutsPayload>
          }
          createMany: {
            args: Prisma.shortcutsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.shortcutsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcutsPayload>
          }
          update: {
            args: Prisma.shortcutsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcutsPayload>
          }
          deleteMany: {
            args: Prisma.shortcutsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.shortcutsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.shortcutsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcutsPayload>
          }
          aggregate: {
            args: Prisma.ShortcutsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateShortcuts>
          }
          groupBy: {
            args: Prisma.shortcutsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ShortcutsGroupByOutputType>[]
          }
          count: {
            args: Prisma.shortcutsCountArgs<ExtArgs>,
            result: $Utils.Optional<ShortcutsCountAggregateOutputType> | number
          }
        }
      }
      speed_line: {
        payload: Prisma.$speed_linePayload<ExtArgs>
        fields: Prisma.speed_lineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.speed_lineFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$speed_linePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.speed_lineFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$speed_linePayload>
          }
          findFirst: {
            args: Prisma.speed_lineFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$speed_linePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.speed_lineFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$speed_linePayload>
          }
          findMany: {
            args: Prisma.speed_lineFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$speed_linePayload>[]
          }
          create: {
            args: Prisma.speed_lineCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$speed_linePayload>
          }
          createMany: {
            args: Prisma.speed_lineCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.speed_lineDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$speed_linePayload>
          }
          update: {
            args: Prisma.speed_lineUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$speed_linePayload>
          }
          deleteMany: {
            args: Prisma.speed_lineDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.speed_lineUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.speed_lineUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$speed_linePayload>
          }
          aggregate: {
            args: Prisma.Speed_lineAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSpeed_line>
          }
          groupBy: {
            args: Prisma.speed_lineGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Speed_lineGroupByOutputType>[]
          }
          count: {
            args: Prisma.speed_lineCountArgs<ExtArgs>,
            result: $Utils.Optional<Speed_lineCountAggregateOutputType> | number
          }
        }
      }
      keys: {
        payload: Prisma.$keysPayload<ExtArgs>
        fields: Prisma.keysFieldRefs
        operations: {
          findUnique: {
            args: Prisma.keysFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$keysPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.keysFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$keysPayload>
          }
          findFirst: {
            args: Prisma.keysFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$keysPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.keysFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$keysPayload>
          }
          findMany: {
            args: Prisma.keysFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$keysPayload>[]
          }
          create: {
            args: Prisma.keysCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$keysPayload>
          }
          createMany: {
            args: Prisma.keysCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.keysDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$keysPayload>
          }
          update: {
            args: Prisma.keysUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$keysPayload>
          }
          deleteMany: {
            args: Prisma.keysDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.keysUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.keysUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$keysPayload>
          }
          aggregate: {
            args: Prisma.KeysAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKeys>
          }
          groupBy: {
            args: Prisma.keysGroupByArgs<ExtArgs>,
            result: $Utils.Optional<KeysGroupByOutputType>[]
          }
          count: {
            args: Prisma.keysCountArgs<ExtArgs>,
            result: $Utils.Optional<KeysCountAggregateOutputType> | number
          }
        }
      }
      shortcuts_keys: {
        payload: Prisma.$shortcuts_keysPayload<ExtArgs>
        fields: Prisma.shortcuts_keysFieldRefs
        operations: {
          findUnique: {
            args: Prisma.shortcuts_keysFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcuts_keysPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.shortcuts_keysFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcuts_keysPayload>
          }
          findFirst: {
            args: Prisma.shortcuts_keysFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcuts_keysPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.shortcuts_keysFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcuts_keysPayload>
          }
          findMany: {
            args: Prisma.shortcuts_keysFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcuts_keysPayload>[]
          }
          create: {
            args: Prisma.shortcuts_keysCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcuts_keysPayload>
          }
          createMany: {
            args: Prisma.shortcuts_keysCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.shortcuts_keysDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcuts_keysPayload>
          }
          update: {
            args: Prisma.shortcuts_keysUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcuts_keysPayload>
          }
          deleteMany: {
            args: Prisma.shortcuts_keysDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.shortcuts_keysUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.shortcuts_keysUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$shortcuts_keysPayload>
          }
          aggregate: {
            args: Prisma.Shortcuts_keysAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateShortcuts_keys>
          }
          groupBy: {
            args: Prisma.shortcuts_keysGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Shortcuts_keysGroupByOutputType>[]
          }
          count: {
            args: Prisma.shortcuts_keysCountArgs<ExtArgs>,
            result: $Utils.Optional<Shortcuts_keysCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    users_shortcuts: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users_shortcuts?: boolean | UsersCountOutputTypeCountUsers_shortcutsArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountUsers_shortcutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: users_shortcutsWhereInput
  }



  /**
   * Count Type ApplicationsCountOutputType
   */

  export type ApplicationsCountOutputType = {
    shortcuts: number
  }

  export type ApplicationsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shortcuts?: boolean | ApplicationsCountOutputTypeCountShortcutsArgs
  }

  // Custom InputTypes

  /**
   * ApplicationsCountOutputType without action
   */
  export type ApplicationsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationsCountOutputType
     */
    select?: ApplicationsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ApplicationsCountOutputType without action
   */
  export type ApplicationsCountOutputTypeCountShortcutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: shortcutsWhereInput
  }



  /**
   * Count Type App_categoriesCountOutputType
   */

  export type App_categoriesCountOutputType = {
    applications: number
  }

  export type App_categoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | App_categoriesCountOutputTypeCountApplicationsArgs
  }

  // Custom InputTypes

  /**
   * App_categoriesCountOutputType without action
   */
  export type App_categoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App_categoriesCountOutputType
     */
    select?: App_categoriesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * App_categoriesCountOutputType without action
   */
  export type App_categoriesCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: applicationsWhereInput
  }



  /**
   * Count Type ChaptersCountOutputType
   */

  export type ChaptersCountOutputType = {
    shortcuts: number
  }

  export type ChaptersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shortcuts?: boolean | ChaptersCountOutputTypeCountShortcutsArgs
  }

  // Custom InputTypes

  /**
   * ChaptersCountOutputType without action
   */
  export type ChaptersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChaptersCountOutputType
     */
    select?: ChaptersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ChaptersCountOutputType without action
   */
  export type ChaptersCountOutputTypeCountShortcutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: shortcutsWhereInput
  }



  /**
   * Count Type ShortcutsCountOutputType
   */

  export type ShortcutsCountOutputType = {
    users_shortcuts: number
    shortcuts_keys: number
  }

  export type ShortcutsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users_shortcuts?: boolean | ShortcutsCountOutputTypeCountUsers_shortcutsArgs
    shortcuts_keys?: boolean | ShortcutsCountOutputTypeCountShortcuts_keysArgs
  }

  // Custom InputTypes

  /**
   * ShortcutsCountOutputType without action
   */
  export type ShortcutsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShortcutsCountOutputType
     */
    select?: ShortcutsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ShortcutsCountOutputType without action
   */
  export type ShortcutsCountOutputTypeCountUsers_shortcutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: users_shortcutsWhereInput
  }


  /**
   * ShortcutsCountOutputType without action
   */
  export type ShortcutsCountOutputTypeCountShortcuts_keysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: shortcuts_keysWhereInput
  }



  /**
   * Count Type KeysCountOutputType
   */

  export type KeysCountOutputType = {
    shortcuts_keys: number
  }

  export type KeysCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shortcuts_keys?: boolean | KeysCountOutputTypeCountShortcuts_keysArgs
  }

  // Custom InputTypes

  /**
   * KeysCountOutputType without action
   */
  export type KeysCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeysCountOutputType
     */
    select?: KeysCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * KeysCountOutputType without action
   */
  export type KeysCountOutputTypeCountShortcuts_keysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: shortcuts_keysWhereInput
  }



  /**
   * Models
   */

  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    user_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    user_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    user_id: number | null
    username: string | null
    email: string | null
    password: string | null
    job: string | null
    os: string | null
    role: string | null
  }

  export type UsersMaxAggregateOutputType = {
    user_id: number | null
    username: string | null
    email: string | null
    password: string | null
    job: string | null
    os: string | null
    role: string | null
  }

  export type UsersCountAggregateOutputType = {
    user_id: number
    username: number
    email: number
    password: number
    job: number
    os: number
    role: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    user_id?: true
  }

  export type UsersSumAggregateInputType = {
    user_id?: true
  }

  export type UsersMinAggregateInputType = {
    user_id?: true
    username?: true
    email?: true
    password?: true
    job?: true
    os?: true
    role?: true
  }

  export type UsersMaxAggregateInputType = {
    user_id?: true
    username?: true
    email?: true
    password?: true
    job?: true
    os?: true
    role?: true
  }

  export type UsersCountAggregateInputType = {
    user_id?: true
    username?: true
    email?: true
    password?: true
    job?: true
    os?: true
    role?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    user_id: number
    username: string
    email: string
    password: string
    job: string
    os: string
    role: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    job?: boolean
    os?: boolean
    role?: boolean
    users_shortcuts?: boolean | users$users_shortcutsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    user_id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    job?: boolean
    os?: boolean
    role?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users_shortcuts?: boolean | users$users_shortcutsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      users_shortcuts: Prisma.$users_shortcutsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      username: string
      email: string
      password: string
      job: string
      os: string
      role: string
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const usersWithUser_idOnly = await prisma.users.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users_shortcuts<T extends users$users_shortcutsArgs<ExtArgs> = {}>(args?: Subset<T, users$users_shortcutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$users_shortcutsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly user_id: FieldRef<"users", 'Int'>
    readonly username: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly job: FieldRef<"users", 'String'>
    readonly os: FieldRef<"users", 'String'>
    readonly role: FieldRef<"users", 'String'>
  }
    

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users.users_shortcuts
   */
  export type users$users_shortcutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_shortcuts
     */
    select?: users_shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: users_shortcutsInclude<ExtArgs> | null
    where?: users_shortcutsWhereInput
    orderBy?: users_shortcutsOrderByWithRelationInput | users_shortcutsOrderByWithRelationInput[]
    cursor?: users_shortcutsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Users_shortcutsScalarFieldEnum | Users_shortcutsScalarFieldEnum[]
  }


  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
  }



  /**
   * Model applications
   */

  export type AggregateApplications = {
    _count: ApplicationsCountAggregateOutputType | null
    _avg: ApplicationsAvgAggregateOutputType | null
    _sum: ApplicationsSumAggregateOutputType | null
    _min: ApplicationsMinAggregateOutputType | null
    _max: ApplicationsMaxAggregateOutputType | null
  }

  export type ApplicationsAvgAggregateOutputType = {
    app_id: number | null
    app_logo: number | null
    categorie_id: number | null
  }

  export type ApplicationsSumAggregateOutputType = {
    app_id: number | null
    app_logo: number | null
    categorie_id: number | null
  }

  export type ApplicationsMinAggregateOutputType = {
    app_id: number | null
    app_name: string | null
    app_description: string | null
    app_logo: number | null
    categorie_id: number | null
  }

  export type ApplicationsMaxAggregateOutputType = {
    app_id: number | null
    app_name: string | null
    app_description: string | null
    app_logo: number | null
    categorie_id: number | null
  }

  export type ApplicationsCountAggregateOutputType = {
    app_id: number
    app_name: number
    app_description: number
    app_logo: number
    app_images: number
    categorie_id: number
    _all: number
  }


  export type ApplicationsAvgAggregateInputType = {
    app_id?: true
    app_logo?: true
    categorie_id?: true
  }

  export type ApplicationsSumAggregateInputType = {
    app_id?: true
    app_logo?: true
    categorie_id?: true
  }

  export type ApplicationsMinAggregateInputType = {
    app_id?: true
    app_name?: true
    app_description?: true
    app_logo?: true
    categorie_id?: true
  }

  export type ApplicationsMaxAggregateInputType = {
    app_id?: true
    app_name?: true
    app_description?: true
    app_logo?: true
    categorie_id?: true
  }

  export type ApplicationsCountAggregateInputType = {
    app_id?: true
    app_name?: true
    app_description?: true
    app_logo?: true
    app_images?: true
    categorie_id?: true
    _all?: true
  }

  export type ApplicationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which applications to aggregate.
     */
    where?: applicationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of applications to fetch.
     */
    orderBy?: applicationsOrderByWithRelationInput | applicationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: applicationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned applications
    **/
    _count?: true | ApplicationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApplicationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApplicationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationsMaxAggregateInputType
  }

  export type GetApplicationsAggregateType<T extends ApplicationsAggregateArgs> = {
        [P in keyof T & keyof AggregateApplications]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplications[P]>
      : GetScalarType<T[P], AggregateApplications[P]>
  }




  export type applicationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: applicationsWhereInput
    orderBy?: applicationsOrderByWithAggregationInput | applicationsOrderByWithAggregationInput[]
    by: ApplicationsScalarFieldEnum[] | ApplicationsScalarFieldEnum
    having?: applicationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationsCountAggregateInputType | true
    _avg?: ApplicationsAvgAggregateInputType
    _sum?: ApplicationsSumAggregateInputType
    _min?: ApplicationsMinAggregateInputType
    _max?: ApplicationsMaxAggregateInputType
  }

  export type ApplicationsGroupByOutputType = {
    app_id: number
    app_name: string
    app_description: string
    app_logo: number | null
    app_images: string[]
    categorie_id: number
    _count: ApplicationsCountAggregateOutputType | null
    _avg: ApplicationsAvgAggregateOutputType | null
    _sum: ApplicationsSumAggregateOutputType | null
    _min: ApplicationsMinAggregateOutputType | null
    _max: ApplicationsMaxAggregateOutputType | null
  }

  type GetApplicationsGroupByPayload<T extends applicationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationsGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationsGroupByOutputType[P]>
        }
      >
    >


  export type applicationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    app_id?: boolean
    app_name?: boolean
    app_description?: boolean
    app_logo?: boolean
    app_images?: boolean
    categorie_id?: boolean
    app_categories?: boolean | app_categoriesDefaultArgs<ExtArgs>
    shortcuts?: boolean | applications$shortcutsArgs<ExtArgs>
    _count?: boolean | ApplicationsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applications"]>

  export type applicationsSelectScalar = {
    app_id?: boolean
    app_name?: boolean
    app_description?: boolean
    app_logo?: boolean
    app_images?: boolean
    categorie_id?: boolean
  }

  export type applicationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    app_categories?: boolean | app_categoriesDefaultArgs<ExtArgs>
    shortcuts?: boolean | applications$shortcutsArgs<ExtArgs>
    _count?: boolean | ApplicationsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $applicationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "applications"
    objects: {
      app_categories: Prisma.$app_categoriesPayload<ExtArgs>
      shortcuts: Prisma.$shortcutsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      app_id: number
      app_name: string
      app_description: string
      app_logo: number | null
      app_images: string[]
      categorie_id: number
    }, ExtArgs["result"]["applications"]>
    composites: {}
  }


  type applicationsGetPayload<S extends boolean | null | undefined | applicationsDefaultArgs> = $Result.GetResult<Prisma.$applicationsPayload, S>

  type applicationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<applicationsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ApplicationsCountAggregateInputType | true
    }

  export interface applicationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['applications'], meta: { name: 'applications' } }
    /**
     * Find zero or one Applications that matches the filter.
     * @param {applicationsFindUniqueArgs} args - Arguments to find a Applications
     * @example
     * // Get one Applications
     * const applications = await prisma.applications.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends applicationsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, applicationsFindUniqueArgs<ExtArgs>>
    ): Prisma__applicationsClient<$Result.GetResult<Prisma.$applicationsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Applications that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {applicationsFindUniqueOrThrowArgs} args - Arguments to find a Applications
     * @example
     * // Get one Applications
     * const applications = await prisma.applications.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends applicationsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, applicationsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__applicationsClient<$Result.GetResult<Prisma.$applicationsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Applications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {applicationsFindFirstArgs} args - Arguments to find a Applications
     * @example
     * // Get one Applications
     * const applications = await prisma.applications.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends applicationsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, applicationsFindFirstArgs<ExtArgs>>
    ): Prisma__applicationsClient<$Result.GetResult<Prisma.$applicationsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Applications that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {applicationsFindFirstOrThrowArgs} args - Arguments to find a Applications
     * @example
     * // Get one Applications
     * const applications = await prisma.applications.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends applicationsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, applicationsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__applicationsClient<$Result.GetResult<Prisma.$applicationsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Applications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {applicationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applications
     * const applications = await prisma.applications.findMany()
     * 
     * // Get first 10 Applications
     * const applications = await prisma.applications.findMany({ take: 10 })
     * 
     * // Only select the `app_id`
     * const applicationsWithApp_idOnly = await prisma.applications.findMany({ select: { app_id: true } })
     * 
    **/
    findMany<T extends applicationsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, applicationsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$applicationsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Applications.
     * @param {applicationsCreateArgs} args - Arguments to create a Applications.
     * @example
     * // Create one Applications
     * const Applications = await prisma.applications.create({
     *   data: {
     *     // ... data to create a Applications
     *   }
     * })
     * 
    **/
    create<T extends applicationsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, applicationsCreateArgs<ExtArgs>>
    ): Prisma__applicationsClient<$Result.GetResult<Prisma.$applicationsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Applications.
     *     @param {applicationsCreateManyArgs} args - Arguments to create many Applications.
     *     @example
     *     // Create many Applications
     *     const applications = await prisma.applications.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends applicationsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, applicationsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Applications.
     * @param {applicationsDeleteArgs} args - Arguments to delete one Applications.
     * @example
     * // Delete one Applications
     * const Applications = await prisma.applications.delete({
     *   where: {
     *     // ... filter to delete one Applications
     *   }
     * })
     * 
    **/
    delete<T extends applicationsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, applicationsDeleteArgs<ExtArgs>>
    ): Prisma__applicationsClient<$Result.GetResult<Prisma.$applicationsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Applications.
     * @param {applicationsUpdateArgs} args - Arguments to update one Applications.
     * @example
     * // Update one Applications
     * const applications = await prisma.applications.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends applicationsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, applicationsUpdateArgs<ExtArgs>>
    ): Prisma__applicationsClient<$Result.GetResult<Prisma.$applicationsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Applications.
     * @param {applicationsDeleteManyArgs} args - Arguments to filter Applications to delete.
     * @example
     * // Delete a few Applications
     * const { count } = await prisma.applications.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends applicationsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, applicationsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {applicationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applications
     * const applications = await prisma.applications.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends applicationsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, applicationsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Applications.
     * @param {applicationsUpsertArgs} args - Arguments to update or create a Applications.
     * @example
     * // Update or create a Applications
     * const applications = await prisma.applications.upsert({
     *   create: {
     *     // ... data to create a Applications
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Applications we want to update
     *   }
     * })
    **/
    upsert<T extends applicationsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, applicationsUpsertArgs<ExtArgs>>
    ): Prisma__applicationsClient<$Result.GetResult<Prisma.$applicationsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {applicationsCountArgs} args - Arguments to filter Applications to count.
     * @example
     * // Count the number of Applications
     * const count = await prisma.applications.count({
     *   where: {
     *     // ... the filter for the Applications we want to count
     *   }
     * })
    **/
    count<T extends applicationsCountArgs>(
      args?: Subset<T, applicationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationsAggregateArgs>(args: Subset<T, ApplicationsAggregateArgs>): Prisma.PrismaPromise<GetApplicationsAggregateType<T>>

    /**
     * Group by Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {applicationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends applicationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: applicationsGroupByArgs['orderBy'] }
        : { orderBy?: applicationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, applicationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the applications model
   */
  readonly fields: applicationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for applications.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__applicationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    app_categories<T extends app_categoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, app_categoriesDefaultArgs<ExtArgs>>): Prisma__app_categoriesClient<$Result.GetResult<Prisma.$app_categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    shortcuts<T extends applications$shortcutsArgs<ExtArgs> = {}>(args?: Subset<T, applications$shortcutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$shortcutsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the applications model
   */ 
  interface applicationsFieldRefs {
    readonly app_id: FieldRef<"applications", 'Int'>
    readonly app_name: FieldRef<"applications", 'String'>
    readonly app_description: FieldRef<"applications", 'String'>
    readonly app_logo: FieldRef<"applications", 'Int'>
    readonly app_images: FieldRef<"applications", 'String[]'>
    readonly categorie_id: FieldRef<"applications", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * applications findUnique
   */
  export type applicationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the applications
     */
    select?: applicationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: applicationsInclude<ExtArgs> | null
    /**
     * Filter, which applications to fetch.
     */
    where: applicationsWhereUniqueInput
  }


  /**
   * applications findUniqueOrThrow
   */
  export type applicationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the applications
     */
    select?: applicationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: applicationsInclude<ExtArgs> | null
    /**
     * Filter, which applications to fetch.
     */
    where: applicationsWhereUniqueInput
  }


  /**
   * applications findFirst
   */
  export type applicationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the applications
     */
    select?: applicationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: applicationsInclude<ExtArgs> | null
    /**
     * Filter, which applications to fetch.
     */
    where?: applicationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of applications to fetch.
     */
    orderBy?: applicationsOrderByWithRelationInput | applicationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for applications.
     */
    cursor?: applicationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of applications.
     */
    distinct?: ApplicationsScalarFieldEnum | ApplicationsScalarFieldEnum[]
  }


  /**
   * applications findFirstOrThrow
   */
  export type applicationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the applications
     */
    select?: applicationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: applicationsInclude<ExtArgs> | null
    /**
     * Filter, which applications to fetch.
     */
    where?: applicationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of applications to fetch.
     */
    orderBy?: applicationsOrderByWithRelationInput | applicationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for applications.
     */
    cursor?: applicationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of applications.
     */
    distinct?: ApplicationsScalarFieldEnum | ApplicationsScalarFieldEnum[]
  }


  /**
   * applications findMany
   */
  export type applicationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the applications
     */
    select?: applicationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: applicationsInclude<ExtArgs> | null
    /**
     * Filter, which applications to fetch.
     */
    where?: applicationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of applications to fetch.
     */
    orderBy?: applicationsOrderByWithRelationInput | applicationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing applications.
     */
    cursor?: applicationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` applications.
     */
    skip?: number
    distinct?: ApplicationsScalarFieldEnum | ApplicationsScalarFieldEnum[]
  }


  /**
   * applications create
   */
  export type applicationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the applications
     */
    select?: applicationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: applicationsInclude<ExtArgs> | null
    /**
     * The data needed to create a applications.
     */
    data: XOR<applicationsCreateInput, applicationsUncheckedCreateInput>
  }


  /**
   * applications createMany
   */
  export type applicationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many applications.
     */
    data: applicationsCreateManyInput | applicationsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * applications update
   */
  export type applicationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the applications
     */
    select?: applicationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: applicationsInclude<ExtArgs> | null
    /**
     * The data needed to update a applications.
     */
    data: XOR<applicationsUpdateInput, applicationsUncheckedUpdateInput>
    /**
     * Choose, which applications to update.
     */
    where: applicationsWhereUniqueInput
  }


  /**
   * applications updateMany
   */
  export type applicationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update applications.
     */
    data: XOR<applicationsUpdateManyMutationInput, applicationsUncheckedUpdateManyInput>
    /**
     * Filter which applications to update
     */
    where?: applicationsWhereInput
  }


  /**
   * applications upsert
   */
  export type applicationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the applications
     */
    select?: applicationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: applicationsInclude<ExtArgs> | null
    /**
     * The filter to search for the applications to update in case it exists.
     */
    where: applicationsWhereUniqueInput
    /**
     * In case the applications found by the `where` argument doesn't exist, create a new applications with this data.
     */
    create: XOR<applicationsCreateInput, applicationsUncheckedCreateInput>
    /**
     * In case the applications was found with the provided `where` argument, update it with this data.
     */
    update: XOR<applicationsUpdateInput, applicationsUncheckedUpdateInput>
  }


  /**
   * applications delete
   */
  export type applicationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the applications
     */
    select?: applicationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: applicationsInclude<ExtArgs> | null
    /**
     * Filter which applications to delete.
     */
    where: applicationsWhereUniqueInput
  }


  /**
   * applications deleteMany
   */
  export type applicationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which applications to delete
     */
    where?: applicationsWhereInput
  }


  /**
   * applications.shortcuts
   */
  export type applications$shortcutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts
     */
    select?: shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcutsInclude<ExtArgs> | null
    where?: shortcutsWhereInput
    orderBy?: shortcutsOrderByWithRelationInput | shortcutsOrderByWithRelationInput[]
    cursor?: shortcutsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShortcutsScalarFieldEnum | ShortcutsScalarFieldEnum[]
  }


  /**
   * applications without action
   */
  export type applicationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the applications
     */
    select?: applicationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: applicationsInclude<ExtArgs> | null
  }



  /**
   * Model app_categories
   */

  export type AggregateApp_categories = {
    _count: App_categoriesCountAggregateOutputType | null
    _avg: App_categoriesAvgAggregateOutputType | null
    _sum: App_categoriesSumAggregateOutputType | null
    _min: App_categoriesMinAggregateOutputType | null
    _max: App_categoriesMaxAggregateOutputType | null
  }

  export type App_categoriesAvgAggregateOutputType = {
    categorie_id: number | null
  }

  export type App_categoriesSumAggregateOutputType = {
    categorie_id: number | null
  }

  export type App_categoriesMinAggregateOutputType = {
    categorie_id: number | null
    categorie_name: string | null
  }

  export type App_categoriesMaxAggregateOutputType = {
    categorie_id: number | null
    categorie_name: string | null
  }

  export type App_categoriesCountAggregateOutputType = {
    categorie_id: number
    categorie_name: number
    _all: number
  }


  export type App_categoriesAvgAggregateInputType = {
    categorie_id?: true
  }

  export type App_categoriesSumAggregateInputType = {
    categorie_id?: true
  }

  export type App_categoriesMinAggregateInputType = {
    categorie_id?: true
    categorie_name?: true
  }

  export type App_categoriesMaxAggregateInputType = {
    categorie_id?: true
    categorie_name?: true
  }

  export type App_categoriesCountAggregateInputType = {
    categorie_id?: true
    categorie_name?: true
    _all?: true
  }

  export type App_categoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which app_categories to aggregate.
     */
    where?: app_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of app_categories to fetch.
     */
    orderBy?: app_categoriesOrderByWithRelationInput | app_categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: app_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` app_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` app_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned app_categories
    **/
    _count?: true | App_categoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: App_categoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: App_categoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: App_categoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: App_categoriesMaxAggregateInputType
  }

  export type GetApp_categoriesAggregateType<T extends App_categoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateApp_categories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApp_categories[P]>
      : GetScalarType<T[P], AggregateApp_categories[P]>
  }




  export type app_categoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: app_categoriesWhereInput
    orderBy?: app_categoriesOrderByWithAggregationInput | app_categoriesOrderByWithAggregationInput[]
    by: App_categoriesScalarFieldEnum[] | App_categoriesScalarFieldEnum
    having?: app_categoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: App_categoriesCountAggregateInputType | true
    _avg?: App_categoriesAvgAggregateInputType
    _sum?: App_categoriesSumAggregateInputType
    _min?: App_categoriesMinAggregateInputType
    _max?: App_categoriesMaxAggregateInputType
  }

  export type App_categoriesGroupByOutputType = {
    categorie_id: number
    categorie_name: string
    _count: App_categoriesCountAggregateOutputType | null
    _avg: App_categoriesAvgAggregateOutputType | null
    _sum: App_categoriesSumAggregateOutputType | null
    _min: App_categoriesMinAggregateOutputType | null
    _max: App_categoriesMaxAggregateOutputType | null
  }

  type GetApp_categoriesGroupByPayload<T extends app_categoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<App_categoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof App_categoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], App_categoriesGroupByOutputType[P]>
            : GetScalarType<T[P], App_categoriesGroupByOutputType[P]>
        }
      >
    >


  export type app_categoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    categorie_id?: boolean
    categorie_name?: boolean
    applications?: boolean | app_categories$applicationsArgs<ExtArgs>
    _count?: boolean | App_categoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["app_categories"]>

  export type app_categoriesSelectScalar = {
    categorie_id?: boolean
    categorie_name?: boolean
  }

  export type app_categoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | app_categories$applicationsArgs<ExtArgs>
    _count?: boolean | App_categoriesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $app_categoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "app_categories"
    objects: {
      applications: Prisma.$applicationsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      categorie_id: number
      categorie_name: string
    }, ExtArgs["result"]["app_categories"]>
    composites: {}
  }


  type app_categoriesGetPayload<S extends boolean | null | undefined | app_categoriesDefaultArgs> = $Result.GetResult<Prisma.$app_categoriesPayload, S>

  type app_categoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<app_categoriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: App_categoriesCountAggregateInputType | true
    }

  export interface app_categoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['app_categories'], meta: { name: 'app_categories' } }
    /**
     * Find zero or one App_categories that matches the filter.
     * @param {app_categoriesFindUniqueArgs} args - Arguments to find a App_categories
     * @example
     * // Get one App_categories
     * const app_categories = await prisma.app_categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends app_categoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, app_categoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__app_categoriesClient<$Result.GetResult<Prisma.$app_categoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one App_categories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {app_categoriesFindUniqueOrThrowArgs} args - Arguments to find a App_categories
     * @example
     * // Get one App_categories
     * const app_categories = await prisma.app_categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends app_categoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, app_categoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__app_categoriesClient<$Result.GetResult<Prisma.$app_categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first App_categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {app_categoriesFindFirstArgs} args - Arguments to find a App_categories
     * @example
     * // Get one App_categories
     * const app_categories = await prisma.app_categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends app_categoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, app_categoriesFindFirstArgs<ExtArgs>>
    ): Prisma__app_categoriesClient<$Result.GetResult<Prisma.$app_categoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first App_categories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {app_categoriesFindFirstOrThrowArgs} args - Arguments to find a App_categories
     * @example
     * // Get one App_categories
     * const app_categories = await prisma.app_categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends app_categoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, app_categoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__app_categoriesClient<$Result.GetResult<Prisma.$app_categoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more App_categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {app_categoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all App_categories
     * const app_categories = await prisma.app_categories.findMany()
     * 
     * // Get first 10 App_categories
     * const app_categories = await prisma.app_categories.findMany({ take: 10 })
     * 
     * // Only select the `categorie_id`
     * const app_categoriesWithCategorie_idOnly = await prisma.app_categories.findMany({ select: { categorie_id: true } })
     * 
    **/
    findMany<T extends app_categoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, app_categoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$app_categoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a App_categories.
     * @param {app_categoriesCreateArgs} args - Arguments to create a App_categories.
     * @example
     * // Create one App_categories
     * const App_categories = await prisma.app_categories.create({
     *   data: {
     *     // ... data to create a App_categories
     *   }
     * })
     * 
    **/
    create<T extends app_categoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, app_categoriesCreateArgs<ExtArgs>>
    ): Prisma__app_categoriesClient<$Result.GetResult<Prisma.$app_categoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many App_categories.
     *     @param {app_categoriesCreateManyArgs} args - Arguments to create many App_categories.
     *     @example
     *     // Create many App_categories
     *     const app_categories = await prisma.app_categories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends app_categoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, app_categoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a App_categories.
     * @param {app_categoriesDeleteArgs} args - Arguments to delete one App_categories.
     * @example
     * // Delete one App_categories
     * const App_categories = await prisma.app_categories.delete({
     *   where: {
     *     // ... filter to delete one App_categories
     *   }
     * })
     * 
    **/
    delete<T extends app_categoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, app_categoriesDeleteArgs<ExtArgs>>
    ): Prisma__app_categoriesClient<$Result.GetResult<Prisma.$app_categoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one App_categories.
     * @param {app_categoriesUpdateArgs} args - Arguments to update one App_categories.
     * @example
     * // Update one App_categories
     * const app_categories = await prisma.app_categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends app_categoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, app_categoriesUpdateArgs<ExtArgs>>
    ): Prisma__app_categoriesClient<$Result.GetResult<Prisma.$app_categoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more App_categories.
     * @param {app_categoriesDeleteManyArgs} args - Arguments to filter App_categories to delete.
     * @example
     * // Delete a few App_categories
     * const { count } = await prisma.app_categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends app_categoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, app_categoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more App_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {app_categoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many App_categories
     * const app_categories = await prisma.app_categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends app_categoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, app_categoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one App_categories.
     * @param {app_categoriesUpsertArgs} args - Arguments to update or create a App_categories.
     * @example
     * // Update or create a App_categories
     * const app_categories = await prisma.app_categories.upsert({
     *   create: {
     *     // ... data to create a App_categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the App_categories we want to update
     *   }
     * })
    **/
    upsert<T extends app_categoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, app_categoriesUpsertArgs<ExtArgs>>
    ): Prisma__app_categoriesClient<$Result.GetResult<Prisma.$app_categoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of App_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {app_categoriesCountArgs} args - Arguments to filter App_categories to count.
     * @example
     * // Count the number of App_categories
     * const count = await prisma.app_categories.count({
     *   where: {
     *     // ... the filter for the App_categories we want to count
     *   }
     * })
    **/
    count<T extends app_categoriesCountArgs>(
      args?: Subset<T, app_categoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], App_categoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a App_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App_categoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends App_categoriesAggregateArgs>(args: Subset<T, App_categoriesAggregateArgs>): Prisma.PrismaPromise<GetApp_categoriesAggregateType<T>>

    /**
     * Group by App_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {app_categoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends app_categoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: app_categoriesGroupByArgs['orderBy'] }
        : { orderBy?: app_categoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, app_categoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApp_categoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the app_categories model
   */
  readonly fields: app_categoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for app_categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__app_categoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    applications<T extends app_categories$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, app_categories$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$applicationsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the app_categories model
   */ 
  interface app_categoriesFieldRefs {
    readonly categorie_id: FieldRef<"app_categories", 'Int'>
    readonly categorie_name: FieldRef<"app_categories", 'String'>
  }
    

  // Custom InputTypes

  /**
   * app_categories findUnique
   */
  export type app_categoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the app_categories
     */
    select?: app_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: app_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which app_categories to fetch.
     */
    where: app_categoriesWhereUniqueInput
  }


  /**
   * app_categories findUniqueOrThrow
   */
  export type app_categoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the app_categories
     */
    select?: app_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: app_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which app_categories to fetch.
     */
    where: app_categoriesWhereUniqueInput
  }


  /**
   * app_categories findFirst
   */
  export type app_categoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the app_categories
     */
    select?: app_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: app_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which app_categories to fetch.
     */
    where?: app_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of app_categories to fetch.
     */
    orderBy?: app_categoriesOrderByWithRelationInput | app_categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for app_categories.
     */
    cursor?: app_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` app_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` app_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of app_categories.
     */
    distinct?: App_categoriesScalarFieldEnum | App_categoriesScalarFieldEnum[]
  }


  /**
   * app_categories findFirstOrThrow
   */
  export type app_categoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the app_categories
     */
    select?: app_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: app_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which app_categories to fetch.
     */
    where?: app_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of app_categories to fetch.
     */
    orderBy?: app_categoriesOrderByWithRelationInput | app_categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for app_categories.
     */
    cursor?: app_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` app_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` app_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of app_categories.
     */
    distinct?: App_categoriesScalarFieldEnum | App_categoriesScalarFieldEnum[]
  }


  /**
   * app_categories findMany
   */
  export type app_categoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the app_categories
     */
    select?: app_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: app_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which app_categories to fetch.
     */
    where?: app_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of app_categories to fetch.
     */
    orderBy?: app_categoriesOrderByWithRelationInput | app_categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing app_categories.
     */
    cursor?: app_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` app_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` app_categories.
     */
    skip?: number
    distinct?: App_categoriesScalarFieldEnum | App_categoriesScalarFieldEnum[]
  }


  /**
   * app_categories create
   */
  export type app_categoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the app_categories
     */
    select?: app_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: app_categoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a app_categories.
     */
    data: XOR<app_categoriesCreateInput, app_categoriesUncheckedCreateInput>
  }


  /**
   * app_categories createMany
   */
  export type app_categoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many app_categories.
     */
    data: app_categoriesCreateManyInput | app_categoriesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * app_categories update
   */
  export type app_categoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the app_categories
     */
    select?: app_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: app_categoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a app_categories.
     */
    data: XOR<app_categoriesUpdateInput, app_categoriesUncheckedUpdateInput>
    /**
     * Choose, which app_categories to update.
     */
    where: app_categoriesWhereUniqueInput
  }


  /**
   * app_categories updateMany
   */
  export type app_categoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update app_categories.
     */
    data: XOR<app_categoriesUpdateManyMutationInput, app_categoriesUncheckedUpdateManyInput>
    /**
     * Filter which app_categories to update
     */
    where?: app_categoriesWhereInput
  }


  /**
   * app_categories upsert
   */
  export type app_categoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the app_categories
     */
    select?: app_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: app_categoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the app_categories to update in case it exists.
     */
    where: app_categoriesWhereUniqueInput
    /**
     * In case the app_categories found by the `where` argument doesn't exist, create a new app_categories with this data.
     */
    create: XOR<app_categoriesCreateInput, app_categoriesUncheckedCreateInput>
    /**
     * In case the app_categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<app_categoriesUpdateInput, app_categoriesUncheckedUpdateInput>
  }


  /**
   * app_categories delete
   */
  export type app_categoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the app_categories
     */
    select?: app_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: app_categoriesInclude<ExtArgs> | null
    /**
     * Filter which app_categories to delete.
     */
    where: app_categoriesWhereUniqueInput
  }


  /**
   * app_categories deleteMany
   */
  export type app_categoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which app_categories to delete
     */
    where?: app_categoriesWhereInput
  }


  /**
   * app_categories.applications
   */
  export type app_categories$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the applications
     */
    select?: applicationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: applicationsInclude<ExtArgs> | null
    where?: applicationsWhereInput
    orderBy?: applicationsOrderByWithRelationInput | applicationsOrderByWithRelationInput[]
    cursor?: applicationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationsScalarFieldEnum | ApplicationsScalarFieldEnum[]
  }


  /**
   * app_categories without action
   */
  export type app_categoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the app_categories
     */
    select?: app_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: app_categoriesInclude<ExtArgs> | null
  }



  /**
   * Model users_shortcuts
   */

  export type AggregateUsers_shortcuts = {
    _count: Users_shortcutsCountAggregateOutputType | null
    _avg: Users_shortcutsAvgAggregateOutputType | null
    _sum: Users_shortcutsSumAggregateOutputType | null
    _min: Users_shortcutsMinAggregateOutputType | null
    _max: Users_shortcutsMaxAggregateOutputType | null
  }

  export type Users_shortcutsAvgAggregateOutputType = {
    user_id: number | null
    shortcut_id: number | null
  }

  export type Users_shortcutsSumAggregateOutputType = {
    user_id: number | null
    shortcut_id: number | null
  }

  export type Users_shortcutsMinAggregateOutputType = {
    user_id: number | null
    shortcut_id: number | null
  }

  export type Users_shortcutsMaxAggregateOutputType = {
    user_id: number | null
    shortcut_id: number | null
  }

  export type Users_shortcutsCountAggregateOutputType = {
    user_id: number
    shortcut_id: number
    _all: number
  }


  export type Users_shortcutsAvgAggregateInputType = {
    user_id?: true
    shortcut_id?: true
  }

  export type Users_shortcutsSumAggregateInputType = {
    user_id?: true
    shortcut_id?: true
  }

  export type Users_shortcutsMinAggregateInputType = {
    user_id?: true
    shortcut_id?: true
  }

  export type Users_shortcutsMaxAggregateInputType = {
    user_id?: true
    shortcut_id?: true
  }

  export type Users_shortcutsCountAggregateInputType = {
    user_id?: true
    shortcut_id?: true
    _all?: true
  }

  export type Users_shortcutsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users_shortcuts to aggregate.
     */
    where?: users_shortcutsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_shortcuts to fetch.
     */
    orderBy?: users_shortcutsOrderByWithRelationInput | users_shortcutsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: users_shortcutsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_shortcuts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_shortcuts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users_shortcuts
    **/
    _count?: true | Users_shortcutsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Users_shortcutsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Users_shortcutsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Users_shortcutsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Users_shortcutsMaxAggregateInputType
  }

  export type GetUsers_shortcutsAggregateType<T extends Users_shortcutsAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers_shortcuts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers_shortcuts[P]>
      : GetScalarType<T[P], AggregateUsers_shortcuts[P]>
  }




  export type users_shortcutsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: users_shortcutsWhereInput
    orderBy?: users_shortcutsOrderByWithAggregationInput | users_shortcutsOrderByWithAggregationInput[]
    by: Users_shortcutsScalarFieldEnum[] | Users_shortcutsScalarFieldEnum
    having?: users_shortcutsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Users_shortcutsCountAggregateInputType | true
    _avg?: Users_shortcutsAvgAggregateInputType
    _sum?: Users_shortcutsSumAggregateInputType
    _min?: Users_shortcutsMinAggregateInputType
    _max?: Users_shortcutsMaxAggregateInputType
  }

  export type Users_shortcutsGroupByOutputType = {
    user_id: number
    shortcut_id: number
    _count: Users_shortcutsCountAggregateOutputType | null
    _avg: Users_shortcutsAvgAggregateOutputType | null
    _sum: Users_shortcutsSumAggregateOutputType | null
    _min: Users_shortcutsMinAggregateOutputType | null
    _max: Users_shortcutsMaxAggregateOutputType | null
  }

  type GetUsers_shortcutsGroupByPayload<T extends users_shortcutsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Users_shortcutsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Users_shortcutsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Users_shortcutsGroupByOutputType[P]>
            : GetScalarType<T[P], Users_shortcutsGroupByOutputType[P]>
        }
      >
    >


  export type users_shortcutsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    shortcut_id?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
    shortcuts?: boolean | shortcutsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users_shortcuts"]>

  export type users_shortcutsSelectScalar = {
    user_id?: boolean
    shortcut_id?: boolean
  }

  export type users_shortcutsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
    shortcuts?: boolean | shortcutsDefaultArgs<ExtArgs>
  }


  export type $users_shortcutsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users_shortcuts"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
      shortcuts: Prisma.$shortcutsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      shortcut_id: number
    }, ExtArgs["result"]["users_shortcuts"]>
    composites: {}
  }


  type users_shortcutsGetPayload<S extends boolean | null | undefined | users_shortcutsDefaultArgs> = $Result.GetResult<Prisma.$users_shortcutsPayload, S>

  type users_shortcutsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<users_shortcutsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Users_shortcutsCountAggregateInputType | true
    }

  export interface users_shortcutsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users_shortcuts'], meta: { name: 'users_shortcuts' } }
    /**
     * Find zero or one Users_shortcuts that matches the filter.
     * @param {users_shortcutsFindUniqueArgs} args - Arguments to find a Users_shortcuts
     * @example
     * // Get one Users_shortcuts
     * const users_shortcuts = await prisma.users_shortcuts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends users_shortcutsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, users_shortcutsFindUniqueArgs<ExtArgs>>
    ): Prisma__users_shortcutsClient<$Result.GetResult<Prisma.$users_shortcutsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users_shortcuts that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {users_shortcutsFindUniqueOrThrowArgs} args - Arguments to find a Users_shortcuts
     * @example
     * // Get one Users_shortcuts
     * const users_shortcuts = await prisma.users_shortcuts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends users_shortcutsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, users_shortcutsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__users_shortcutsClient<$Result.GetResult<Prisma.$users_shortcutsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users_shortcuts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_shortcutsFindFirstArgs} args - Arguments to find a Users_shortcuts
     * @example
     * // Get one Users_shortcuts
     * const users_shortcuts = await prisma.users_shortcuts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends users_shortcutsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, users_shortcutsFindFirstArgs<ExtArgs>>
    ): Prisma__users_shortcutsClient<$Result.GetResult<Prisma.$users_shortcutsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users_shortcuts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_shortcutsFindFirstOrThrowArgs} args - Arguments to find a Users_shortcuts
     * @example
     * // Get one Users_shortcuts
     * const users_shortcuts = await prisma.users_shortcuts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends users_shortcutsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, users_shortcutsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__users_shortcutsClient<$Result.GetResult<Prisma.$users_shortcutsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users_shortcuts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_shortcutsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users_shortcuts
     * const users_shortcuts = await prisma.users_shortcuts.findMany()
     * 
     * // Get first 10 Users_shortcuts
     * const users_shortcuts = await prisma.users_shortcuts.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const users_shortcutsWithUser_idOnly = await prisma.users_shortcuts.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends users_shortcutsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, users_shortcutsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$users_shortcutsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users_shortcuts.
     * @param {users_shortcutsCreateArgs} args - Arguments to create a Users_shortcuts.
     * @example
     * // Create one Users_shortcuts
     * const Users_shortcuts = await prisma.users_shortcuts.create({
     *   data: {
     *     // ... data to create a Users_shortcuts
     *   }
     * })
     * 
    **/
    create<T extends users_shortcutsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, users_shortcutsCreateArgs<ExtArgs>>
    ): Prisma__users_shortcutsClient<$Result.GetResult<Prisma.$users_shortcutsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users_shortcuts.
     *     @param {users_shortcutsCreateManyArgs} args - Arguments to create many Users_shortcuts.
     *     @example
     *     // Create many Users_shortcuts
     *     const users_shortcuts = await prisma.users_shortcuts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends users_shortcutsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, users_shortcutsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users_shortcuts.
     * @param {users_shortcutsDeleteArgs} args - Arguments to delete one Users_shortcuts.
     * @example
     * // Delete one Users_shortcuts
     * const Users_shortcuts = await prisma.users_shortcuts.delete({
     *   where: {
     *     // ... filter to delete one Users_shortcuts
     *   }
     * })
     * 
    **/
    delete<T extends users_shortcutsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, users_shortcutsDeleteArgs<ExtArgs>>
    ): Prisma__users_shortcutsClient<$Result.GetResult<Prisma.$users_shortcutsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users_shortcuts.
     * @param {users_shortcutsUpdateArgs} args - Arguments to update one Users_shortcuts.
     * @example
     * // Update one Users_shortcuts
     * const users_shortcuts = await prisma.users_shortcuts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends users_shortcutsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, users_shortcutsUpdateArgs<ExtArgs>>
    ): Prisma__users_shortcutsClient<$Result.GetResult<Prisma.$users_shortcutsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users_shortcuts.
     * @param {users_shortcutsDeleteManyArgs} args - Arguments to filter Users_shortcuts to delete.
     * @example
     * // Delete a few Users_shortcuts
     * const { count } = await prisma.users_shortcuts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends users_shortcutsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, users_shortcutsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users_shortcuts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_shortcutsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users_shortcuts
     * const users_shortcuts = await prisma.users_shortcuts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends users_shortcutsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, users_shortcutsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users_shortcuts.
     * @param {users_shortcutsUpsertArgs} args - Arguments to update or create a Users_shortcuts.
     * @example
     * // Update or create a Users_shortcuts
     * const users_shortcuts = await prisma.users_shortcuts.upsert({
     *   create: {
     *     // ... data to create a Users_shortcuts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users_shortcuts we want to update
     *   }
     * })
    **/
    upsert<T extends users_shortcutsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, users_shortcutsUpsertArgs<ExtArgs>>
    ): Prisma__users_shortcutsClient<$Result.GetResult<Prisma.$users_shortcutsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users_shortcuts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_shortcutsCountArgs} args - Arguments to filter Users_shortcuts to count.
     * @example
     * // Count the number of Users_shortcuts
     * const count = await prisma.users_shortcuts.count({
     *   where: {
     *     // ... the filter for the Users_shortcuts we want to count
     *   }
     * })
    **/
    count<T extends users_shortcutsCountArgs>(
      args?: Subset<T, users_shortcutsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Users_shortcutsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users_shortcuts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_shortcutsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Users_shortcutsAggregateArgs>(args: Subset<T, Users_shortcutsAggregateArgs>): Prisma.PrismaPromise<GetUsers_shortcutsAggregateType<T>>

    /**
     * Group by Users_shortcuts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_shortcutsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends users_shortcutsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: users_shortcutsGroupByArgs['orderBy'] }
        : { orderBy?: users_shortcutsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, users_shortcutsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsers_shortcutsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users_shortcuts model
   */
  readonly fields: users_shortcutsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users_shortcuts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__users_shortcutsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    shortcuts<T extends shortcutsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, shortcutsDefaultArgs<ExtArgs>>): Prisma__shortcutsClient<$Result.GetResult<Prisma.$shortcutsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the users_shortcuts model
   */ 
  interface users_shortcutsFieldRefs {
    readonly user_id: FieldRef<"users_shortcuts", 'Int'>
    readonly shortcut_id: FieldRef<"users_shortcuts", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * users_shortcuts findUnique
   */
  export type users_shortcutsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_shortcuts
     */
    select?: users_shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: users_shortcutsInclude<ExtArgs> | null
    /**
     * Filter, which users_shortcuts to fetch.
     */
    where: users_shortcutsWhereUniqueInput
  }


  /**
   * users_shortcuts findUniqueOrThrow
   */
  export type users_shortcutsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_shortcuts
     */
    select?: users_shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: users_shortcutsInclude<ExtArgs> | null
    /**
     * Filter, which users_shortcuts to fetch.
     */
    where: users_shortcutsWhereUniqueInput
  }


  /**
   * users_shortcuts findFirst
   */
  export type users_shortcutsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_shortcuts
     */
    select?: users_shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: users_shortcutsInclude<ExtArgs> | null
    /**
     * Filter, which users_shortcuts to fetch.
     */
    where?: users_shortcutsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_shortcuts to fetch.
     */
    orderBy?: users_shortcutsOrderByWithRelationInput | users_shortcutsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users_shortcuts.
     */
    cursor?: users_shortcutsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_shortcuts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_shortcuts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users_shortcuts.
     */
    distinct?: Users_shortcutsScalarFieldEnum | Users_shortcutsScalarFieldEnum[]
  }


  /**
   * users_shortcuts findFirstOrThrow
   */
  export type users_shortcutsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_shortcuts
     */
    select?: users_shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: users_shortcutsInclude<ExtArgs> | null
    /**
     * Filter, which users_shortcuts to fetch.
     */
    where?: users_shortcutsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_shortcuts to fetch.
     */
    orderBy?: users_shortcutsOrderByWithRelationInput | users_shortcutsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users_shortcuts.
     */
    cursor?: users_shortcutsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_shortcuts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_shortcuts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users_shortcuts.
     */
    distinct?: Users_shortcutsScalarFieldEnum | Users_shortcutsScalarFieldEnum[]
  }


  /**
   * users_shortcuts findMany
   */
  export type users_shortcutsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_shortcuts
     */
    select?: users_shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: users_shortcutsInclude<ExtArgs> | null
    /**
     * Filter, which users_shortcuts to fetch.
     */
    where?: users_shortcutsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_shortcuts to fetch.
     */
    orderBy?: users_shortcutsOrderByWithRelationInput | users_shortcutsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users_shortcuts.
     */
    cursor?: users_shortcutsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_shortcuts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_shortcuts.
     */
    skip?: number
    distinct?: Users_shortcutsScalarFieldEnum | Users_shortcutsScalarFieldEnum[]
  }


  /**
   * users_shortcuts create
   */
  export type users_shortcutsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_shortcuts
     */
    select?: users_shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: users_shortcutsInclude<ExtArgs> | null
    /**
     * The data needed to create a users_shortcuts.
     */
    data: XOR<users_shortcutsCreateInput, users_shortcutsUncheckedCreateInput>
  }


  /**
   * users_shortcuts createMany
   */
  export type users_shortcutsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users_shortcuts.
     */
    data: users_shortcutsCreateManyInput | users_shortcutsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * users_shortcuts update
   */
  export type users_shortcutsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_shortcuts
     */
    select?: users_shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: users_shortcutsInclude<ExtArgs> | null
    /**
     * The data needed to update a users_shortcuts.
     */
    data: XOR<users_shortcutsUpdateInput, users_shortcutsUncheckedUpdateInput>
    /**
     * Choose, which users_shortcuts to update.
     */
    where: users_shortcutsWhereUniqueInput
  }


  /**
   * users_shortcuts updateMany
   */
  export type users_shortcutsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users_shortcuts.
     */
    data: XOR<users_shortcutsUpdateManyMutationInput, users_shortcutsUncheckedUpdateManyInput>
    /**
     * Filter which users_shortcuts to update
     */
    where?: users_shortcutsWhereInput
  }


  /**
   * users_shortcuts upsert
   */
  export type users_shortcutsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_shortcuts
     */
    select?: users_shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: users_shortcutsInclude<ExtArgs> | null
    /**
     * The filter to search for the users_shortcuts to update in case it exists.
     */
    where: users_shortcutsWhereUniqueInput
    /**
     * In case the users_shortcuts found by the `where` argument doesn't exist, create a new users_shortcuts with this data.
     */
    create: XOR<users_shortcutsCreateInput, users_shortcutsUncheckedCreateInput>
    /**
     * In case the users_shortcuts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<users_shortcutsUpdateInput, users_shortcutsUncheckedUpdateInput>
  }


  /**
   * users_shortcuts delete
   */
  export type users_shortcutsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_shortcuts
     */
    select?: users_shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: users_shortcutsInclude<ExtArgs> | null
    /**
     * Filter which users_shortcuts to delete.
     */
    where: users_shortcutsWhereUniqueInput
  }


  /**
   * users_shortcuts deleteMany
   */
  export type users_shortcutsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users_shortcuts to delete
     */
    where?: users_shortcutsWhereInput
  }


  /**
   * users_shortcuts without action
   */
  export type users_shortcutsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_shortcuts
     */
    select?: users_shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: users_shortcutsInclude<ExtArgs> | null
  }



  /**
   * Model chapters
   */

  export type AggregateChapters = {
    _count: ChaptersCountAggregateOutputType | null
    _avg: ChaptersAvgAggregateOutputType | null
    _sum: ChaptersSumAggregateOutputType | null
    _min: ChaptersMinAggregateOutputType | null
    _max: ChaptersMaxAggregateOutputType | null
  }

  export type ChaptersAvgAggregateOutputType = {
    chapter_id: number | null
  }

  export type ChaptersSumAggregateOutputType = {
    chapter_id: number | null
  }

  export type ChaptersMinAggregateOutputType = {
    chapter_id: number | null
    chapter_name: string | null
  }

  export type ChaptersMaxAggregateOutputType = {
    chapter_id: number | null
    chapter_name: string | null
  }

  export type ChaptersCountAggregateOutputType = {
    chapter_id: number
    chapter_name: number
    _all: number
  }


  export type ChaptersAvgAggregateInputType = {
    chapter_id?: true
  }

  export type ChaptersSumAggregateInputType = {
    chapter_id?: true
  }

  export type ChaptersMinAggregateInputType = {
    chapter_id?: true
    chapter_name?: true
  }

  export type ChaptersMaxAggregateInputType = {
    chapter_id?: true
    chapter_name?: true
  }

  export type ChaptersCountAggregateInputType = {
    chapter_id?: true
    chapter_name?: true
    _all?: true
  }

  export type ChaptersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which chapters to aggregate.
     */
    where?: chaptersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chapters to fetch.
     */
    orderBy?: chaptersOrderByWithRelationInput | chaptersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: chaptersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chapters
    **/
    _count?: true | ChaptersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChaptersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChaptersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChaptersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChaptersMaxAggregateInputType
  }

  export type GetChaptersAggregateType<T extends ChaptersAggregateArgs> = {
        [P in keyof T & keyof AggregateChapters]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChapters[P]>
      : GetScalarType<T[P], AggregateChapters[P]>
  }




  export type chaptersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: chaptersWhereInput
    orderBy?: chaptersOrderByWithAggregationInput | chaptersOrderByWithAggregationInput[]
    by: ChaptersScalarFieldEnum[] | ChaptersScalarFieldEnum
    having?: chaptersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChaptersCountAggregateInputType | true
    _avg?: ChaptersAvgAggregateInputType
    _sum?: ChaptersSumAggregateInputType
    _min?: ChaptersMinAggregateInputType
    _max?: ChaptersMaxAggregateInputType
  }

  export type ChaptersGroupByOutputType = {
    chapter_id: number
    chapter_name: string
    _count: ChaptersCountAggregateOutputType | null
    _avg: ChaptersAvgAggregateOutputType | null
    _sum: ChaptersSumAggregateOutputType | null
    _min: ChaptersMinAggregateOutputType | null
    _max: ChaptersMaxAggregateOutputType | null
  }

  type GetChaptersGroupByPayload<T extends chaptersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChaptersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChaptersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChaptersGroupByOutputType[P]>
            : GetScalarType<T[P], ChaptersGroupByOutputType[P]>
        }
      >
    >


  export type chaptersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    chapter_id?: boolean
    chapter_name?: boolean
    shortcuts?: boolean | chapters$shortcutsArgs<ExtArgs>
    _count?: boolean | ChaptersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chapters"]>

  export type chaptersSelectScalar = {
    chapter_id?: boolean
    chapter_name?: boolean
  }

  export type chaptersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shortcuts?: boolean | chapters$shortcutsArgs<ExtArgs>
    _count?: boolean | ChaptersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $chaptersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "chapters"
    objects: {
      shortcuts: Prisma.$shortcutsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      chapter_id: number
      chapter_name: string
    }, ExtArgs["result"]["chapters"]>
    composites: {}
  }


  type chaptersGetPayload<S extends boolean | null | undefined | chaptersDefaultArgs> = $Result.GetResult<Prisma.$chaptersPayload, S>

  type chaptersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<chaptersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChaptersCountAggregateInputType | true
    }

  export interface chaptersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['chapters'], meta: { name: 'chapters' } }
    /**
     * Find zero or one Chapters that matches the filter.
     * @param {chaptersFindUniqueArgs} args - Arguments to find a Chapters
     * @example
     * // Get one Chapters
     * const chapters = await prisma.chapters.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chaptersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, chaptersFindUniqueArgs<ExtArgs>>
    ): Prisma__chaptersClient<$Result.GetResult<Prisma.$chaptersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Chapters that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chaptersFindUniqueOrThrowArgs} args - Arguments to find a Chapters
     * @example
     * // Get one Chapters
     * const chapters = await prisma.chapters.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chaptersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, chaptersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__chaptersClient<$Result.GetResult<Prisma.$chaptersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Chapters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chaptersFindFirstArgs} args - Arguments to find a Chapters
     * @example
     * // Get one Chapters
     * const chapters = await prisma.chapters.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chaptersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, chaptersFindFirstArgs<ExtArgs>>
    ): Prisma__chaptersClient<$Result.GetResult<Prisma.$chaptersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Chapters that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chaptersFindFirstOrThrowArgs} args - Arguments to find a Chapters
     * @example
     * // Get one Chapters
     * const chapters = await prisma.chapters.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chaptersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, chaptersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__chaptersClient<$Result.GetResult<Prisma.$chaptersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Chapters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chaptersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chapters
     * const chapters = await prisma.chapters.findMany()
     * 
     * // Get first 10 Chapters
     * const chapters = await prisma.chapters.findMany({ take: 10 })
     * 
     * // Only select the `chapter_id`
     * const chaptersWithChapter_idOnly = await prisma.chapters.findMany({ select: { chapter_id: true } })
     * 
    **/
    findMany<T extends chaptersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, chaptersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$chaptersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Chapters.
     * @param {chaptersCreateArgs} args - Arguments to create a Chapters.
     * @example
     * // Create one Chapters
     * const Chapters = await prisma.chapters.create({
     *   data: {
     *     // ... data to create a Chapters
     *   }
     * })
     * 
    **/
    create<T extends chaptersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, chaptersCreateArgs<ExtArgs>>
    ): Prisma__chaptersClient<$Result.GetResult<Prisma.$chaptersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Chapters.
     *     @param {chaptersCreateManyArgs} args - Arguments to create many Chapters.
     *     @example
     *     // Create many Chapters
     *     const chapters = await prisma.chapters.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chaptersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, chaptersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chapters.
     * @param {chaptersDeleteArgs} args - Arguments to delete one Chapters.
     * @example
     * // Delete one Chapters
     * const Chapters = await prisma.chapters.delete({
     *   where: {
     *     // ... filter to delete one Chapters
     *   }
     * })
     * 
    **/
    delete<T extends chaptersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, chaptersDeleteArgs<ExtArgs>>
    ): Prisma__chaptersClient<$Result.GetResult<Prisma.$chaptersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Chapters.
     * @param {chaptersUpdateArgs} args - Arguments to update one Chapters.
     * @example
     * // Update one Chapters
     * const chapters = await prisma.chapters.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chaptersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, chaptersUpdateArgs<ExtArgs>>
    ): Prisma__chaptersClient<$Result.GetResult<Prisma.$chaptersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Chapters.
     * @param {chaptersDeleteManyArgs} args - Arguments to filter Chapters to delete.
     * @example
     * // Delete a few Chapters
     * const { count } = await prisma.chapters.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chaptersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, chaptersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chaptersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chapters
     * const chapters = await prisma.chapters.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chaptersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, chaptersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chapters.
     * @param {chaptersUpsertArgs} args - Arguments to update or create a Chapters.
     * @example
     * // Update or create a Chapters
     * const chapters = await prisma.chapters.upsert({
     *   create: {
     *     // ... data to create a Chapters
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chapters we want to update
     *   }
     * })
    **/
    upsert<T extends chaptersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, chaptersUpsertArgs<ExtArgs>>
    ): Prisma__chaptersClient<$Result.GetResult<Prisma.$chaptersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chaptersCountArgs} args - Arguments to filter Chapters to count.
     * @example
     * // Count the number of Chapters
     * const count = await prisma.chapters.count({
     *   where: {
     *     // ... the filter for the Chapters we want to count
     *   }
     * })
    **/
    count<T extends chaptersCountArgs>(
      args?: Subset<T, chaptersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChaptersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChaptersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChaptersAggregateArgs>(args: Subset<T, ChaptersAggregateArgs>): Prisma.PrismaPromise<GetChaptersAggregateType<T>>

    /**
     * Group by Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chaptersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends chaptersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: chaptersGroupByArgs['orderBy'] }
        : { orderBy?: chaptersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, chaptersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChaptersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the chapters model
   */
  readonly fields: chaptersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for chapters.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__chaptersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    shortcuts<T extends chapters$shortcutsArgs<ExtArgs> = {}>(args?: Subset<T, chapters$shortcutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$shortcutsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the chapters model
   */ 
  interface chaptersFieldRefs {
    readonly chapter_id: FieldRef<"chapters", 'Int'>
    readonly chapter_name: FieldRef<"chapters", 'String'>
  }
    

  // Custom InputTypes

  /**
   * chapters findUnique
   */
  export type chaptersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude<ExtArgs> | null
    /**
     * Filter, which chapters to fetch.
     */
    where: chaptersWhereUniqueInput
  }


  /**
   * chapters findUniqueOrThrow
   */
  export type chaptersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude<ExtArgs> | null
    /**
     * Filter, which chapters to fetch.
     */
    where: chaptersWhereUniqueInput
  }


  /**
   * chapters findFirst
   */
  export type chaptersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude<ExtArgs> | null
    /**
     * Filter, which chapters to fetch.
     */
    where?: chaptersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chapters to fetch.
     */
    orderBy?: chaptersOrderByWithRelationInput | chaptersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chapters.
     */
    cursor?: chaptersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chapters.
     */
    distinct?: ChaptersScalarFieldEnum | ChaptersScalarFieldEnum[]
  }


  /**
   * chapters findFirstOrThrow
   */
  export type chaptersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude<ExtArgs> | null
    /**
     * Filter, which chapters to fetch.
     */
    where?: chaptersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chapters to fetch.
     */
    orderBy?: chaptersOrderByWithRelationInput | chaptersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chapters.
     */
    cursor?: chaptersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chapters.
     */
    distinct?: ChaptersScalarFieldEnum | ChaptersScalarFieldEnum[]
  }


  /**
   * chapters findMany
   */
  export type chaptersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude<ExtArgs> | null
    /**
     * Filter, which chapters to fetch.
     */
    where?: chaptersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chapters to fetch.
     */
    orderBy?: chaptersOrderByWithRelationInput | chaptersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chapters.
     */
    cursor?: chaptersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chapters.
     */
    skip?: number
    distinct?: ChaptersScalarFieldEnum | ChaptersScalarFieldEnum[]
  }


  /**
   * chapters create
   */
  export type chaptersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude<ExtArgs> | null
    /**
     * The data needed to create a chapters.
     */
    data: XOR<chaptersCreateInput, chaptersUncheckedCreateInput>
  }


  /**
   * chapters createMany
   */
  export type chaptersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many chapters.
     */
    data: chaptersCreateManyInput | chaptersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * chapters update
   */
  export type chaptersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude<ExtArgs> | null
    /**
     * The data needed to update a chapters.
     */
    data: XOR<chaptersUpdateInput, chaptersUncheckedUpdateInput>
    /**
     * Choose, which chapters to update.
     */
    where: chaptersWhereUniqueInput
  }


  /**
   * chapters updateMany
   */
  export type chaptersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update chapters.
     */
    data: XOR<chaptersUpdateManyMutationInput, chaptersUncheckedUpdateManyInput>
    /**
     * Filter which chapters to update
     */
    where?: chaptersWhereInput
  }


  /**
   * chapters upsert
   */
  export type chaptersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude<ExtArgs> | null
    /**
     * The filter to search for the chapters to update in case it exists.
     */
    where: chaptersWhereUniqueInput
    /**
     * In case the chapters found by the `where` argument doesn't exist, create a new chapters with this data.
     */
    create: XOR<chaptersCreateInput, chaptersUncheckedCreateInput>
    /**
     * In case the chapters was found with the provided `where` argument, update it with this data.
     */
    update: XOR<chaptersUpdateInput, chaptersUncheckedUpdateInput>
  }


  /**
   * chapters delete
   */
  export type chaptersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude<ExtArgs> | null
    /**
     * Filter which chapters to delete.
     */
    where: chaptersWhereUniqueInput
  }


  /**
   * chapters deleteMany
   */
  export type chaptersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which chapters to delete
     */
    where?: chaptersWhereInput
  }


  /**
   * chapters.shortcuts
   */
  export type chapters$shortcutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts
     */
    select?: shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcutsInclude<ExtArgs> | null
    where?: shortcutsWhereInput
    orderBy?: shortcutsOrderByWithRelationInput | shortcutsOrderByWithRelationInput[]
    cursor?: shortcutsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShortcutsScalarFieldEnum | ShortcutsScalarFieldEnum[]
  }


  /**
   * chapters without action
   */
  export type chaptersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude<ExtArgs> | null
  }



  /**
   * Model shortcuts
   */

  export type AggregateShortcuts = {
    _count: ShortcutsCountAggregateOutputType | null
    _avg: ShortcutsAvgAggregateOutputType | null
    _sum: ShortcutsSumAggregateOutputType | null
    _min: ShortcutsMinAggregateOutputType | null
    _max: ShortcutsMaxAggregateOutputType | null
  }

  export type ShortcutsAvgAggregateOutputType = {
    shortcut_id: number | null
    chapter_id: number | null
    app_id: number | null
  }

  export type ShortcutsSumAggregateOutputType = {
    shortcut_id: number | null
    chapter_id: number | null
    app_id: number | null
  }

  export type ShortcutsMinAggregateOutputType = {
    shortcut_id: number | null
    chapter_id: number | null
    app_id: number | null
    shortcut_name: string | null
    shortcut_desc: string | null
  }

  export type ShortcutsMaxAggregateOutputType = {
    shortcut_id: number | null
    chapter_id: number | null
    app_id: number | null
    shortcut_name: string | null
    shortcut_desc: string | null
  }

  export type ShortcutsCountAggregateOutputType = {
    shortcut_id: number
    chapter_id: number
    app_id: number
    shortcut_name: number
    shortcut_desc: number
    _all: number
  }


  export type ShortcutsAvgAggregateInputType = {
    shortcut_id?: true
    chapter_id?: true
    app_id?: true
  }

  export type ShortcutsSumAggregateInputType = {
    shortcut_id?: true
    chapter_id?: true
    app_id?: true
  }

  export type ShortcutsMinAggregateInputType = {
    shortcut_id?: true
    chapter_id?: true
    app_id?: true
    shortcut_name?: true
    shortcut_desc?: true
  }

  export type ShortcutsMaxAggregateInputType = {
    shortcut_id?: true
    chapter_id?: true
    app_id?: true
    shortcut_name?: true
    shortcut_desc?: true
  }

  export type ShortcutsCountAggregateInputType = {
    shortcut_id?: true
    chapter_id?: true
    app_id?: true
    shortcut_name?: true
    shortcut_desc?: true
    _all?: true
  }

  export type ShortcutsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which shortcuts to aggregate.
     */
    where?: shortcutsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shortcuts to fetch.
     */
    orderBy?: shortcutsOrderByWithRelationInput | shortcutsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: shortcutsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shortcuts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shortcuts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned shortcuts
    **/
    _count?: true | ShortcutsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShortcutsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShortcutsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShortcutsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShortcutsMaxAggregateInputType
  }

  export type GetShortcutsAggregateType<T extends ShortcutsAggregateArgs> = {
        [P in keyof T & keyof AggregateShortcuts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShortcuts[P]>
      : GetScalarType<T[P], AggregateShortcuts[P]>
  }




  export type shortcutsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: shortcutsWhereInput
    orderBy?: shortcutsOrderByWithAggregationInput | shortcutsOrderByWithAggregationInput[]
    by: ShortcutsScalarFieldEnum[] | ShortcutsScalarFieldEnum
    having?: shortcutsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShortcutsCountAggregateInputType | true
    _avg?: ShortcutsAvgAggregateInputType
    _sum?: ShortcutsSumAggregateInputType
    _min?: ShortcutsMinAggregateInputType
    _max?: ShortcutsMaxAggregateInputType
  }

  export type ShortcutsGroupByOutputType = {
    shortcut_id: number
    chapter_id: number
    app_id: number
    shortcut_name: string
    shortcut_desc: string
    _count: ShortcutsCountAggregateOutputType | null
    _avg: ShortcutsAvgAggregateOutputType | null
    _sum: ShortcutsSumAggregateOutputType | null
    _min: ShortcutsMinAggregateOutputType | null
    _max: ShortcutsMaxAggregateOutputType | null
  }

  type GetShortcutsGroupByPayload<T extends shortcutsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShortcutsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShortcutsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShortcutsGroupByOutputType[P]>
            : GetScalarType<T[P], ShortcutsGroupByOutputType[P]>
        }
      >
    >


  export type shortcutsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    shortcut_id?: boolean
    chapter_id?: boolean
    app_id?: boolean
    shortcut_name?: boolean
    shortcut_desc?: boolean
    chapters?: boolean | chaptersDefaultArgs<ExtArgs>
    applications?: boolean | applicationsDefaultArgs<ExtArgs>
    users_shortcuts?: boolean | shortcuts$users_shortcutsArgs<ExtArgs>
    shortcuts_keys?: boolean | shortcuts$shortcuts_keysArgs<ExtArgs>
    _count?: boolean | ShortcutsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shortcuts"]>

  export type shortcutsSelectScalar = {
    shortcut_id?: boolean
    chapter_id?: boolean
    app_id?: boolean
    shortcut_name?: boolean
    shortcut_desc?: boolean
  }

  export type shortcutsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chapters?: boolean | chaptersDefaultArgs<ExtArgs>
    applications?: boolean | applicationsDefaultArgs<ExtArgs>
    users_shortcuts?: boolean | shortcuts$users_shortcutsArgs<ExtArgs>
    shortcuts_keys?: boolean | shortcuts$shortcuts_keysArgs<ExtArgs>
    _count?: boolean | ShortcutsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $shortcutsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "shortcuts"
    objects: {
      chapters: Prisma.$chaptersPayload<ExtArgs>
      applications: Prisma.$applicationsPayload<ExtArgs>
      users_shortcuts: Prisma.$users_shortcutsPayload<ExtArgs>[]
      shortcuts_keys: Prisma.$shortcuts_keysPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      shortcut_id: number
      chapter_id: number
      app_id: number
      shortcut_name: string
      shortcut_desc: string
    }, ExtArgs["result"]["shortcuts"]>
    composites: {}
  }


  type shortcutsGetPayload<S extends boolean | null | undefined | shortcutsDefaultArgs> = $Result.GetResult<Prisma.$shortcutsPayload, S>

  type shortcutsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<shortcutsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShortcutsCountAggregateInputType | true
    }

  export interface shortcutsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['shortcuts'], meta: { name: 'shortcuts' } }
    /**
     * Find zero or one Shortcuts that matches the filter.
     * @param {shortcutsFindUniqueArgs} args - Arguments to find a Shortcuts
     * @example
     * // Get one Shortcuts
     * const shortcuts = await prisma.shortcuts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends shortcutsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, shortcutsFindUniqueArgs<ExtArgs>>
    ): Prisma__shortcutsClient<$Result.GetResult<Prisma.$shortcutsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Shortcuts that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {shortcutsFindUniqueOrThrowArgs} args - Arguments to find a Shortcuts
     * @example
     * // Get one Shortcuts
     * const shortcuts = await prisma.shortcuts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends shortcutsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, shortcutsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__shortcutsClient<$Result.GetResult<Prisma.$shortcutsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Shortcuts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shortcutsFindFirstArgs} args - Arguments to find a Shortcuts
     * @example
     * // Get one Shortcuts
     * const shortcuts = await prisma.shortcuts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends shortcutsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, shortcutsFindFirstArgs<ExtArgs>>
    ): Prisma__shortcutsClient<$Result.GetResult<Prisma.$shortcutsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Shortcuts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shortcutsFindFirstOrThrowArgs} args - Arguments to find a Shortcuts
     * @example
     * // Get one Shortcuts
     * const shortcuts = await prisma.shortcuts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends shortcutsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, shortcutsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__shortcutsClient<$Result.GetResult<Prisma.$shortcutsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Shortcuts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shortcutsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shortcuts
     * const shortcuts = await prisma.shortcuts.findMany()
     * 
     * // Get first 10 Shortcuts
     * const shortcuts = await prisma.shortcuts.findMany({ take: 10 })
     * 
     * // Only select the `shortcut_id`
     * const shortcutsWithShortcut_idOnly = await prisma.shortcuts.findMany({ select: { shortcut_id: true } })
     * 
    **/
    findMany<T extends shortcutsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, shortcutsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$shortcutsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Shortcuts.
     * @param {shortcutsCreateArgs} args - Arguments to create a Shortcuts.
     * @example
     * // Create one Shortcuts
     * const Shortcuts = await prisma.shortcuts.create({
     *   data: {
     *     // ... data to create a Shortcuts
     *   }
     * })
     * 
    **/
    create<T extends shortcutsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, shortcutsCreateArgs<ExtArgs>>
    ): Prisma__shortcutsClient<$Result.GetResult<Prisma.$shortcutsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Shortcuts.
     *     @param {shortcutsCreateManyArgs} args - Arguments to create many Shortcuts.
     *     @example
     *     // Create many Shortcuts
     *     const shortcuts = await prisma.shortcuts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends shortcutsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, shortcutsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Shortcuts.
     * @param {shortcutsDeleteArgs} args - Arguments to delete one Shortcuts.
     * @example
     * // Delete one Shortcuts
     * const Shortcuts = await prisma.shortcuts.delete({
     *   where: {
     *     // ... filter to delete one Shortcuts
     *   }
     * })
     * 
    **/
    delete<T extends shortcutsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, shortcutsDeleteArgs<ExtArgs>>
    ): Prisma__shortcutsClient<$Result.GetResult<Prisma.$shortcutsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Shortcuts.
     * @param {shortcutsUpdateArgs} args - Arguments to update one Shortcuts.
     * @example
     * // Update one Shortcuts
     * const shortcuts = await prisma.shortcuts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends shortcutsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, shortcutsUpdateArgs<ExtArgs>>
    ): Prisma__shortcutsClient<$Result.GetResult<Prisma.$shortcutsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Shortcuts.
     * @param {shortcutsDeleteManyArgs} args - Arguments to filter Shortcuts to delete.
     * @example
     * // Delete a few Shortcuts
     * const { count } = await prisma.shortcuts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends shortcutsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, shortcutsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shortcuts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shortcutsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shortcuts
     * const shortcuts = await prisma.shortcuts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends shortcutsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, shortcutsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Shortcuts.
     * @param {shortcutsUpsertArgs} args - Arguments to update or create a Shortcuts.
     * @example
     * // Update or create a Shortcuts
     * const shortcuts = await prisma.shortcuts.upsert({
     *   create: {
     *     // ... data to create a Shortcuts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shortcuts we want to update
     *   }
     * })
    **/
    upsert<T extends shortcutsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, shortcutsUpsertArgs<ExtArgs>>
    ): Prisma__shortcutsClient<$Result.GetResult<Prisma.$shortcutsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Shortcuts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shortcutsCountArgs} args - Arguments to filter Shortcuts to count.
     * @example
     * // Count the number of Shortcuts
     * const count = await prisma.shortcuts.count({
     *   where: {
     *     // ... the filter for the Shortcuts we want to count
     *   }
     * })
    **/
    count<T extends shortcutsCountArgs>(
      args?: Subset<T, shortcutsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShortcutsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shortcuts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShortcutsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShortcutsAggregateArgs>(args: Subset<T, ShortcutsAggregateArgs>): Prisma.PrismaPromise<GetShortcutsAggregateType<T>>

    /**
     * Group by Shortcuts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shortcutsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends shortcutsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: shortcutsGroupByArgs['orderBy'] }
        : { orderBy?: shortcutsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, shortcutsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShortcutsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the shortcuts model
   */
  readonly fields: shortcutsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for shortcuts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__shortcutsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    chapters<T extends chaptersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, chaptersDefaultArgs<ExtArgs>>): Prisma__chaptersClient<$Result.GetResult<Prisma.$chaptersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    applications<T extends applicationsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, applicationsDefaultArgs<ExtArgs>>): Prisma__applicationsClient<$Result.GetResult<Prisma.$applicationsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    users_shortcuts<T extends shortcuts$users_shortcutsArgs<ExtArgs> = {}>(args?: Subset<T, shortcuts$users_shortcutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$users_shortcutsPayload<ExtArgs>, T, 'findMany'> | Null>;

    shortcuts_keys<T extends shortcuts$shortcuts_keysArgs<ExtArgs> = {}>(args?: Subset<T, shortcuts$shortcuts_keysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$shortcuts_keysPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the shortcuts model
   */ 
  interface shortcutsFieldRefs {
    readonly shortcut_id: FieldRef<"shortcuts", 'Int'>
    readonly chapter_id: FieldRef<"shortcuts", 'Int'>
    readonly app_id: FieldRef<"shortcuts", 'Int'>
    readonly shortcut_name: FieldRef<"shortcuts", 'String'>
    readonly shortcut_desc: FieldRef<"shortcuts", 'String'>
  }
    

  // Custom InputTypes

  /**
   * shortcuts findUnique
   */
  export type shortcutsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts
     */
    select?: shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcutsInclude<ExtArgs> | null
    /**
     * Filter, which shortcuts to fetch.
     */
    where: shortcutsWhereUniqueInput
  }


  /**
   * shortcuts findUniqueOrThrow
   */
  export type shortcutsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts
     */
    select?: shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcutsInclude<ExtArgs> | null
    /**
     * Filter, which shortcuts to fetch.
     */
    where: shortcutsWhereUniqueInput
  }


  /**
   * shortcuts findFirst
   */
  export type shortcutsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts
     */
    select?: shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcutsInclude<ExtArgs> | null
    /**
     * Filter, which shortcuts to fetch.
     */
    where?: shortcutsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shortcuts to fetch.
     */
    orderBy?: shortcutsOrderByWithRelationInput | shortcutsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for shortcuts.
     */
    cursor?: shortcutsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shortcuts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shortcuts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of shortcuts.
     */
    distinct?: ShortcutsScalarFieldEnum | ShortcutsScalarFieldEnum[]
  }


  /**
   * shortcuts findFirstOrThrow
   */
  export type shortcutsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts
     */
    select?: shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcutsInclude<ExtArgs> | null
    /**
     * Filter, which shortcuts to fetch.
     */
    where?: shortcutsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shortcuts to fetch.
     */
    orderBy?: shortcutsOrderByWithRelationInput | shortcutsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for shortcuts.
     */
    cursor?: shortcutsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shortcuts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shortcuts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of shortcuts.
     */
    distinct?: ShortcutsScalarFieldEnum | ShortcutsScalarFieldEnum[]
  }


  /**
   * shortcuts findMany
   */
  export type shortcutsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts
     */
    select?: shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcutsInclude<ExtArgs> | null
    /**
     * Filter, which shortcuts to fetch.
     */
    where?: shortcutsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shortcuts to fetch.
     */
    orderBy?: shortcutsOrderByWithRelationInput | shortcutsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing shortcuts.
     */
    cursor?: shortcutsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shortcuts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shortcuts.
     */
    skip?: number
    distinct?: ShortcutsScalarFieldEnum | ShortcutsScalarFieldEnum[]
  }


  /**
   * shortcuts create
   */
  export type shortcutsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts
     */
    select?: shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcutsInclude<ExtArgs> | null
    /**
     * The data needed to create a shortcuts.
     */
    data: XOR<shortcutsCreateInput, shortcutsUncheckedCreateInput>
  }


  /**
   * shortcuts createMany
   */
  export type shortcutsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many shortcuts.
     */
    data: shortcutsCreateManyInput | shortcutsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * shortcuts update
   */
  export type shortcutsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts
     */
    select?: shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcutsInclude<ExtArgs> | null
    /**
     * The data needed to update a shortcuts.
     */
    data: XOR<shortcutsUpdateInput, shortcutsUncheckedUpdateInput>
    /**
     * Choose, which shortcuts to update.
     */
    where: shortcutsWhereUniqueInput
  }


  /**
   * shortcuts updateMany
   */
  export type shortcutsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update shortcuts.
     */
    data: XOR<shortcutsUpdateManyMutationInput, shortcutsUncheckedUpdateManyInput>
    /**
     * Filter which shortcuts to update
     */
    where?: shortcutsWhereInput
  }


  /**
   * shortcuts upsert
   */
  export type shortcutsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts
     */
    select?: shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcutsInclude<ExtArgs> | null
    /**
     * The filter to search for the shortcuts to update in case it exists.
     */
    where: shortcutsWhereUniqueInput
    /**
     * In case the shortcuts found by the `where` argument doesn't exist, create a new shortcuts with this data.
     */
    create: XOR<shortcutsCreateInput, shortcutsUncheckedCreateInput>
    /**
     * In case the shortcuts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<shortcutsUpdateInput, shortcutsUncheckedUpdateInput>
  }


  /**
   * shortcuts delete
   */
  export type shortcutsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts
     */
    select?: shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcutsInclude<ExtArgs> | null
    /**
     * Filter which shortcuts to delete.
     */
    where: shortcutsWhereUniqueInput
  }


  /**
   * shortcuts deleteMany
   */
  export type shortcutsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which shortcuts to delete
     */
    where?: shortcutsWhereInput
  }


  /**
   * shortcuts.users_shortcuts
   */
  export type shortcuts$users_shortcutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_shortcuts
     */
    select?: users_shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: users_shortcutsInclude<ExtArgs> | null
    where?: users_shortcutsWhereInput
    orderBy?: users_shortcutsOrderByWithRelationInput | users_shortcutsOrderByWithRelationInput[]
    cursor?: users_shortcutsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Users_shortcutsScalarFieldEnum | Users_shortcutsScalarFieldEnum[]
  }


  /**
   * shortcuts.shortcuts_keys
   */
  export type shortcuts$shortcuts_keysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts_keys
     */
    select?: shortcuts_keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcuts_keysInclude<ExtArgs> | null
    where?: shortcuts_keysWhereInput
    orderBy?: shortcuts_keysOrderByWithRelationInput | shortcuts_keysOrderByWithRelationInput[]
    cursor?: shortcuts_keysWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Shortcuts_keysScalarFieldEnum | Shortcuts_keysScalarFieldEnum[]
  }


  /**
   * shortcuts without action
   */
  export type shortcutsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts
     */
    select?: shortcutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcutsInclude<ExtArgs> | null
  }



  /**
   * Model speed_line
   */

  export type AggregateSpeed_line = {
    _count: Speed_lineCountAggregateOutputType | null
    _avg: Speed_lineAvgAggregateOutputType | null
    _sum: Speed_lineSumAggregateOutputType | null
    _min: Speed_lineMinAggregateOutputType | null
    _max: Speed_lineMaxAggregateOutputType | null
  }

  export type Speed_lineAvgAggregateOutputType = {
    line_id: number | null
  }

  export type Speed_lineSumAggregateOutputType = {
    line_id: number | null
  }

  export type Speed_lineMinAggregateOutputType = {
    line_id: number | null
    line: string | null
  }

  export type Speed_lineMaxAggregateOutputType = {
    line_id: number | null
    line: string | null
  }

  export type Speed_lineCountAggregateOutputType = {
    line_id: number
    line: number
    _all: number
  }


  export type Speed_lineAvgAggregateInputType = {
    line_id?: true
  }

  export type Speed_lineSumAggregateInputType = {
    line_id?: true
  }

  export type Speed_lineMinAggregateInputType = {
    line_id?: true
    line?: true
  }

  export type Speed_lineMaxAggregateInputType = {
    line_id?: true
    line?: true
  }

  export type Speed_lineCountAggregateInputType = {
    line_id?: true
    line?: true
    _all?: true
  }

  export type Speed_lineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which speed_line to aggregate.
     */
    where?: speed_lineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of speed_lines to fetch.
     */
    orderBy?: speed_lineOrderByWithRelationInput | speed_lineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: speed_lineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` speed_lines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` speed_lines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned speed_lines
    **/
    _count?: true | Speed_lineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Speed_lineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Speed_lineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Speed_lineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Speed_lineMaxAggregateInputType
  }

  export type GetSpeed_lineAggregateType<T extends Speed_lineAggregateArgs> = {
        [P in keyof T & keyof AggregateSpeed_line]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpeed_line[P]>
      : GetScalarType<T[P], AggregateSpeed_line[P]>
  }




  export type speed_lineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: speed_lineWhereInput
    orderBy?: speed_lineOrderByWithAggregationInput | speed_lineOrderByWithAggregationInput[]
    by: Speed_lineScalarFieldEnum[] | Speed_lineScalarFieldEnum
    having?: speed_lineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Speed_lineCountAggregateInputType | true
    _avg?: Speed_lineAvgAggregateInputType
    _sum?: Speed_lineSumAggregateInputType
    _min?: Speed_lineMinAggregateInputType
    _max?: Speed_lineMaxAggregateInputType
  }

  export type Speed_lineGroupByOutputType = {
    line_id: number
    line: string
    _count: Speed_lineCountAggregateOutputType | null
    _avg: Speed_lineAvgAggregateOutputType | null
    _sum: Speed_lineSumAggregateOutputType | null
    _min: Speed_lineMinAggregateOutputType | null
    _max: Speed_lineMaxAggregateOutputType | null
  }

  type GetSpeed_lineGroupByPayload<T extends speed_lineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Speed_lineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Speed_lineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Speed_lineGroupByOutputType[P]>
            : GetScalarType<T[P], Speed_lineGroupByOutputType[P]>
        }
      >
    >


  export type speed_lineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    line_id?: boolean
    line?: boolean
  }, ExtArgs["result"]["speed_line"]>

  export type speed_lineSelectScalar = {
    line_id?: boolean
    line?: boolean
  }


  export type $speed_linePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "speed_line"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      line_id: number
      line: string
    }, ExtArgs["result"]["speed_line"]>
    composites: {}
  }


  type speed_lineGetPayload<S extends boolean | null | undefined | speed_lineDefaultArgs> = $Result.GetResult<Prisma.$speed_linePayload, S>

  type speed_lineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<speed_lineFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Speed_lineCountAggregateInputType | true
    }

  export interface speed_lineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['speed_line'], meta: { name: 'speed_line' } }
    /**
     * Find zero or one Speed_line that matches the filter.
     * @param {speed_lineFindUniqueArgs} args - Arguments to find a Speed_line
     * @example
     * // Get one Speed_line
     * const speed_line = await prisma.speed_line.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends speed_lineFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, speed_lineFindUniqueArgs<ExtArgs>>
    ): Prisma__speed_lineClient<$Result.GetResult<Prisma.$speed_linePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Speed_line that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {speed_lineFindUniqueOrThrowArgs} args - Arguments to find a Speed_line
     * @example
     * // Get one Speed_line
     * const speed_line = await prisma.speed_line.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends speed_lineFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, speed_lineFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__speed_lineClient<$Result.GetResult<Prisma.$speed_linePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Speed_line that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {speed_lineFindFirstArgs} args - Arguments to find a Speed_line
     * @example
     * // Get one Speed_line
     * const speed_line = await prisma.speed_line.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends speed_lineFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, speed_lineFindFirstArgs<ExtArgs>>
    ): Prisma__speed_lineClient<$Result.GetResult<Prisma.$speed_linePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Speed_line that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {speed_lineFindFirstOrThrowArgs} args - Arguments to find a Speed_line
     * @example
     * // Get one Speed_line
     * const speed_line = await prisma.speed_line.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends speed_lineFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, speed_lineFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__speed_lineClient<$Result.GetResult<Prisma.$speed_linePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Speed_lines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {speed_lineFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Speed_lines
     * const speed_lines = await prisma.speed_line.findMany()
     * 
     * // Get first 10 Speed_lines
     * const speed_lines = await prisma.speed_line.findMany({ take: 10 })
     * 
     * // Only select the `line_id`
     * const speed_lineWithLine_idOnly = await prisma.speed_line.findMany({ select: { line_id: true } })
     * 
    **/
    findMany<T extends speed_lineFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, speed_lineFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$speed_linePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Speed_line.
     * @param {speed_lineCreateArgs} args - Arguments to create a Speed_line.
     * @example
     * // Create one Speed_line
     * const Speed_line = await prisma.speed_line.create({
     *   data: {
     *     // ... data to create a Speed_line
     *   }
     * })
     * 
    **/
    create<T extends speed_lineCreateArgs<ExtArgs>>(
      args: SelectSubset<T, speed_lineCreateArgs<ExtArgs>>
    ): Prisma__speed_lineClient<$Result.GetResult<Prisma.$speed_linePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Speed_lines.
     *     @param {speed_lineCreateManyArgs} args - Arguments to create many Speed_lines.
     *     @example
     *     // Create many Speed_lines
     *     const speed_line = await prisma.speed_line.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends speed_lineCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, speed_lineCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Speed_line.
     * @param {speed_lineDeleteArgs} args - Arguments to delete one Speed_line.
     * @example
     * // Delete one Speed_line
     * const Speed_line = await prisma.speed_line.delete({
     *   where: {
     *     // ... filter to delete one Speed_line
     *   }
     * })
     * 
    **/
    delete<T extends speed_lineDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, speed_lineDeleteArgs<ExtArgs>>
    ): Prisma__speed_lineClient<$Result.GetResult<Prisma.$speed_linePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Speed_line.
     * @param {speed_lineUpdateArgs} args - Arguments to update one Speed_line.
     * @example
     * // Update one Speed_line
     * const speed_line = await prisma.speed_line.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends speed_lineUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, speed_lineUpdateArgs<ExtArgs>>
    ): Prisma__speed_lineClient<$Result.GetResult<Prisma.$speed_linePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Speed_lines.
     * @param {speed_lineDeleteManyArgs} args - Arguments to filter Speed_lines to delete.
     * @example
     * // Delete a few Speed_lines
     * const { count } = await prisma.speed_line.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends speed_lineDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, speed_lineDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Speed_lines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {speed_lineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Speed_lines
     * const speed_line = await prisma.speed_line.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends speed_lineUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, speed_lineUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Speed_line.
     * @param {speed_lineUpsertArgs} args - Arguments to update or create a Speed_line.
     * @example
     * // Update or create a Speed_line
     * const speed_line = await prisma.speed_line.upsert({
     *   create: {
     *     // ... data to create a Speed_line
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Speed_line we want to update
     *   }
     * })
    **/
    upsert<T extends speed_lineUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, speed_lineUpsertArgs<ExtArgs>>
    ): Prisma__speed_lineClient<$Result.GetResult<Prisma.$speed_linePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Speed_lines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {speed_lineCountArgs} args - Arguments to filter Speed_lines to count.
     * @example
     * // Count the number of Speed_lines
     * const count = await prisma.speed_line.count({
     *   where: {
     *     // ... the filter for the Speed_lines we want to count
     *   }
     * })
    **/
    count<T extends speed_lineCountArgs>(
      args?: Subset<T, speed_lineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Speed_lineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Speed_line.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Speed_lineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Speed_lineAggregateArgs>(args: Subset<T, Speed_lineAggregateArgs>): Prisma.PrismaPromise<GetSpeed_lineAggregateType<T>>

    /**
     * Group by Speed_line.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {speed_lineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends speed_lineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: speed_lineGroupByArgs['orderBy'] }
        : { orderBy?: speed_lineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, speed_lineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpeed_lineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the speed_line model
   */
  readonly fields: speed_lineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for speed_line.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__speed_lineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the speed_line model
   */ 
  interface speed_lineFieldRefs {
    readonly line_id: FieldRef<"speed_line", 'Int'>
    readonly line: FieldRef<"speed_line", 'String'>
  }
    

  // Custom InputTypes

  /**
   * speed_line findUnique
   */
  export type speed_lineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the speed_line
     */
    select?: speed_lineSelect<ExtArgs> | null
    /**
     * Filter, which speed_line to fetch.
     */
    where: speed_lineWhereUniqueInput
  }


  /**
   * speed_line findUniqueOrThrow
   */
  export type speed_lineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the speed_line
     */
    select?: speed_lineSelect<ExtArgs> | null
    /**
     * Filter, which speed_line to fetch.
     */
    where: speed_lineWhereUniqueInput
  }


  /**
   * speed_line findFirst
   */
  export type speed_lineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the speed_line
     */
    select?: speed_lineSelect<ExtArgs> | null
    /**
     * Filter, which speed_line to fetch.
     */
    where?: speed_lineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of speed_lines to fetch.
     */
    orderBy?: speed_lineOrderByWithRelationInput | speed_lineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for speed_lines.
     */
    cursor?: speed_lineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` speed_lines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` speed_lines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of speed_lines.
     */
    distinct?: Speed_lineScalarFieldEnum | Speed_lineScalarFieldEnum[]
  }


  /**
   * speed_line findFirstOrThrow
   */
  export type speed_lineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the speed_line
     */
    select?: speed_lineSelect<ExtArgs> | null
    /**
     * Filter, which speed_line to fetch.
     */
    where?: speed_lineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of speed_lines to fetch.
     */
    orderBy?: speed_lineOrderByWithRelationInput | speed_lineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for speed_lines.
     */
    cursor?: speed_lineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` speed_lines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` speed_lines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of speed_lines.
     */
    distinct?: Speed_lineScalarFieldEnum | Speed_lineScalarFieldEnum[]
  }


  /**
   * speed_line findMany
   */
  export type speed_lineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the speed_line
     */
    select?: speed_lineSelect<ExtArgs> | null
    /**
     * Filter, which speed_lines to fetch.
     */
    where?: speed_lineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of speed_lines to fetch.
     */
    orderBy?: speed_lineOrderByWithRelationInput | speed_lineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing speed_lines.
     */
    cursor?: speed_lineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` speed_lines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` speed_lines.
     */
    skip?: number
    distinct?: Speed_lineScalarFieldEnum | Speed_lineScalarFieldEnum[]
  }


  /**
   * speed_line create
   */
  export type speed_lineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the speed_line
     */
    select?: speed_lineSelect<ExtArgs> | null
    /**
     * The data needed to create a speed_line.
     */
    data: XOR<speed_lineCreateInput, speed_lineUncheckedCreateInput>
  }


  /**
   * speed_line createMany
   */
  export type speed_lineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many speed_lines.
     */
    data: speed_lineCreateManyInput | speed_lineCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * speed_line update
   */
  export type speed_lineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the speed_line
     */
    select?: speed_lineSelect<ExtArgs> | null
    /**
     * The data needed to update a speed_line.
     */
    data: XOR<speed_lineUpdateInput, speed_lineUncheckedUpdateInput>
    /**
     * Choose, which speed_line to update.
     */
    where: speed_lineWhereUniqueInput
  }


  /**
   * speed_line updateMany
   */
  export type speed_lineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update speed_lines.
     */
    data: XOR<speed_lineUpdateManyMutationInput, speed_lineUncheckedUpdateManyInput>
    /**
     * Filter which speed_lines to update
     */
    where?: speed_lineWhereInput
  }


  /**
   * speed_line upsert
   */
  export type speed_lineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the speed_line
     */
    select?: speed_lineSelect<ExtArgs> | null
    /**
     * The filter to search for the speed_line to update in case it exists.
     */
    where: speed_lineWhereUniqueInput
    /**
     * In case the speed_line found by the `where` argument doesn't exist, create a new speed_line with this data.
     */
    create: XOR<speed_lineCreateInput, speed_lineUncheckedCreateInput>
    /**
     * In case the speed_line was found with the provided `where` argument, update it with this data.
     */
    update: XOR<speed_lineUpdateInput, speed_lineUncheckedUpdateInput>
  }


  /**
   * speed_line delete
   */
  export type speed_lineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the speed_line
     */
    select?: speed_lineSelect<ExtArgs> | null
    /**
     * Filter which speed_line to delete.
     */
    where: speed_lineWhereUniqueInput
  }


  /**
   * speed_line deleteMany
   */
  export type speed_lineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which speed_lines to delete
     */
    where?: speed_lineWhereInput
  }


  /**
   * speed_line without action
   */
  export type speed_lineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the speed_line
     */
    select?: speed_lineSelect<ExtArgs> | null
  }



  /**
   * Model keys
   */

  export type AggregateKeys = {
    _count: KeysCountAggregateOutputType | null
    _avg: KeysAvgAggregateOutputType | null
    _sum: KeysSumAggregateOutputType | null
    _min: KeysMinAggregateOutputType | null
    _max: KeysMaxAggregateOutputType | null
  }

  export type KeysAvgAggregateOutputType = {
    key_id: number | null
  }

  export type KeysSumAggregateOutputType = {
    key_id: number | null
  }

  export type KeysMinAggregateOutputType = {
    key_id: number | null
    key_win: string | null
    key_mac: string | null
  }

  export type KeysMaxAggregateOutputType = {
    key_id: number | null
    key_win: string | null
    key_mac: string | null
  }

  export type KeysCountAggregateOutputType = {
    key_id: number
    key_win: number
    key_mac: number
    _all: number
  }


  export type KeysAvgAggregateInputType = {
    key_id?: true
  }

  export type KeysSumAggregateInputType = {
    key_id?: true
  }

  export type KeysMinAggregateInputType = {
    key_id?: true
    key_win?: true
    key_mac?: true
  }

  export type KeysMaxAggregateInputType = {
    key_id?: true
    key_win?: true
    key_mac?: true
  }

  export type KeysCountAggregateInputType = {
    key_id?: true
    key_win?: true
    key_mac?: true
    _all?: true
  }

  export type KeysAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which keys to aggregate.
     */
    where?: keysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of keys to fetch.
     */
    orderBy?: keysOrderByWithRelationInput | keysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: keysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` keys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` keys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned keys
    **/
    _count?: true | KeysCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KeysAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KeysSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeysMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeysMaxAggregateInputType
  }

  export type GetKeysAggregateType<T extends KeysAggregateArgs> = {
        [P in keyof T & keyof AggregateKeys]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKeys[P]>
      : GetScalarType<T[P], AggregateKeys[P]>
  }




  export type keysGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: keysWhereInput
    orderBy?: keysOrderByWithAggregationInput | keysOrderByWithAggregationInput[]
    by: KeysScalarFieldEnum[] | KeysScalarFieldEnum
    having?: keysScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeysCountAggregateInputType | true
    _avg?: KeysAvgAggregateInputType
    _sum?: KeysSumAggregateInputType
    _min?: KeysMinAggregateInputType
    _max?: KeysMaxAggregateInputType
  }

  export type KeysGroupByOutputType = {
    key_id: number
    key_win: string
    key_mac: string
    _count: KeysCountAggregateOutputType | null
    _avg: KeysAvgAggregateOutputType | null
    _sum: KeysSumAggregateOutputType | null
    _min: KeysMinAggregateOutputType | null
    _max: KeysMaxAggregateOutputType | null
  }

  type GetKeysGroupByPayload<T extends keysGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KeysGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeysGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeysGroupByOutputType[P]>
            : GetScalarType<T[P], KeysGroupByOutputType[P]>
        }
      >
    >


  export type keysSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    key_id?: boolean
    key_win?: boolean
    key_mac?: boolean
    shortcuts_keys?: boolean | keys$shortcuts_keysArgs<ExtArgs>
    _count?: boolean | KeysCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keys"]>

  export type keysSelectScalar = {
    key_id?: boolean
    key_win?: boolean
    key_mac?: boolean
  }

  export type keysInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shortcuts_keys?: boolean | keys$shortcuts_keysArgs<ExtArgs>
    _count?: boolean | KeysCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $keysPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "keys"
    objects: {
      shortcuts_keys: Prisma.$shortcuts_keysPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      key_id: number
      key_win: string
      key_mac: string
    }, ExtArgs["result"]["keys"]>
    composites: {}
  }


  type keysGetPayload<S extends boolean | null | undefined | keysDefaultArgs> = $Result.GetResult<Prisma.$keysPayload, S>

  type keysCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<keysFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KeysCountAggregateInputType | true
    }

  export interface keysDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['keys'], meta: { name: 'keys' } }
    /**
     * Find zero or one Keys that matches the filter.
     * @param {keysFindUniqueArgs} args - Arguments to find a Keys
     * @example
     * // Get one Keys
     * const keys = await prisma.keys.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends keysFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, keysFindUniqueArgs<ExtArgs>>
    ): Prisma__keysClient<$Result.GetResult<Prisma.$keysPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Keys that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {keysFindUniqueOrThrowArgs} args - Arguments to find a Keys
     * @example
     * // Get one Keys
     * const keys = await prisma.keys.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends keysFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, keysFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__keysClient<$Result.GetResult<Prisma.$keysPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Keys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {keysFindFirstArgs} args - Arguments to find a Keys
     * @example
     * // Get one Keys
     * const keys = await prisma.keys.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends keysFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, keysFindFirstArgs<ExtArgs>>
    ): Prisma__keysClient<$Result.GetResult<Prisma.$keysPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Keys that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {keysFindFirstOrThrowArgs} args - Arguments to find a Keys
     * @example
     * // Get one Keys
     * const keys = await prisma.keys.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends keysFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, keysFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__keysClient<$Result.GetResult<Prisma.$keysPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Keys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {keysFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Keys
     * const keys = await prisma.keys.findMany()
     * 
     * // Get first 10 Keys
     * const keys = await prisma.keys.findMany({ take: 10 })
     * 
     * // Only select the `key_id`
     * const keysWithKey_idOnly = await prisma.keys.findMany({ select: { key_id: true } })
     * 
    **/
    findMany<T extends keysFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, keysFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$keysPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Keys.
     * @param {keysCreateArgs} args - Arguments to create a Keys.
     * @example
     * // Create one Keys
     * const Keys = await prisma.keys.create({
     *   data: {
     *     // ... data to create a Keys
     *   }
     * })
     * 
    **/
    create<T extends keysCreateArgs<ExtArgs>>(
      args: SelectSubset<T, keysCreateArgs<ExtArgs>>
    ): Prisma__keysClient<$Result.GetResult<Prisma.$keysPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Keys.
     *     @param {keysCreateManyArgs} args - Arguments to create many Keys.
     *     @example
     *     // Create many Keys
     *     const keys = await prisma.keys.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends keysCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, keysCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Keys.
     * @param {keysDeleteArgs} args - Arguments to delete one Keys.
     * @example
     * // Delete one Keys
     * const Keys = await prisma.keys.delete({
     *   where: {
     *     // ... filter to delete one Keys
     *   }
     * })
     * 
    **/
    delete<T extends keysDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, keysDeleteArgs<ExtArgs>>
    ): Prisma__keysClient<$Result.GetResult<Prisma.$keysPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Keys.
     * @param {keysUpdateArgs} args - Arguments to update one Keys.
     * @example
     * // Update one Keys
     * const keys = await prisma.keys.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends keysUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, keysUpdateArgs<ExtArgs>>
    ): Prisma__keysClient<$Result.GetResult<Prisma.$keysPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Keys.
     * @param {keysDeleteManyArgs} args - Arguments to filter Keys to delete.
     * @example
     * // Delete a few Keys
     * const { count } = await prisma.keys.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends keysDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, keysDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Keys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {keysUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Keys
     * const keys = await prisma.keys.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends keysUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, keysUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Keys.
     * @param {keysUpsertArgs} args - Arguments to update or create a Keys.
     * @example
     * // Update or create a Keys
     * const keys = await prisma.keys.upsert({
     *   create: {
     *     // ... data to create a Keys
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Keys we want to update
     *   }
     * })
    **/
    upsert<T extends keysUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, keysUpsertArgs<ExtArgs>>
    ): Prisma__keysClient<$Result.GetResult<Prisma.$keysPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Keys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {keysCountArgs} args - Arguments to filter Keys to count.
     * @example
     * // Count the number of Keys
     * const count = await prisma.keys.count({
     *   where: {
     *     // ... the filter for the Keys we want to count
     *   }
     * })
    **/
    count<T extends keysCountArgs>(
      args?: Subset<T, keysCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeysCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Keys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeysAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeysAggregateArgs>(args: Subset<T, KeysAggregateArgs>): Prisma.PrismaPromise<GetKeysAggregateType<T>>

    /**
     * Group by Keys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {keysGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends keysGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: keysGroupByArgs['orderBy'] }
        : { orderBy?: keysGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, keysGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeysGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the keys model
   */
  readonly fields: keysFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for keys.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__keysClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    shortcuts_keys<T extends keys$shortcuts_keysArgs<ExtArgs> = {}>(args?: Subset<T, keys$shortcuts_keysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$shortcuts_keysPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the keys model
   */ 
  interface keysFieldRefs {
    readonly key_id: FieldRef<"keys", 'Int'>
    readonly key_win: FieldRef<"keys", 'String'>
    readonly key_mac: FieldRef<"keys", 'String'>
  }
    

  // Custom InputTypes

  /**
   * keys findUnique
   */
  export type keysFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the keys
     */
    select?: keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: keysInclude<ExtArgs> | null
    /**
     * Filter, which keys to fetch.
     */
    where: keysWhereUniqueInput
  }


  /**
   * keys findUniqueOrThrow
   */
  export type keysFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the keys
     */
    select?: keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: keysInclude<ExtArgs> | null
    /**
     * Filter, which keys to fetch.
     */
    where: keysWhereUniqueInput
  }


  /**
   * keys findFirst
   */
  export type keysFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the keys
     */
    select?: keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: keysInclude<ExtArgs> | null
    /**
     * Filter, which keys to fetch.
     */
    where?: keysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of keys to fetch.
     */
    orderBy?: keysOrderByWithRelationInput | keysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for keys.
     */
    cursor?: keysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` keys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` keys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of keys.
     */
    distinct?: KeysScalarFieldEnum | KeysScalarFieldEnum[]
  }


  /**
   * keys findFirstOrThrow
   */
  export type keysFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the keys
     */
    select?: keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: keysInclude<ExtArgs> | null
    /**
     * Filter, which keys to fetch.
     */
    where?: keysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of keys to fetch.
     */
    orderBy?: keysOrderByWithRelationInput | keysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for keys.
     */
    cursor?: keysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` keys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` keys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of keys.
     */
    distinct?: KeysScalarFieldEnum | KeysScalarFieldEnum[]
  }


  /**
   * keys findMany
   */
  export type keysFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the keys
     */
    select?: keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: keysInclude<ExtArgs> | null
    /**
     * Filter, which keys to fetch.
     */
    where?: keysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of keys to fetch.
     */
    orderBy?: keysOrderByWithRelationInput | keysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing keys.
     */
    cursor?: keysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` keys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` keys.
     */
    skip?: number
    distinct?: KeysScalarFieldEnum | KeysScalarFieldEnum[]
  }


  /**
   * keys create
   */
  export type keysCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the keys
     */
    select?: keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: keysInclude<ExtArgs> | null
    /**
     * The data needed to create a keys.
     */
    data: XOR<keysCreateInput, keysUncheckedCreateInput>
  }


  /**
   * keys createMany
   */
  export type keysCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many keys.
     */
    data: keysCreateManyInput | keysCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * keys update
   */
  export type keysUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the keys
     */
    select?: keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: keysInclude<ExtArgs> | null
    /**
     * The data needed to update a keys.
     */
    data: XOR<keysUpdateInput, keysUncheckedUpdateInput>
    /**
     * Choose, which keys to update.
     */
    where: keysWhereUniqueInput
  }


  /**
   * keys updateMany
   */
  export type keysUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update keys.
     */
    data: XOR<keysUpdateManyMutationInput, keysUncheckedUpdateManyInput>
    /**
     * Filter which keys to update
     */
    where?: keysWhereInput
  }


  /**
   * keys upsert
   */
  export type keysUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the keys
     */
    select?: keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: keysInclude<ExtArgs> | null
    /**
     * The filter to search for the keys to update in case it exists.
     */
    where: keysWhereUniqueInput
    /**
     * In case the keys found by the `where` argument doesn't exist, create a new keys with this data.
     */
    create: XOR<keysCreateInput, keysUncheckedCreateInput>
    /**
     * In case the keys was found with the provided `where` argument, update it with this data.
     */
    update: XOR<keysUpdateInput, keysUncheckedUpdateInput>
  }


  /**
   * keys delete
   */
  export type keysDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the keys
     */
    select?: keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: keysInclude<ExtArgs> | null
    /**
     * Filter which keys to delete.
     */
    where: keysWhereUniqueInput
  }


  /**
   * keys deleteMany
   */
  export type keysDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which keys to delete
     */
    where?: keysWhereInput
  }


  /**
   * keys.shortcuts_keys
   */
  export type keys$shortcuts_keysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts_keys
     */
    select?: shortcuts_keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcuts_keysInclude<ExtArgs> | null
    where?: shortcuts_keysWhereInput
    orderBy?: shortcuts_keysOrderByWithRelationInput | shortcuts_keysOrderByWithRelationInput[]
    cursor?: shortcuts_keysWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Shortcuts_keysScalarFieldEnum | Shortcuts_keysScalarFieldEnum[]
  }


  /**
   * keys without action
   */
  export type keysDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the keys
     */
    select?: keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: keysInclude<ExtArgs> | null
  }



  /**
   * Model shortcuts_keys
   */

  export type AggregateShortcuts_keys = {
    _count: Shortcuts_keysCountAggregateOutputType | null
    _avg: Shortcuts_keysAvgAggregateOutputType | null
    _sum: Shortcuts_keysSumAggregateOutputType | null
    _min: Shortcuts_keysMinAggregateOutputType | null
    _max: Shortcuts_keysMaxAggregateOutputType | null
  }

  export type Shortcuts_keysAvgAggregateOutputType = {
    shortcut_id: number | null
    key_id: number | null
  }

  export type Shortcuts_keysSumAggregateOutputType = {
    shortcut_id: number | null
    key_id: number | null
  }

  export type Shortcuts_keysMinAggregateOutputType = {
    shortcut_id: number | null
    key_id: number | null
  }

  export type Shortcuts_keysMaxAggregateOutputType = {
    shortcut_id: number | null
    key_id: number | null
  }

  export type Shortcuts_keysCountAggregateOutputType = {
    shortcut_id: number
    key_id: number
    _all: number
  }


  export type Shortcuts_keysAvgAggregateInputType = {
    shortcut_id?: true
    key_id?: true
  }

  export type Shortcuts_keysSumAggregateInputType = {
    shortcut_id?: true
    key_id?: true
  }

  export type Shortcuts_keysMinAggregateInputType = {
    shortcut_id?: true
    key_id?: true
  }

  export type Shortcuts_keysMaxAggregateInputType = {
    shortcut_id?: true
    key_id?: true
  }

  export type Shortcuts_keysCountAggregateInputType = {
    shortcut_id?: true
    key_id?: true
    _all?: true
  }

  export type Shortcuts_keysAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which shortcuts_keys to aggregate.
     */
    where?: shortcuts_keysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shortcuts_keys to fetch.
     */
    orderBy?: shortcuts_keysOrderByWithRelationInput | shortcuts_keysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: shortcuts_keysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shortcuts_keys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shortcuts_keys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned shortcuts_keys
    **/
    _count?: true | Shortcuts_keysCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Shortcuts_keysAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Shortcuts_keysSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Shortcuts_keysMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Shortcuts_keysMaxAggregateInputType
  }

  export type GetShortcuts_keysAggregateType<T extends Shortcuts_keysAggregateArgs> = {
        [P in keyof T & keyof AggregateShortcuts_keys]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShortcuts_keys[P]>
      : GetScalarType<T[P], AggregateShortcuts_keys[P]>
  }




  export type shortcuts_keysGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: shortcuts_keysWhereInput
    orderBy?: shortcuts_keysOrderByWithAggregationInput | shortcuts_keysOrderByWithAggregationInput[]
    by: Shortcuts_keysScalarFieldEnum[] | Shortcuts_keysScalarFieldEnum
    having?: shortcuts_keysScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Shortcuts_keysCountAggregateInputType | true
    _avg?: Shortcuts_keysAvgAggregateInputType
    _sum?: Shortcuts_keysSumAggregateInputType
    _min?: Shortcuts_keysMinAggregateInputType
    _max?: Shortcuts_keysMaxAggregateInputType
  }

  export type Shortcuts_keysGroupByOutputType = {
    shortcut_id: number
    key_id: number
    _count: Shortcuts_keysCountAggregateOutputType | null
    _avg: Shortcuts_keysAvgAggregateOutputType | null
    _sum: Shortcuts_keysSumAggregateOutputType | null
    _min: Shortcuts_keysMinAggregateOutputType | null
    _max: Shortcuts_keysMaxAggregateOutputType | null
  }

  type GetShortcuts_keysGroupByPayload<T extends shortcuts_keysGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Shortcuts_keysGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Shortcuts_keysGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Shortcuts_keysGroupByOutputType[P]>
            : GetScalarType<T[P], Shortcuts_keysGroupByOutputType[P]>
        }
      >
    >


  export type shortcuts_keysSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    shortcut_id?: boolean
    key_id?: boolean
    shortcuts?: boolean | shortcutsDefaultArgs<ExtArgs>
    keys?: boolean | keysDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shortcuts_keys"]>

  export type shortcuts_keysSelectScalar = {
    shortcut_id?: boolean
    key_id?: boolean
  }

  export type shortcuts_keysInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shortcuts?: boolean | shortcutsDefaultArgs<ExtArgs>
    keys?: boolean | keysDefaultArgs<ExtArgs>
  }


  export type $shortcuts_keysPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "shortcuts_keys"
    objects: {
      shortcuts: Prisma.$shortcutsPayload<ExtArgs>
      keys: Prisma.$keysPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      shortcut_id: number
      key_id: number
    }, ExtArgs["result"]["shortcuts_keys"]>
    composites: {}
  }


  type shortcuts_keysGetPayload<S extends boolean | null | undefined | shortcuts_keysDefaultArgs> = $Result.GetResult<Prisma.$shortcuts_keysPayload, S>

  type shortcuts_keysCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<shortcuts_keysFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Shortcuts_keysCountAggregateInputType | true
    }

  export interface shortcuts_keysDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['shortcuts_keys'], meta: { name: 'shortcuts_keys' } }
    /**
     * Find zero or one Shortcuts_keys that matches the filter.
     * @param {shortcuts_keysFindUniqueArgs} args - Arguments to find a Shortcuts_keys
     * @example
     * // Get one Shortcuts_keys
     * const shortcuts_keys = await prisma.shortcuts_keys.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends shortcuts_keysFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, shortcuts_keysFindUniqueArgs<ExtArgs>>
    ): Prisma__shortcuts_keysClient<$Result.GetResult<Prisma.$shortcuts_keysPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Shortcuts_keys that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {shortcuts_keysFindUniqueOrThrowArgs} args - Arguments to find a Shortcuts_keys
     * @example
     * // Get one Shortcuts_keys
     * const shortcuts_keys = await prisma.shortcuts_keys.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends shortcuts_keysFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, shortcuts_keysFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__shortcuts_keysClient<$Result.GetResult<Prisma.$shortcuts_keysPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Shortcuts_keys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shortcuts_keysFindFirstArgs} args - Arguments to find a Shortcuts_keys
     * @example
     * // Get one Shortcuts_keys
     * const shortcuts_keys = await prisma.shortcuts_keys.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends shortcuts_keysFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, shortcuts_keysFindFirstArgs<ExtArgs>>
    ): Prisma__shortcuts_keysClient<$Result.GetResult<Prisma.$shortcuts_keysPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Shortcuts_keys that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shortcuts_keysFindFirstOrThrowArgs} args - Arguments to find a Shortcuts_keys
     * @example
     * // Get one Shortcuts_keys
     * const shortcuts_keys = await prisma.shortcuts_keys.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends shortcuts_keysFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, shortcuts_keysFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__shortcuts_keysClient<$Result.GetResult<Prisma.$shortcuts_keysPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Shortcuts_keys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shortcuts_keysFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shortcuts_keys
     * const shortcuts_keys = await prisma.shortcuts_keys.findMany()
     * 
     * // Get first 10 Shortcuts_keys
     * const shortcuts_keys = await prisma.shortcuts_keys.findMany({ take: 10 })
     * 
     * // Only select the `shortcut_id`
     * const shortcuts_keysWithShortcut_idOnly = await prisma.shortcuts_keys.findMany({ select: { shortcut_id: true } })
     * 
    **/
    findMany<T extends shortcuts_keysFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, shortcuts_keysFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$shortcuts_keysPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Shortcuts_keys.
     * @param {shortcuts_keysCreateArgs} args - Arguments to create a Shortcuts_keys.
     * @example
     * // Create one Shortcuts_keys
     * const Shortcuts_keys = await prisma.shortcuts_keys.create({
     *   data: {
     *     // ... data to create a Shortcuts_keys
     *   }
     * })
     * 
    **/
    create<T extends shortcuts_keysCreateArgs<ExtArgs>>(
      args: SelectSubset<T, shortcuts_keysCreateArgs<ExtArgs>>
    ): Prisma__shortcuts_keysClient<$Result.GetResult<Prisma.$shortcuts_keysPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Shortcuts_keys.
     *     @param {shortcuts_keysCreateManyArgs} args - Arguments to create many Shortcuts_keys.
     *     @example
     *     // Create many Shortcuts_keys
     *     const shortcuts_keys = await prisma.shortcuts_keys.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends shortcuts_keysCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, shortcuts_keysCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Shortcuts_keys.
     * @param {shortcuts_keysDeleteArgs} args - Arguments to delete one Shortcuts_keys.
     * @example
     * // Delete one Shortcuts_keys
     * const Shortcuts_keys = await prisma.shortcuts_keys.delete({
     *   where: {
     *     // ... filter to delete one Shortcuts_keys
     *   }
     * })
     * 
    **/
    delete<T extends shortcuts_keysDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, shortcuts_keysDeleteArgs<ExtArgs>>
    ): Prisma__shortcuts_keysClient<$Result.GetResult<Prisma.$shortcuts_keysPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Shortcuts_keys.
     * @param {shortcuts_keysUpdateArgs} args - Arguments to update one Shortcuts_keys.
     * @example
     * // Update one Shortcuts_keys
     * const shortcuts_keys = await prisma.shortcuts_keys.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends shortcuts_keysUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, shortcuts_keysUpdateArgs<ExtArgs>>
    ): Prisma__shortcuts_keysClient<$Result.GetResult<Prisma.$shortcuts_keysPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Shortcuts_keys.
     * @param {shortcuts_keysDeleteManyArgs} args - Arguments to filter Shortcuts_keys to delete.
     * @example
     * // Delete a few Shortcuts_keys
     * const { count } = await prisma.shortcuts_keys.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends shortcuts_keysDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, shortcuts_keysDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shortcuts_keys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shortcuts_keysUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shortcuts_keys
     * const shortcuts_keys = await prisma.shortcuts_keys.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends shortcuts_keysUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, shortcuts_keysUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Shortcuts_keys.
     * @param {shortcuts_keysUpsertArgs} args - Arguments to update or create a Shortcuts_keys.
     * @example
     * // Update or create a Shortcuts_keys
     * const shortcuts_keys = await prisma.shortcuts_keys.upsert({
     *   create: {
     *     // ... data to create a Shortcuts_keys
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shortcuts_keys we want to update
     *   }
     * })
    **/
    upsert<T extends shortcuts_keysUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, shortcuts_keysUpsertArgs<ExtArgs>>
    ): Prisma__shortcuts_keysClient<$Result.GetResult<Prisma.$shortcuts_keysPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Shortcuts_keys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shortcuts_keysCountArgs} args - Arguments to filter Shortcuts_keys to count.
     * @example
     * // Count the number of Shortcuts_keys
     * const count = await prisma.shortcuts_keys.count({
     *   where: {
     *     // ... the filter for the Shortcuts_keys we want to count
     *   }
     * })
    **/
    count<T extends shortcuts_keysCountArgs>(
      args?: Subset<T, shortcuts_keysCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Shortcuts_keysCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shortcuts_keys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shortcuts_keysAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Shortcuts_keysAggregateArgs>(args: Subset<T, Shortcuts_keysAggregateArgs>): Prisma.PrismaPromise<GetShortcuts_keysAggregateType<T>>

    /**
     * Group by Shortcuts_keys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shortcuts_keysGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends shortcuts_keysGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: shortcuts_keysGroupByArgs['orderBy'] }
        : { orderBy?: shortcuts_keysGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, shortcuts_keysGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShortcuts_keysGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the shortcuts_keys model
   */
  readonly fields: shortcuts_keysFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for shortcuts_keys.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__shortcuts_keysClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    shortcuts<T extends shortcutsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, shortcutsDefaultArgs<ExtArgs>>): Prisma__shortcutsClient<$Result.GetResult<Prisma.$shortcutsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    keys<T extends keysDefaultArgs<ExtArgs> = {}>(args?: Subset<T, keysDefaultArgs<ExtArgs>>): Prisma__keysClient<$Result.GetResult<Prisma.$keysPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the shortcuts_keys model
   */ 
  interface shortcuts_keysFieldRefs {
    readonly shortcut_id: FieldRef<"shortcuts_keys", 'Int'>
    readonly key_id: FieldRef<"shortcuts_keys", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * shortcuts_keys findUnique
   */
  export type shortcuts_keysFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts_keys
     */
    select?: shortcuts_keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcuts_keysInclude<ExtArgs> | null
    /**
     * Filter, which shortcuts_keys to fetch.
     */
    where: shortcuts_keysWhereUniqueInput
  }


  /**
   * shortcuts_keys findUniqueOrThrow
   */
  export type shortcuts_keysFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts_keys
     */
    select?: shortcuts_keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcuts_keysInclude<ExtArgs> | null
    /**
     * Filter, which shortcuts_keys to fetch.
     */
    where: shortcuts_keysWhereUniqueInput
  }


  /**
   * shortcuts_keys findFirst
   */
  export type shortcuts_keysFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts_keys
     */
    select?: shortcuts_keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcuts_keysInclude<ExtArgs> | null
    /**
     * Filter, which shortcuts_keys to fetch.
     */
    where?: shortcuts_keysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shortcuts_keys to fetch.
     */
    orderBy?: shortcuts_keysOrderByWithRelationInput | shortcuts_keysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for shortcuts_keys.
     */
    cursor?: shortcuts_keysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shortcuts_keys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shortcuts_keys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of shortcuts_keys.
     */
    distinct?: Shortcuts_keysScalarFieldEnum | Shortcuts_keysScalarFieldEnum[]
  }


  /**
   * shortcuts_keys findFirstOrThrow
   */
  export type shortcuts_keysFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts_keys
     */
    select?: shortcuts_keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcuts_keysInclude<ExtArgs> | null
    /**
     * Filter, which shortcuts_keys to fetch.
     */
    where?: shortcuts_keysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shortcuts_keys to fetch.
     */
    orderBy?: shortcuts_keysOrderByWithRelationInput | shortcuts_keysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for shortcuts_keys.
     */
    cursor?: shortcuts_keysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shortcuts_keys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shortcuts_keys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of shortcuts_keys.
     */
    distinct?: Shortcuts_keysScalarFieldEnum | Shortcuts_keysScalarFieldEnum[]
  }


  /**
   * shortcuts_keys findMany
   */
  export type shortcuts_keysFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts_keys
     */
    select?: shortcuts_keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcuts_keysInclude<ExtArgs> | null
    /**
     * Filter, which shortcuts_keys to fetch.
     */
    where?: shortcuts_keysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shortcuts_keys to fetch.
     */
    orderBy?: shortcuts_keysOrderByWithRelationInput | shortcuts_keysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing shortcuts_keys.
     */
    cursor?: shortcuts_keysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shortcuts_keys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shortcuts_keys.
     */
    skip?: number
    distinct?: Shortcuts_keysScalarFieldEnum | Shortcuts_keysScalarFieldEnum[]
  }


  /**
   * shortcuts_keys create
   */
  export type shortcuts_keysCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts_keys
     */
    select?: shortcuts_keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcuts_keysInclude<ExtArgs> | null
    /**
     * The data needed to create a shortcuts_keys.
     */
    data: XOR<shortcuts_keysCreateInput, shortcuts_keysUncheckedCreateInput>
  }


  /**
   * shortcuts_keys createMany
   */
  export type shortcuts_keysCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many shortcuts_keys.
     */
    data: shortcuts_keysCreateManyInput | shortcuts_keysCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * shortcuts_keys update
   */
  export type shortcuts_keysUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts_keys
     */
    select?: shortcuts_keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcuts_keysInclude<ExtArgs> | null
    /**
     * The data needed to update a shortcuts_keys.
     */
    data: XOR<shortcuts_keysUpdateInput, shortcuts_keysUncheckedUpdateInput>
    /**
     * Choose, which shortcuts_keys to update.
     */
    where: shortcuts_keysWhereUniqueInput
  }


  /**
   * shortcuts_keys updateMany
   */
  export type shortcuts_keysUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update shortcuts_keys.
     */
    data: XOR<shortcuts_keysUpdateManyMutationInput, shortcuts_keysUncheckedUpdateManyInput>
    /**
     * Filter which shortcuts_keys to update
     */
    where?: shortcuts_keysWhereInput
  }


  /**
   * shortcuts_keys upsert
   */
  export type shortcuts_keysUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts_keys
     */
    select?: shortcuts_keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcuts_keysInclude<ExtArgs> | null
    /**
     * The filter to search for the shortcuts_keys to update in case it exists.
     */
    where: shortcuts_keysWhereUniqueInput
    /**
     * In case the shortcuts_keys found by the `where` argument doesn't exist, create a new shortcuts_keys with this data.
     */
    create: XOR<shortcuts_keysCreateInput, shortcuts_keysUncheckedCreateInput>
    /**
     * In case the shortcuts_keys was found with the provided `where` argument, update it with this data.
     */
    update: XOR<shortcuts_keysUpdateInput, shortcuts_keysUncheckedUpdateInput>
  }


  /**
   * shortcuts_keys delete
   */
  export type shortcuts_keysDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts_keys
     */
    select?: shortcuts_keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcuts_keysInclude<ExtArgs> | null
    /**
     * Filter which shortcuts_keys to delete.
     */
    where: shortcuts_keysWhereUniqueInput
  }


  /**
   * shortcuts_keys deleteMany
   */
  export type shortcuts_keysDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which shortcuts_keys to delete
     */
    where?: shortcuts_keysWhereInput
  }


  /**
   * shortcuts_keys without action
   */
  export type shortcuts_keysDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shortcuts_keys
     */
    select?: shortcuts_keysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shortcuts_keysInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    user_id: 'user_id',
    username: 'username',
    email: 'email',
    password: 'password',
    job: 'job',
    os: 'os',
    role: 'role'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const ApplicationsScalarFieldEnum: {
    app_id: 'app_id',
    app_name: 'app_name',
    app_description: 'app_description',
    app_logo: 'app_logo',
    app_images: 'app_images',
    categorie_id: 'categorie_id'
  };

  export type ApplicationsScalarFieldEnum = (typeof ApplicationsScalarFieldEnum)[keyof typeof ApplicationsScalarFieldEnum]


  export const App_categoriesScalarFieldEnum: {
    categorie_id: 'categorie_id',
    categorie_name: 'categorie_name'
  };

  export type App_categoriesScalarFieldEnum = (typeof App_categoriesScalarFieldEnum)[keyof typeof App_categoriesScalarFieldEnum]


  export const Users_shortcutsScalarFieldEnum: {
    user_id: 'user_id',
    shortcut_id: 'shortcut_id'
  };

  export type Users_shortcutsScalarFieldEnum = (typeof Users_shortcutsScalarFieldEnum)[keyof typeof Users_shortcutsScalarFieldEnum]


  export const ChaptersScalarFieldEnum: {
    chapter_id: 'chapter_id',
    chapter_name: 'chapter_name'
  };

  export type ChaptersScalarFieldEnum = (typeof ChaptersScalarFieldEnum)[keyof typeof ChaptersScalarFieldEnum]


  export const ShortcutsScalarFieldEnum: {
    shortcut_id: 'shortcut_id',
    chapter_id: 'chapter_id',
    app_id: 'app_id',
    shortcut_name: 'shortcut_name',
    shortcut_desc: 'shortcut_desc'
  };

  export type ShortcutsScalarFieldEnum = (typeof ShortcutsScalarFieldEnum)[keyof typeof ShortcutsScalarFieldEnum]


  export const Speed_lineScalarFieldEnum: {
    line_id: 'line_id',
    line: 'line'
  };

  export type Speed_lineScalarFieldEnum = (typeof Speed_lineScalarFieldEnum)[keyof typeof Speed_lineScalarFieldEnum]


  export const KeysScalarFieldEnum: {
    key_id: 'key_id',
    key_win: 'key_win',
    key_mac: 'key_mac'
  };

  export type KeysScalarFieldEnum = (typeof KeysScalarFieldEnum)[keyof typeof KeysScalarFieldEnum]


  export const Shortcuts_keysScalarFieldEnum: {
    shortcut_id: 'shortcut_id',
    key_id: 'key_id'
  };

  export type Shortcuts_keysScalarFieldEnum = (typeof Shortcuts_keysScalarFieldEnum)[keyof typeof Shortcuts_keysScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    user_id?: IntFilter<"users"> | number
    username?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    job?: StringFilter<"users"> | string
    os?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
    users_shortcuts?: Users_shortcutsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    job?: SortOrder
    os?: SortOrder
    role?: SortOrder
    users_shortcuts?: users_shortcutsOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    username?: string
    email?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    password?: StringFilter<"users"> | string
    job?: StringFilter<"users"> | string
    os?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
    users_shortcuts?: Users_shortcutsListRelationFilter
  }, "user_id" | "username" | "email">

  export type usersOrderByWithAggregationInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    job?: SortOrder
    os?: SortOrder
    role?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"users"> | number
    username?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    job?: StringWithAggregatesFilter<"users"> | string
    os?: StringWithAggregatesFilter<"users"> | string
    role?: StringWithAggregatesFilter<"users"> | string
  }

  export type applicationsWhereInput = {
    AND?: applicationsWhereInput | applicationsWhereInput[]
    OR?: applicationsWhereInput[]
    NOT?: applicationsWhereInput | applicationsWhereInput[]
    app_id?: IntFilter<"applications"> | number
    app_name?: StringFilter<"applications"> | string
    app_description?: StringFilter<"applications"> | string
    app_logo?: IntNullableFilter<"applications"> | number | null
    app_images?: StringNullableListFilter<"applications">
    categorie_id?: IntFilter<"applications"> | number
    app_categories?: XOR<App_categoriesRelationFilter, app_categoriesWhereInput>
    shortcuts?: ShortcutsListRelationFilter
  }

  export type applicationsOrderByWithRelationInput = {
    app_id?: SortOrder
    app_name?: SortOrder
    app_description?: SortOrder
    app_logo?: SortOrderInput | SortOrder
    app_images?: SortOrder
    categorie_id?: SortOrder
    app_categories?: app_categoriesOrderByWithRelationInput
    shortcuts?: shortcutsOrderByRelationAggregateInput
  }

  export type applicationsWhereUniqueInput = Prisma.AtLeast<{
    app_id?: number
    app_name?: string
    AND?: applicationsWhereInput | applicationsWhereInput[]
    OR?: applicationsWhereInput[]
    NOT?: applicationsWhereInput | applicationsWhereInput[]
    app_description?: StringFilter<"applications"> | string
    app_logo?: IntNullableFilter<"applications"> | number | null
    app_images?: StringNullableListFilter<"applications">
    categorie_id?: IntFilter<"applications"> | number
    app_categories?: XOR<App_categoriesRelationFilter, app_categoriesWhereInput>
    shortcuts?: ShortcutsListRelationFilter
  }, "app_id" | "app_name">

  export type applicationsOrderByWithAggregationInput = {
    app_id?: SortOrder
    app_name?: SortOrder
    app_description?: SortOrder
    app_logo?: SortOrderInput | SortOrder
    app_images?: SortOrder
    categorie_id?: SortOrder
    _count?: applicationsCountOrderByAggregateInput
    _avg?: applicationsAvgOrderByAggregateInput
    _max?: applicationsMaxOrderByAggregateInput
    _min?: applicationsMinOrderByAggregateInput
    _sum?: applicationsSumOrderByAggregateInput
  }

  export type applicationsScalarWhereWithAggregatesInput = {
    AND?: applicationsScalarWhereWithAggregatesInput | applicationsScalarWhereWithAggregatesInput[]
    OR?: applicationsScalarWhereWithAggregatesInput[]
    NOT?: applicationsScalarWhereWithAggregatesInput | applicationsScalarWhereWithAggregatesInput[]
    app_id?: IntWithAggregatesFilter<"applications"> | number
    app_name?: StringWithAggregatesFilter<"applications"> | string
    app_description?: StringWithAggregatesFilter<"applications"> | string
    app_logo?: IntNullableWithAggregatesFilter<"applications"> | number | null
    app_images?: StringNullableListFilter<"applications">
    categorie_id?: IntWithAggregatesFilter<"applications"> | number
  }

  export type app_categoriesWhereInput = {
    AND?: app_categoriesWhereInput | app_categoriesWhereInput[]
    OR?: app_categoriesWhereInput[]
    NOT?: app_categoriesWhereInput | app_categoriesWhereInput[]
    categorie_id?: IntFilter<"app_categories"> | number
    categorie_name?: StringFilter<"app_categories"> | string
    applications?: ApplicationsListRelationFilter
  }

  export type app_categoriesOrderByWithRelationInput = {
    categorie_id?: SortOrder
    categorie_name?: SortOrder
    applications?: applicationsOrderByRelationAggregateInput
  }

  export type app_categoriesWhereUniqueInput = Prisma.AtLeast<{
    categorie_id?: number
    categorie_name?: string
    AND?: app_categoriesWhereInput | app_categoriesWhereInput[]
    OR?: app_categoriesWhereInput[]
    NOT?: app_categoriesWhereInput | app_categoriesWhereInput[]
    applications?: ApplicationsListRelationFilter
  }, "categorie_id" | "categorie_name">

  export type app_categoriesOrderByWithAggregationInput = {
    categorie_id?: SortOrder
    categorie_name?: SortOrder
    _count?: app_categoriesCountOrderByAggregateInput
    _avg?: app_categoriesAvgOrderByAggregateInput
    _max?: app_categoriesMaxOrderByAggregateInput
    _min?: app_categoriesMinOrderByAggregateInput
    _sum?: app_categoriesSumOrderByAggregateInput
  }

  export type app_categoriesScalarWhereWithAggregatesInput = {
    AND?: app_categoriesScalarWhereWithAggregatesInput | app_categoriesScalarWhereWithAggregatesInput[]
    OR?: app_categoriesScalarWhereWithAggregatesInput[]
    NOT?: app_categoriesScalarWhereWithAggregatesInput | app_categoriesScalarWhereWithAggregatesInput[]
    categorie_id?: IntWithAggregatesFilter<"app_categories"> | number
    categorie_name?: StringWithAggregatesFilter<"app_categories"> | string
  }

  export type users_shortcutsWhereInput = {
    AND?: users_shortcutsWhereInput | users_shortcutsWhereInput[]
    OR?: users_shortcutsWhereInput[]
    NOT?: users_shortcutsWhereInput | users_shortcutsWhereInput[]
    user_id?: IntFilter<"users_shortcuts"> | number
    shortcut_id?: IntFilter<"users_shortcuts"> | number
    users?: XOR<UsersRelationFilter, usersWhereInput>
    shortcuts?: XOR<ShortcutsRelationFilter, shortcutsWhereInput>
  }

  export type users_shortcutsOrderByWithRelationInput = {
    user_id?: SortOrder
    shortcut_id?: SortOrder
    users?: usersOrderByWithRelationInput
    shortcuts?: shortcutsOrderByWithRelationInput
  }

  export type users_shortcutsWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    AND?: users_shortcutsWhereInput | users_shortcutsWhereInput[]
    OR?: users_shortcutsWhereInput[]
    NOT?: users_shortcutsWhereInput | users_shortcutsWhereInput[]
    shortcut_id?: IntFilter<"users_shortcuts"> | number
    users?: XOR<UsersRelationFilter, usersWhereInput>
    shortcuts?: XOR<ShortcutsRelationFilter, shortcutsWhereInput>
  }, "user_id">

  export type users_shortcutsOrderByWithAggregationInput = {
    user_id?: SortOrder
    shortcut_id?: SortOrder
    _count?: users_shortcutsCountOrderByAggregateInput
    _avg?: users_shortcutsAvgOrderByAggregateInput
    _max?: users_shortcutsMaxOrderByAggregateInput
    _min?: users_shortcutsMinOrderByAggregateInput
    _sum?: users_shortcutsSumOrderByAggregateInput
  }

  export type users_shortcutsScalarWhereWithAggregatesInput = {
    AND?: users_shortcutsScalarWhereWithAggregatesInput | users_shortcutsScalarWhereWithAggregatesInput[]
    OR?: users_shortcutsScalarWhereWithAggregatesInput[]
    NOT?: users_shortcutsScalarWhereWithAggregatesInput | users_shortcutsScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"users_shortcuts"> | number
    shortcut_id?: IntWithAggregatesFilter<"users_shortcuts"> | number
  }

  export type chaptersWhereInput = {
    AND?: chaptersWhereInput | chaptersWhereInput[]
    OR?: chaptersWhereInput[]
    NOT?: chaptersWhereInput | chaptersWhereInput[]
    chapter_id?: IntFilter<"chapters"> | number
    chapter_name?: StringFilter<"chapters"> | string
    shortcuts?: ShortcutsListRelationFilter
  }

  export type chaptersOrderByWithRelationInput = {
    chapter_id?: SortOrder
    chapter_name?: SortOrder
    shortcuts?: shortcutsOrderByRelationAggregateInput
  }

  export type chaptersWhereUniqueInput = Prisma.AtLeast<{
    chapter_id?: number
    AND?: chaptersWhereInput | chaptersWhereInput[]
    OR?: chaptersWhereInput[]
    NOT?: chaptersWhereInput | chaptersWhereInput[]
    chapter_name?: StringFilter<"chapters"> | string
    shortcuts?: ShortcutsListRelationFilter
  }, "chapter_id">

  export type chaptersOrderByWithAggregationInput = {
    chapter_id?: SortOrder
    chapter_name?: SortOrder
    _count?: chaptersCountOrderByAggregateInput
    _avg?: chaptersAvgOrderByAggregateInput
    _max?: chaptersMaxOrderByAggregateInput
    _min?: chaptersMinOrderByAggregateInput
    _sum?: chaptersSumOrderByAggregateInput
  }

  export type chaptersScalarWhereWithAggregatesInput = {
    AND?: chaptersScalarWhereWithAggregatesInput | chaptersScalarWhereWithAggregatesInput[]
    OR?: chaptersScalarWhereWithAggregatesInput[]
    NOT?: chaptersScalarWhereWithAggregatesInput | chaptersScalarWhereWithAggregatesInput[]
    chapter_id?: IntWithAggregatesFilter<"chapters"> | number
    chapter_name?: StringWithAggregatesFilter<"chapters"> | string
  }

  export type shortcutsWhereInput = {
    AND?: shortcutsWhereInput | shortcutsWhereInput[]
    OR?: shortcutsWhereInput[]
    NOT?: shortcutsWhereInput | shortcutsWhereInput[]
    shortcut_id?: IntFilter<"shortcuts"> | number
    chapter_id?: IntFilter<"shortcuts"> | number
    app_id?: IntFilter<"shortcuts"> | number
    shortcut_name?: StringFilter<"shortcuts"> | string
    shortcut_desc?: StringFilter<"shortcuts"> | string
    chapters?: XOR<ChaptersRelationFilter, chaptersWhereInput>
    applications?: XOR<ApplicationsRelationFilter, applicationsWhereInput>
    users_shortcuts?: Users_shortcutsListRelationFilter
    shortcuts_keys?: Shortcuts_keysListRelationFilter
  }

  export type shortcutsOrderByWithRelationInput = {
    shortcut_id?: SortOrder
    chapter_id?: SortOrder
    app_id?: SortOrder
    shortcut_name?: SortOrder
    shortcut_desc?: SortOrder
    chapters?: chaptersOrderByWithRelationInput
    applications?: applicationsOrderByWithRelationInput
    users_shortcuts?: users_shortcutsOrderByRelationAggregateInput
    shortcuts_keys?: shortcuts_keysOrderByRelationAggregateInput
  }

  export type shortcutsWhereUniqueInput = Prisma.AtLeast<{
    shortcut_id?: number
    AND?: shortcutsWhereInput | shortcutsWhereInput[]
    OR?: shortcutsWhereInput[]
    NOT?: shortcutsWhereInput | shortcutsWhereInput[]
    chapter_id?: IntFilter<"shortcuts"> | number
    app_id?: IntFilter<"shortcuts"> | number
    shortcut_name?: StringFilter<"shortcuts"> | string
    shortcut_desc?: StringFilter<"shortcuts"> | string
    chapters?: XOR<ChaptersRelationFilter, chaptersWhereInput>
    applications?: XOR<ApplicationsRelationFilter, applicationsWhereInput>
    users_shortcuts?: Users_shortcutsListRelationFilter
    shortcuts_keys?: Shortcuts_keysListRelationFilter
  }, "shortcut_id">

  export type shortcutsOrderByWithAggregationInput = {
    shortcut_id?: SortOrder
    chapter_id?: SortOrder
    app_id?: SortOrder
    shortcut_name?: SortOrder
    shortcut_desc?: SortOrder
    _count?: shortcutsCountOrderByAggregateInput
    _avg?: shortcutsAvgOrderByAggregateInput
    _max?: shortcutsMaxOrderByAggregateInput
    _min?: shortcutsMinOrderByAggregateInput
    _sum?: shortcutsSumOrderByAggregateInput
  }

  export type shortcutsScalarWhereWithAggregatesInput = {
    AND?: shortcutsScalarWhereWithAggregatesInput | shortcutsScalarWhereWithAggregatesInput[]
    OR?: shortcutsScalarWhereWithAggregatesInput[]
    NOT?: shortcutsScalarWhereWithAggregatesInput | shortcutsScalarWhereWithAggregatesInput[]
    shortcut_id?: IntWithAggregatesFilter<"shortcuts"> | number
    chapter_id?: IntWithAggregatesFilter<"shortcuts"> | number
    app_id?: IntWithAggregatesFilter<"shortcuts"> | number
    shortcut_name?: StringWithAggregatesFilter<"shortcuts"> | string
    shortcut_desc?: StringWithAggregatesFilter<"shortcuts"> | string
  }

  export type speed_lineWhereInput = {
    AND?: speed_lineWhereInput | speed_lineWhereInput[]
    OR?: speed_lineWhereInput[]
    NOT?: speed_lineWhereInput | speed_lineWhereInput[]
    line_id?: IntFilter<"speed_line"> | number
    line?: StringFilter<"speed_line"> | string
  }

  export type speed_lineOrderByWithRelationInput = {
    line_id?: SortOrder
    line?: SortOrder
  }

  export type speed_lineWhereUniqueInput = Prisma.AtLeast<{
    line_id?: number
    line?: string
    AND?: speed_lineWhereInput | speed_lineWhereInput[]
    OR?: speed_lineWhereInput[]
    NOT?: speed_lineWhereInput | speed_lineWhereInput[]
  }, "line_id" | "line">

  export type speed_lineOrderByWithAggregationInput = {
    line_id?: SortOrder
    line?: SortOrder
    _count?: speed_lineCountOrderByAggregateInput
    _avg?: speed_lineAvgOrderByAggregateInput
    _max?: speed_lineMaxOrderByAggregateInput
    _min?: speed_lineMinOrderByAggregateInput
    _sum?: speed_lineSumOrderByAggregateInput
  }

  export type speed_lineScalarWhereWithAggregatesInput = {
    AND?: speed_lineScalarWhereWithAggregatesInput | speed_lineScalarWhereWithAggregatesInput[]
    OR?: speed_lineScalarWhereWithAggregatesInput[]
    NOT?: speed_lineScalarWhereWithAggregatesInput | speed_lineScalarWhereWithAggregatesInput[]
    line_id?: IntWithAggregatesFilter<"speed_line"> | number
    line?: StringWithAggregatesFilter<"speed_line"> | string
  }

  export type keysWhereInput = {
    AND?: keysWhereInput | keysWhereInput[]
    OR?: keysWhereInput[]
    NOT?: keysWhereInput | keysWhereInput[]
    key_id?: IntFilter<"keys"> | number
    key_win?: StringFilter<"keys"> | string
    key_mac?: StringFilter<"keys"> | string
    shortcuts_keys?: Shortcuts_keysListRelationFilter
  }

  export type keysOrderByWithRelationInput = {
    key_id?: SortOrder
    key_win?: SortOrder
    key_mac?: SortOrder
    shortcuts_keys?: shortcuts_keysOrderByRelationAggregateInput
  }

  export type keysWhereUniqueInput = Prisma.AtLeast<{
    key_id?: number
    key_win?: string
    key_mac?: string
    AND?: keysWhereInput | keysWhereInput[]
    OR?: keysWhereInput[]
    NOT?: keysWhereInput | keysWhereInput[]
    shortcuts_keys?: Shortcuts_keysListRelationFilter
  }, "key_id" | "key_win" | "key_mac">

  export type keysOrderByWithAggregationInput = {
    key_id?: SortOrder
    key_win?: SortOrder
    key_mac?: SortOrder
    _count?: keysCountOrderByAggregateInput
    _avg?: keysAvgOrderByAggregateInput
    _max?: keysMaxOrderByAggregateInput
    _min?: keysMinOrderByAggregateInput
    _sum?: keysSumOrderByAggregateInput
  }

  export type keysScalarWhereWithAggregatesInput = {
    AND?: keysScalarWhereWithAggregatesInput | keysScalarWhereWithAggregatesInput[]
    OR?: keysScalarWhereWithAggregatesInput[]
    NOT?: keysScalarWhereWithAggregatesInput | keysScalarWhereWithAggregatesInput[]
    key_id?: IntWithAggregatesFilter<"keys"> | number
    key_win?: StringWithAggregatesFilter<"keys"> | string
    key_mac?: StringWithAggregatesFilter<"keys"> | string
  }

  export type shortcuts_keysWhereInput = {
    AND?: shortcuts_keysWhereInput | shortcuts_keysWhereInput[]
    OR?: shortcuts_keysWhereInput[]
    NOT?: shortcuts_keysWhereInput | shortcuts_keysWhereInput[]
    shortcut_id?: IntFilter<"shortcuts_keys"> | number
    key_id?: IntFilter<"shortcuts_keys"> | number
    shortcuts?: XOR<ShortcutsRelationFilter, shortcutsWhereInput>
    keys?: XOR<KeysRelationFilter, keysWhereInput>
  }

  export type shortcuts_keysOrderByWithRelationInput = {
    shortcut_id?: SortOrder
    key_id?: SortOrder
    shortcuts?: shortcutsOrderByWithRelationInput
    keys?: keysOrderByWithRelationInput
  }

  export type shortcuts_keysWhereUniqueInput = Prisma.AtLeast<{
    shortcut_id_key_id?: shortcuts_keysShortcut_idKey_idCompoundUniqueInput
    AND?: shortcuts_keysWhereInput | shortcuts_keysWhereInput[]
    OR?: shortcuts_keysWhereInput[]
    NOT?: shortcuts_keysWhereInput | shortcuts_keysWhereInput[]
    shortcut_id?: IntFilter<"shortcuts_keys"> | number
    key_id?: IntFilter<"shortcuts_keys"> | number
    shortcuts?: XOR<ShortcutsRelationFilter, shortcutsWhereInput>
    keys?: XOR<KeysRelationFilter, keysWhereInput>
  }, "shortcut_id_key_id">

  export type shortcuts_keysOrderByWithAggregationInput = {
    shortcut_id?: SortOrder
    key_id?: SortOrder
    _count?: shortcuts_keysCountOrderByAggregateInput
    _avg?: shortcuts_keysAvgOrderByAggregateInput
    _max?: shortcuts_keysMaxOrderByAggregateInput
    _min?: shortcuts_keysMinOrderByAggregateInput
    _sum?: shortcuts_keysSumOrderByAggregateInput
  }

  export type shortcuts_keysScalarWhereWithAggregatesInput = {
    AND?: shortcuts_keysScalarWhereWithAggregatesInput | shortcuts_keysScalarWhereWithAggregatesInput[]
    OR?: shortcuts_keysScalarWhereWithAggregatesInput[]
    NOT?: shortcuts_keysScalarWhereWithAggregatesInput | shortcuts_keysScalarWhereWithAggregatesInput[]
    shortcut_id?: IntWithAggregatesFilter<"shortcuts_keys"> | number
    key_id?: IntWithAggregatesFilter<"shortcuts_keys"> | number
  }

  export type usersCreateInput = {
    username: string
    email: string
    password: string
    job: string
    os: string
    role: string
    users_shortcuts?: users_shortcutsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    user_id?: number
    username: string
    email: string
    password: string
    job: string
    os: string
    role: string
    users_shortcuts?: users_shortcutsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    job?: StringFieldUpdateOperationsInput | string
    os?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    users_shortcuts?: users_shortcutsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    job?: StringFieldUpdateOperationsInput | string
    os?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    users_shortcuts?: users_shortcutsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    user_id?: number
    username: string
    email: string
    password: string
    job: string
    os: string
    role: string
  }

  export type usersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    job?: StringFieldUpdateOperationsInput | string
    os?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    job?: StringFieldUpdateOperationsInput | string
    os?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type applicationsCreateInput = {
    app_name: string
    app_description: string
    app_logo?: number | null
    app_images?: applicationsCreateapp_imagesInput | string[]
    app_categories: app_categoriesCreateNestedOneWithoutApplicationsInput
    shortcuts?: shortcutsCreateNestedManyWithoutApplicationsInput
  }

  export type applicationsUncheckedCreateInput = {
    app_id?: number
    app_name: string
    app_description: string
    app_logo?: number | null
    app_images?: applicationsCreateapp_imagesInput | string[]
    categorie_id: number
    shortcuts?: shortcutsUncheckedCreateNestedManyWithoutApplicationsInput
  }

  export type applicationsUpdateInput = {
    app_name?: StringFieldUpdateOperationsInput | string
    app_description?: StringFieldUpdateOperationsInput | string
    app_logo?: NullableIntFieldUpdateOperationsInput | number | null
    app_images?: applicationsUpdateapp_imagesInput | string[]
    app_categories?: app_categoriesUpdateOneRequiredWithoutApplicationsNestedInput
    shortcuts?: shortcutsUpdateManyWithoutApplicationsNestedInput
  }

  export type applicationsUncheckedUpdateInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    app_name?: StringFieldUpdateOperationsInput | string
    app_description?: StringFieldUpdateOperationsInput | string
    app_logo?: NullableIntFieldUpdateOperationsInput | number | null
    app_images?: applicationsUpdateapp_imagesInput | string[]
    categorie_id?: IntFieldUpdateOperationsInput | number
    shortcuts?: shortcutsUncheckedUpdateManyWithoutApplicationsNestedInput
  }

  export type applicationsCreateManyInput = {
    app_id?: number
    app_name: string
    app_description: string
    app_logo?: number | null
    app_images?: applicationsCreateapp_imagesInput | string[]
    categorie_id: number
  }

  export type applicationsUpdateManyMutationInput = {
    app_name?: StringFieldUpdateOperationsInput | string
    app_description?: StringFieldUpdateOperationsInput | string
    app_logo?: NullableIntFieldUpdateOperationsInput | number | null
    app_images?: applicationsUpdateapp_imagesInput | string[]
  }

  export type applicationsUncheckedUpdateManyInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    app_name?: StringFieldUpdateOperationsInput | string
    app_description?: StringFieldUpdateOperationsInput | string
    app_logo?: NullableIntFieldUpdateOperationsInput | number | null
    app_images?: applicationsUpdateapp_imagesInput | string[]
    categorie_id?: IntFieldUpdateOperationsInput | number
  }

  export type app_categoriesCreateInput = {
    categorie_name: string
    applications?: applicationsCreateNestedManyWithoutApp_categoriesInput
  }

  export type app_categoriesUncheckedCreateInput = {
    categorie_id?: number
    categorie_name: string
    applications?: applicationsUncheckedCreateNestedManyWithoutApp_categoriesInput
  }

  export type app_categoriesUpdateInput = {
    categorie_name?: StringFieldUpdateOperationsInput | string
    applications?: applicationsUpdateManyWithoutApp_categoriesNestedInput
  }

  export type app_categoriesUncheckedUpdateInput = {
    categorie_id?: IntFieldUpdateOperationsInput | number
    categorie_name?: StringFieldUpdateOperationsInput | string
    applications?: applicationsUncheckedUpdateManyWithoutApp_categoriesNestedInput
  }

  export type app_categoriesCreateManyInput = {
    categorie_id?: number
    categorie_name: string
  }

  export type app_categoriesUpdateManyMutationInput = {
    categorie_name?: StringFieldUpdateOperationsInput | string
  }

  export type app_categoriesUncheckedUpdateManyInput = {
    categorie_id?: IntFieldUpdateOperationsInput | number
    categorie_name?: StringFieldUpdateOperationsInput | string
  }

  export type users_shortcutsCreateInput = {
    users: usersCreateNestedOneWithoutUsers_shortcutsInput
    shortcuts: shortcutsCreateNestedOneWithoutUsers_shortcutsInput
  }

  export type users_shortcutsUncheckedCreateInput = {
    user_id: number
    shortcut_id: number
  }

  export type users_shortcutsUpdateInput = {
    users?: usersUpdateOneRequiredWithoutUsers_shortcutsNestedInput
    shortcuts?: shortcutsUpdateOneRequiredWithoutUsers_shortcutsNestedInput
  }

  export type users_shortcutsUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    shortcut_id?: IntFieldUpdateOperationsInput | number
  }

  export type users_shortcutsCreateManyInput = {
    user_id: number
    shortcut_id: number
  }

  export type users_shortcutsUpdateManyMutationInput = {

  }

  export type users_shortcutsUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    shortcut_id?: IntFieldUpdateOperationsInput | number
  }

  export type chaptersCreateInput = {
    chapter_name: string
    shortcuts?: shortcutsCreateNestedManyWithoutChaptersInput
  }

  export type chaptersUncheckedCreateInput = {
    chapter_id?: number
    chapter_name: string
    shortcuts?: shortcutsUncheckedCreateNestedManyWithoutChaptersInput
  }

  export type chaptersUpdateInput = {
    chapter_name?: StringFieldUpdateOperationsInput | string
    shortcuts?: shortcutsUpdateManyWithoutChaptersNestedInput
  }

  export type chaptersUncheckedUpdateInput = {
    chapter_id?: IntFieldUpdateOperationsInput | number
    chapter_name?: StringFieldUpdateOperationsInput | string
    shortcuts?: shortcutsUncheckedUpdateManyWithoutChaptersNestedInput
  }

  export type chaptersCreateManyInput = {
    chapter_id?: number
    chapter_name: string
  }

  export type chaptersUpdateManyMutationInput = {
    chapter_name?: StringFieldUpdateOperationsInput | string
  }

  export type chaptersUncheckedUpdateManyInput = {
    chapter_id?: IntFieldUpdateOperationsInput | number
    chapter_name?: StringFieldUpdateOperationsInput | string
  }

  export type shortcutsCreateInput = {
    shortcut_name: string
    shortcut_desc: string
    chapters: chaptersCreateNestedOneWithoutShortcutsInput
    applications: applicationsCreateNestedOneWithoutShortcutsInput
    users_shortcuts?: users_shortcutsCreateNestedManyWithoutShortcutsInput
    shortcuts_keys?: shortcuts_keysCreateNestedManyWithoutShortcutsInput
  }

  export type shortcutsUncheckedCreateInput = {
    shortcut_id?: number
    chapter_id: number
    app_id: number
    shortcut_name: string
    shortcut_desc: string
    users_shortcuts?: users_shortcutsUncheckedCreateNestedManyWithoutShortcutsInput
    shortcuts_keys?: shortcuts_keysUncheckedCreateNestedManyWithoutShortcutsInput
  }

  export type shortcutsUpdateInput = {
    shortcut_name?: StringFieldUpdateOperationsInput | string
    shortcut_desc?: StringFieldUpdateOperationsInput | string
    chapters?: chaptersUpdateOneRequiredWithoutShortcutsNestedInput
    applications?: applicationsUpdateOneRequiredWithoutShortcutsNestedInput
    users_shortcuts?: users_shortcutsUpdateManyWithoutShortcutsNestedInput
    shortcuts_keys?: shortcuts_keysUpdateManyWithoutShortcutsNestedInput
  }

  export type shortcutsUncheckedUpdateInput = {
    shortcut_id?: IntFieldUpdateOperationsInput | number
    chapter_id?: IntFieldUpdateOperationsInput | number
    app_id?: IntFieldUpdateOperationsInput | number
    shortcut_name?: StringFieldUpdateOperationsInput | string
    shortcut_desc?: StringFieldUpdateOperationsInput | string
    users_shortcuts?: users_shortcutsUncheckedUpdateManyWithoutShortcutsNestedInput
    shortcuts_keys?: shortcuts_keysUncheckedUpdateManyWithoutShortcutsNestedInput
  }

  export type shortcutsCreateManyInput = {
    shortcut_id?: number
    chapter_id: number
    app_id: number
    shortcut_name: string
    shortcut_desc: string
  }

  export type shortcutsUpdateManyMutationInput = {
    shortcut_name?: StringFieldUpdateOperationsInput | string
    shortcut_desc?: StringFieldUpdateOperationsInput | string
  }

  export type shortcutsUncheckedUpdateManyInput = {
    shortcut_id?: IntFieldUpdateOperationsInput | number
    chapter_id?: IntFieldUpdateOperationsInput | number
    app_id?: IntFieldUpdateOperationsInput | number
    shortcut_name?: StringFieldUpdateOperationsInput | string
    shortcut_desc?: StringFieldUpdateOperationsInput | string
  }

  export type speed_lineCreateInput = {
    line: string
  }

  export type speed_lineUncheckedCreateInput = {
    line_id?: number
    line: string
  }

  export type speed_lineUpdateInput = {
    line?: StringFieldUpdateOperationsInput | string
  }

  export type speed_lineUncheckedUpdateInput = {
    line_id?: IntFieldUpdateOperationsInput | number
    line?: StringFieldUpdateOperationsInput | string
  }

  export type speed_lineCreateManyInput = {
    line_id?: number
    line: string
  }

  export type speed_lineUpdateManyMutationInput = {
    line?: StringFieldUpdateOperationsInput | string
  }

  export type speed_lineUncheckedUpdateManyInput = {
    line_id?: IntFieldUpdateOperationsInput | number
    line?: StringFieldUpdateOperationsInput | string
  }

  export type keysCreateInput = {
    key_win: string
    key_mac: string
    shortcuts_keys?: shortcuts_keysCreateNestedManyWithoutKeysInput
  }

  export type keysUncheckedCreateInput = {
    key_id?: number
    key_win: string
    key_mac: string
    shortcuts_keys?: shortcuts_keysUncheckedCreateNestedManyWithoutKeysInput
  }

  export type keysUpdateInput = {
    key_win?: StringFieldUpdateOperationsInput | string
    key_mac?: StringFieldUpdateOperationsInput | string
    shortcuts_keys?: shortcuts_keysUpdateManyWithoutKeysNestedInput
  }

  export type keysUncheckedUpdateInput = {
    key_id?: IntFieldUpdateOperationsInput | number
    key_win?: StringFieldUpdateOperationsInput | string
    key_mac?: StringFieldUpdateOperationsInput | string
    shortcuts_keys?: shortcuts_keysUncheckedUpdateManyWithoutKeysNestedInput
  }

  export type keysCreateManyInput = {
    key_id?: number
    key_win: string
    key_mac: string
  }

  export type keysUpdateManyMutationInput = {
    key_win?: StringFieldUpdateOperationsInput | string
    key_mac?: StringFieldUpdateOperationsInput | string
  }

  export type keysUncheckedUpdateManyInput = {
    key_id?: IntFieldUpdateOperationsInput | number
    key_win?: StringFieldUpdateOperationsInput | string
    key_mac?: StringFieldUpdateOperationsInput | string
  }

  export type shortcuts_keysCreateInput = {
    shortcuts: shortcutsCreateNestedOneWithoutShortcuts_keysInput
    keys: keysCreateNestedOneWithoutShortcuts_keysInput
  }

  export type shortcuts_keysUncheckedCreateInput = {
    shortcut_id: number
    key_id: number
  }

  export type shortcuts_keysUpdateInput = {
    shortcuts?: shortcutsUpdateOneRequiredWithoutShortcuts_keysNestedInput
    keys?: keysUpdateOneRequiredWithoutShortcuts_keysNestedInput
  }

  export type shortcuts_keysUncheckedUpdateInput = {
    shortcut_id?: IntFieldUpdateOperationsInput | number
    key_id?: IntFieldUpdateOperationsInput | number
  }

  export type shortcuts_keysCreateManyInput = {
    shortcut_id: number
    key_id: number
  }

  export type shortcuts_keysUpdateManyMutationInput = {

  }

  export type shortcuts_keysUncheckedUpdateManyInput = {
    shortcut_id?: IntFieldUpdateOperationsInput | number
    key_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type Users_shortcutsListRelationFilter = {
    every?: users_shortcutsWhereInput
    some?: users_shortcutsWhereInput
    none?: users_shortcutsWhereInput
  }

  export type users_shortcutsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    job?: SortOrder
    os?: SortOrder
    role?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    job?: SortOrder
    os?: SortOrder
    role?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    job?: SortOrder
    os?: SortOrder
    role?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type App_categoriesRelationFilter = {
    is?: app_categoriesWhereInput
    isNot?: app_categoriesWhereInput
  }

  export type ShortcutsListRelationFilter = {
    every?: shortcutsWhereInput
    some?: shortcutsWhereInput
    none?: shortcutsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type shortcutsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type applicationsCountOrderByAggregateInput = {
    app_id?: SortOrder
    app_name?: SortOrder
    app_description?: SortOrder
    app_logo?: SortOrder
    app_images?: SortOrder
    categorie_id?: SortOrder
  }

  export type applicationsAvgOrderByAggregateInput = {
    app_id?: SortOrder
    app_logo?: SortOrder
    categorie_id?: SortOrder
  }

  export type applicationsMaxOrderByAggregateInput = {
    app_id?: SortOrder
    app_name?: SortOrder
    app_description?: SortOrder
    app_logo?: SortOrder
    categorie_id?: SortOrder
  }

  export type applicationsMinOrderByAggregateInput = {
    app_id?: SortOrder
    app_name?: SortOrder
    app_description?: SortOrder
    app_logo?: SortOrder
    categorie_id?: SortOrder
  }

  export type applicationsSumOrderByAggregateInput = {
    app_id?: SortOrder
    app_logo?: SortOrder
    categorie_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ApplicationsListRelationFilter = {
    every?: applicationsWhereInput
    some?: applicationsWhereInput
    none?: applicationsWhereInput
  }

  export type applicationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type app_categoriesCountOrderByAggregateInput = {
    categorie_id?: SortOrder
    categorie_name?: SortOrder
  }

  export type app_categoriesAvgOrderByAggregateInput = {
    categorie_id?: SortOrder
  }

  export type app_categoriesMaxOrderByAggregateInput = {
    categorie_id?: SortOrder
    categorie_name?: SortOrder
  }

  export type app_categoriesMinOrderByAggregateInput = {
    categorie_id?: SortOrder
    categorie_name?: SortOrder
  }

  export type app_categoriesSumOrderByAggregateInput = {
    categorie_id?: SortOrder
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type ShortcutsRelationFilter = {
    is?: shortcutsWhereInput
    isNot?: shortcutsWhereInput
  }

  export type users_shortcutsCountOrderByAggregateInput = {
    user_id?: SortOrder
    shortcut_id?: SortOrder
  }

  export type users_shortcutsAvgOrderByAggregateInput = {
    user_id?: SortOrder
    shortcut_id?: SortOrder
  }

  export type users_shortcutsMaxOrderByAggregateInput = {
    user_id?: SortOrder
    shortcut_id?: SortOrder
  }

  export type users_shortcutsMinOrderByAggregateInput = {
    user_id?: SortOrder
    shortcut_id?: SortOrder
  }

  export type users_shortcutsSumOrderByAggregateInput = {
    user_id?: SortOrder
    shortcut_id?: SortOrder
  }

  export type chaptersCountOrderByAggregateInput = {
    chapter_id?: SortOrder
    chapter_name?: SortOrder
  }

  export type chaptersAvgOrderByAggregateInput = {
    chapter_id?: SortOrder
  }

  export type chaptersMaxOrderByAggregateInput = {
    chapter_id?: SortOrder
    chapter_name?: SortOrder
  }

  export type chaptersMinOrderByAggregateInput = {
    chapter_id?: SortOrder
    chapter_name?: SortOrder
  }

  export type chaptersSumOrderByAggregateInput = {
    chapter_id?: SortOrder
  }

  export type ChaptersRelationFilter = {
    is?: chaptersWhereInput
    isNot?: chaptersWhereInput
  }

  export type ApplicationsRelationFilter = {
    is?: applicationsWhereInput
    isNot?: applicationsWhereInput
  }

  export type Shortcuts_keysListRelationFilter = {
    every?: shortcuts_keysWhereInput
    some?: shortcuts_keysWhereInput
    none?: shortcuts_keysWhereInput
  }

  export type shortcuts_keysOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type shortcutsCountOrderByAggregateInput = {
    shortcut_id?: SortOrder
    chapter_id?: SortOrder
    app_id?: SortOrder
    shortcut_name?: SortOrder
    shortcut_desc?: SortOrder
  }

  export type shortcutsAvgOrderByAggregateInput = {
    shortcut_id?: SortOrder
    chapter_id?: SortOrder
    app_id?: SortOrder
  }

  export type shortcutsMaxOrderByAggregateInput = {
    shortcut_id?: SortOrder
    chapter_id?: SortOrder
    app_id?: SortOrder
    shortcut_name?: SortOrder
    shortcut_desc?: SortOrder
  }

  export type shortcutsMinOrderByAggregateInput = {
    shortcut_id?: SortOrder
    chapter_id?: SortOrder
    app_id?: SortOrder
    shortcut_name?: SortOrder
    shortcut_desc?: SortOrder
  }

  export type shortcutsSumOrderByAggregateInput = {
    shortcut_id?: SortOrder
    chapter_id?: SortOrder
    app_id?: SortOrder
  }

  export type speed_lineCountOrderByAggregateInput = {
    line_id?: SortOrder
    line?: SortOrder
  }

  export type speed_lineAvgOrderByAggregateInput = {
    line_id?: SortOrder
  }

  export type speed_lineMaxOrderByAggregateInput = {
    line_id?: SortOrder
    line?: SortOrder
  }

  export type speed_lineMinOrderByAggregateInput = {
    line_id?: SortOrder
    line?: SortOrder
  }

  export type speed_lineSumOrderByAggregateInput = {
    line_id?: SortOrder
  }

  export type keysCountOrderByAggregateInput = {
    key_id?: SortOrder
    key_win?: SortOrder
    key_mac?: SortOrder
  }

  export type keysAvgOrderByAggregateInput = {
    key_id?: SortOrder
  }

  export type keysMaxOrderByAggregateInput = {
    key_id?: SortOrder
    key_win?: SortOrder
    key_mac?: SortOrder
  }

  export type keysMinOrderByAggregateInput = {
    key_id?: SortOrder
    key_win?: SortOrder
    key_mac?: SortOrder
  }

  export type keysSumOrderByAggregateInput = {
    key_id?: SortOrder
  }

  export type KeysRelationFilter = {
    is?: keysWhereInput
    isNot?: keysWhereInput
  }

  export type shortcuts_keysShortcut_idKey_idCompoundUniqueInput = {
    shortcut_id: number
    key_id: number
  }

  export type shortcuts_keysCountOrderByAggregateInput = {
    shortcut_id?: SortOrder
    key_id?: SortOrder
  }

  export type shortcuts_keysAvgOrderByAggregateInput = {
    shortcut_id?: SortOrder
    key_id?: SortOrder
  }

  export type shortcuts_keysMaxOrderByAggregateInput = {
    shortcut_id?: SortOrder
    key_id?: SortOrder
  }

  export type shortcuts_keysMinOrderByAggregateInput = {
    shortcut_id?: SortOrder
    key_id?: SortOrder
  }

  export type shortcuts_keysSumOrderByAggregateInput = {
    shortcut_id?: SortOrder
    key_id?: SortOrder
  }

  export type users_shortcutsCreateNestedManyWithoutUsersInput = {
    create?: XOR<users_shortcutsCreateWithoutUsersInput, users_shortcutsUncheckedCreateWithoutUsersInput> | users_shortcutsCreateWithoutUsersInput[] | users_shortcutsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: users_shortcutsCreateOrConnectWithoutUsersInput | users_shortcutsCreateOrConnectWithoutUsersInput[]
    createMany?: users_shortcutsCreateManyUsersInputEnvelope
    connect?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
  }

  export type users_shortcutsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<users_shortcutsCreateWithoutUsersInput, users_shortcutsUncheckedCreateWithoutUsersInput> | users_shortcutsCreateWithoutUsersInput[] | users_shortcutsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: users_shortcutsCreateOrConnectWithoutUsersInput | users_shortcutsCreateOrConnectWithoutUsersInput[]
    createMany?: users_shortcutsCreateManyUsersInputEnvelope
    connect?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type users_shortcutsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<users_shortcutsCreateWithoutUsersInput, users_shortcutsUncheckedCreateWithoutUsersInput> | users_shortcutsCreateWithoutUsersInput[] | users_shortcutsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: users_shortcutsCreateOrConnectWithoutUsersInput | users_shortcutsCreateOrConnectWithoutUsersInput[]
    upsert?: users_shortcutsUpsertWithWhereUniqueWithoutUsersInput | users_shortcutsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: users_shortcutsCreateManyUsersInputEnvelope
    set?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
    disconnect?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
    delete?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
    connect?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
    update?: users_shortcutsUpdateWithWhereUniqueWithoutUsersInput | users_shortcutsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: users_shortcutsUpdateManyWithWhereWithoutUsersInput | users_shortcutsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: users_shortcutsScalarWhereInput | users_shortcutsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type users_shortcutsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<users_shortcutsCreateWithoutUsersInput, users_shortcutsUncheckedCreateWithoutUsersInput> | users_shortcutsCreateWithoutUsersInput[] | users_shortcutsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: users_shortcutsCreateOrConnectWithoutUsersInput | users_shortcutsCreateOrConnectWithoutUsersInput[]
    upsert?: users_shortcutsUpsertWithWhereUniqueWithoutUsersInput | users_shortcutsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: users_shortcutsCreateManyUsersInputEnvelope
    set?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
    disconnect?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
    delete?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
    connect?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
    update?: users_shortcutsUpdateWithWhereUniqueWithoutUsersInput | users_shortcutsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: users_shortcutsUpdateManyWithWhereWithoutUsersInput | users_shortcutsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: users_shortcutsScalarWhereInput | users_shortcutsScalarWhereInput[]
  }

  export type applicationsCreateapp_imagesInput = {
    set: string[]
  }

  export type app_categoriesCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<app_categoriesCreateWithoutApplicationsInput, app_categoriesUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: app_categoriesCreateOrConnectWithoutApplicationsInput
    connect?: app_categoriesWhereUniqueInput
  }

  export type shortcutsCreateNestedManyWithoutApplicationsInput = {
    create?: XOR<shortcutsCreateWithoutApplicationsInput, shortcutsUncheckedCreateWithoutApplicationsInput> | shortcutsCreateWithoutApplicationsInput[] | shortcutsUncheckedCreateWithoutApplicationsInput[]
    connectOrCreate?: shortcutsCreateOrConnectWithoutApplicationsInput | shortcutsCreateOrConnectWithoutApplicationsInput[]
    createMany?: shortcutsCreateManyApplicationsInputEnvelope
    connect?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
  }

  export type shortcutsUncheckedCreateNestedManyWithoutApplicationsInput = {
    create?: XOR<shortcutsCreateWithoutApplicationsInput, shortcutsUncheckedCreateWithoutApplicationsInput> | shortcutsCreateWithoutApplicationsInput[] | shortcutsUncheckedCreateWithoutApplicationsInput[]
    connectOrCreate?: shortcutsCreateOrConnectWithoutApplicationsInput | shortcutsCreateOrConnectWithoutApplicationsInput[]
    createMany?: shortcutsCreateManyApplicationsInputEnvelope
    connect?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type applicationsUpdateapp_imagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type app_categoriesUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<app_categoriesCreateWithoutApplicationsInput, app_categoriesUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: app_categoriesCreateOrConnectWithoutApplicationsInput
    upsert?: app_categoriesUpsertWithoutApplicationsInput
    connect?: app_categoriesWhereUniqueInput
    update?: XOR<XOR<app_categoriesUpdateToOneWithWhereWithoutApplicationsInput, app_categoriesUpdateWithoutApplicationsInput>, app_categoriesUncheckedUpdateWithoutApplicationsInput>
  }

  export type shortcutsUpdateManyWithoutApplicationsNestedInput = {
    create?: XOR<shortcutsCreateWithoutApplicationsInput, shortcutsUncheckedCreateWithoutApplicationsInput> | shortcutsCreateWithoutApplicationsInput[] | shortcutsUncheckedCreateWithoutApplicationsInput[]
    connectOrCreate?: shortcutsCreateOrConnectWithoutApplicationsInput | shortcutsCreateOrConnectWithoutApplicationsInput[]
    upsert?: shortcutsUpsertWithWhereUniqueWithoutApplicationsInput | shortcutsUpsertWithWhereUniqueWithoutApplicationsInput[]
    createMany?: shortcutsCreateManyApplicationsInputEnvelope
    set?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
    disconnect?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
    delete?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
    connect?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
    update?: shortcutsUpdateWithWhereUniqueWithoutApplicationsInput | shortcutsUpdateWithWhereUniqueWithoutApplicationsInput[]
    updateMany?: shortcutsUpdateManyWithWhereWithoutApplicationsInput | shortcutsUpdateManyWithWhereWithoutApplicationsInput[]
    deleteMany?: shortcutsScalarWhereInput | shortcutsScalarWhereInput[]
  }

  export type shortcutsUncheckedUpdateManyWithoutApplicationsNestedInput = {
    create?: XOR<shortcutsCreateWithoutApplicationsInput, shortcutsUncheckedCreateWithoutApplicationsInput> | shortcutsCreateWithoutApplicationsInput[] | shortcutsUncheckedCreateWithoutApplicationsInput[]
    connectOrCreate?: shortcutsCreateOrConnectWithoutApplicationsInput | shortcutsCreateOrConnectWithoutApplicationsInput[]
    upsert?: shortcutsUpsertWithWhereUniqueWithoutApplicationsInput | shortcutsUpsertWithWhereUniqueWithoutApplicationsInput[]
    createMany?: shortcutsCreateManyApplicationsInputEnvelope
    set?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
    disconnect?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
    delete?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
    connect?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
    update?: shortcutsUpdateWithWhereUniqueWithoutApplicationsInput | shortcutsUpdateWithWhereUniqueWithoutApplicationsInput[]
    updateMany?: shortcutsUpdateManyWithWhereWithoutApplicationsInput | shortcutsUpdateManyWithWhereWithoutApplicationsInput[]
    deleteMany?: shortcutsScalarWhereInput | shortcutsScalarWhereInput[]
  }

  export type applicationsCreateNestedManyWithoutApp_categoriesInput = {
    create?: XOR<applicationsCreateWithoutApp_categoriesInput, applicationsUncheckedCreateWithoutApp_categoriesInput> | applicationsCreateWithoutApp_categoriesInput[] | applicationsUncheckedCreateWithoutApp_categoriesInput[]
    connectOrCreate?: applicationsCreateOrConnectWithoutApp_categoriesInput | applicationsCreateOrConnectWithoutApp_categoriesInput[]
    createMany?: applicationsCreateManyApp_categoriesInputEnvelope
    connect?: applicationsWhereUniqueInput | applicationsWhereUniqueInput[]
  }

  export type applicationsUncheckedCreateNestedManyWithoutApp_categoriesInput = {
    create?: XOR<applicationsCreateWithoutApp_categoriesInput, applicationsUncheckedCreateWithoutApp_categoriesInput> | applicationsCreateWithoutApp_categoriesInput[] | applicationsUncheckedCreateWithoutApp_categoriesInput[]
    connectOrCreate?: applicationsCreateOrConnectWithoutApp_categoriesInput | applicationsCreateOrConnectWithoutApp_categoriesInput[]
    createMany?: applicationsCreateManyApp_categoriesInputEnvelope
    connect?: applicationsWhereUniqueInput | applicationsWhereUniqueInput[]
  }

  export type applicationsUpdateManyWithoutApp_categoriesNestedInput = {
    create?: XOR<applicationsCreateWithoutApp_categoriesInput, applicationsUncheckedCreateWithoutApp_categoriesInput> | applicationsCreateWithoutApp_categoriesInput[] | applicationsUncheckedCreateWithoutApp_categoriesInput[]
    connectOrCreate?: applicationsCreateOrConnectWithoutApp_categoriesInput | applicationsCreateOrConnectWithoutApp_categoriesInput[]
    upsert?: applicationsUpsertWithWhereUniqueWithoutApp_categoriesInput | applicationsUpsertWithWhereUniqueWithoutApp_categoriesInput[]
    createMany?: applicationsCreateManyApp_categoriesInputEnvelope
    set?: applicationsWhereUniqueInput | applicationsWhereUniqueInput[]
    disconnect?: applicationsWhereUniqueInput | applicationsWhereUniqueInput[]
    delete?: applicationsWhereUniqueInput | applicationsWhereUniqueInput[]
    connect?: applicationsWhereUniqueInput | applicationsWhereUniqueInput[]
    update?: applicationsUpdateWithWhereUniqueWithoutApp_categoriesInput | applicationsUpdateWithWhereUniqueWithoutApp_categoriesInput[]
    updateMany?: applicationsUpdateManyWithWhereWithoutApp_categoriesInput | applicationsUpdateManyWithWhereWithoutApp_categoriesInput[]
    deleteMany?: applicationsScalarWhereInput | applicationsScalarWhereInput[]
  }

  export type applicationsUncheckedUpdateManyWithoutApp_categoriesNestedInput = {
    create?: XOR<applicationsCreateWithoutApp_categoriesInput, applicationsUncheckedCreateWithoutApp_categoriesInput> | applicationsCreateWithoutApp_categoriesInput[] | applicationsUncheckedCreateWithoutApp_categoriesInput[]
    connectOrCreate?: applicationsCreateOrConnectWithoutApp_categoriesInput | applicationsCreateOrConnectWithoutApp_categoriesInput[]
    upsert?: applicationsUpsertWithWhereUniqueWithoutApp_categoriesInput | applicationsUpsertWithWhereUniqueWithoutApp_categoriesInput[]
    createMany?: applicationsCreateManyApp_categoriesInputEnvelope
    set?: applicationsWhereUniqueInput | applicationsWhereUniqueInput[]
    disconnect?: applicationsWhereUniqueInput | applicationsWhereUniqueInput[]
    delete?: applicationsWhereUniqueInput | applicationsWhereUniqueInput[]
    connect?: applicationsWhereUniqueInput | applicationsWhereUniqueInput[]
    update?: applicationsUpdateWithWhereUniqueWithoutApp_categoriesInput | applicationsUpdateWithWhereUniqueWithoutApp_categoriesInput[]
    updateMany?: applicationsUpdateManyWithWhereWithoutApp_categoriesInput | applicationsUpdateManyWithWhereWithoutApp_categoriesInput[]
    deleteMany?: applicationsScalarWhereInput | applicationsScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutUsers_shortcutsInput = {
    create?: XOR<usersCreateWithoutUsers_shortcutsInput, usersUncheckedCreateWithoutUsers_shortcutsInput>
    connectOrCreate?: usersCreateOrConnectWithoutUsers_shortcutsInput
    connect?: usersWhereUniqueInput
  }

  export type shortcutsCreateNestedOneWithoutUsers_shortcutsInput = {
    create?: XOR<shortcutsCreateWithoutUsers_shortcutsInput, shortcutsUncheckedCreateWithoutUsers_shortcutsInput>
    connectOrCreate?: shortcutsCreateOrConnectWithoutUsers_shortcutsInput
    connect?: shortcutsWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutUsers_shortcutsNestedInput = {
    create?: XOR<usersCreateWithoutUsers_shortcutsInput, usersUncheckedCreateWithoutUsers_shortcutsInput>
    connectOrCreate?: usersCreateOrConnectWithoutUsers_shortcutsInput
    upsert?: usersUpsertWithoutUsers_shortcutsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutUsers_shortcutsInput, usersUpdateWithoutUsers_shortcutsInput>, usersUncheckedUpdateWithoutUsers_shortcutsInput>
  }

  export type shortcutsUpdateOneRequiredWithoutUsers_shortcutsNestedInput = {
    create?: XOR<shortcutsCreateWithoutUsers_shortcutsInput, shortcutsUncheckedCreateWithoutUsers_shortcutsInput>
    connectOrCreate?: shortcutsCreateOrConnectWithoutUsers_shortcutsInput
    upsert?: shortcutsUpsertWithoutUsers_shortcutsInput
    connect?: shortcutsWhereUniqueInput
    update?: XOR<XOR<shortcutsUpdateToOneWithWhereWithoutUsers_shortcutsInput, shortcutsUpdateWithoutUsers_shortcutsInput>, shortcutsUncheckedUpdateWithoutUsers_shortcutsInput>
  }

  export type shortcutsCreateNestedManyWithoutChaptersInput = {
    create?: XOR<shortcutsCreateWithoutChaptersInput, shortcutsUncheckedCreateWithoutChaptersInput> | shortcutsCreateWithoutChaptersInput[] | shortcutsUncheckedCreateWithoutChaptersInput[]
    connectOrCreate?: shortcutsCreateOrConnectWithoutChaptersInput | shortcutsCreateOrConnectWithoutChaptersInput[]
    createMany?: shortcutsCreateManyChaptersInputEnvelope
    connect?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
  }

  export type shortcutsUncheckedCreateNestedManyWithoutChaptersInput = {
    create?: XOR<shortcutsCreateWithoutChaptersInput, shortcutsUncheckedCreateWithoutChaptersInput> | shortcutsCreateWithoutChaptersInput[] | shortcutsUncheckedCreateWithoutChaptersInput[]
    connectOrCreate?: shortcutsCreateOrConnectWithoutChaptersInput | shortcutsCreateOrConnectWithoutChaptersInput[]
    createMany?: shortcutsCreateManyChaptersInputEnvelope
    connect?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
  }

  export type shortcutsUpdateManyWithoutChaptersNestedInput = {
    create?: XOR<shortcutsCreateWithoutChaptersInput, shortcutsUncheckedCreateWithoutChaptersInput> | shortcutsCreateWithoutChaptersInput[] | shortcutsUncheckedCreateWithoutChaptersInput[]
    connectOrCreate?: shortcutsCreateOrConnectWithoutChaptersInput | shortcutsCreateOrConnectWithoutChaptersInput[]
    upsert?: shortcutsUpsertWithWhereUniqueWithoutChaptersInput | shortcutsUpsertWithWhereUniqueWithoutChaptersInput[]
    createMany?: shortcutsCreateManyChaptersInputEnvelope
    set?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
    disconnect?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
    delete?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
    connect?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
    update?: shortcutsUpdateWithWhereUniqueWithoutChaptersInput | shortcutsUpdateWithWhereUniqueWithoutChaptersInput[]
    updateMany?: shortcutsUpdateManyWithWhereWithoutChaptersInput | shortcutsUpdateManyWithWhereWithoutChaptersInput[]
    deleteMany?: shortcutsScalarWhereInput | shortcutsScalarWhereInput[]
  }

  export type shortcutsUncheckedUpdateManyWithoutChaptersNestedInput = {
    create?: XOR<shortcutsCreateWithoutChaptersInput, shortcutsUncheckedCreateWithoutChaptersInput> | shortcutsCreateWithoutChaptersInput[] | shortcutsUncheckedCreateWithoutChaptersInput[]
    connectOrCreate?: shortcutsCreateOrConnectWithoutChaptersInput | shortcutsCreateOrConnectWithoutChaptersInput[]
    upsert?: shortcutsUpsertWithWhereUniqueWithoutChaptersInput | shortcutsUpsertWithWhereUniqueWithoutChaptersInput[]
    createMany?: shortcutsCreateManyChaptersInputEnvelope
    set?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
    disconnect?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
    delete?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
    connect?: shortcutsWhereUniqueInput | shortcutsWhereUniqueInput[]
    update?: shortcutsUpdateWithWhereUniqueWithoutChaptersInput | shortcutsUpdateWithWhereUniqueWithoutChaptersInput[]
    updateMany?: shortcutsUpdateManyWithWhereWithoutChaptersInput | shortcutsUpdateManyWithWhereWithoutChaptersInput[]
    deleteMany?: shortcutsScalarWhereInput | shortcutsScalarWhereInput[]
  }

  export type chaptersCreateNestedOneWithoutShortcutsInput = {
    create?: XOR<chaptersCreateWithoutShortcutsInput, chaptersUncheckedCreateWithoutShortcutsInput>
    connectOrCreate?: chaptersCreateOrConnectWithoutShortcutsInput
    connect?: chaptersWhereUniqueInput
  }

  export type applicationsCreateNestedOneWithoutShortcutsInput = {
    create?: XOR<applicationsCreateWithoutShortcutsInput, applicationsUncheckedCreateWithoutShortcutsInput>
    connectOrCreate?: applicationsCreateOrConnectWithoutShortcutsInput
    connect?: applicationsWhereUniqueInput
  }

  export type users_shortcutsCreateNestedManyWithoutShortcutsInput = {
    create?: XOR<users_shortcutsCreateWithoutShortcutsInput, users_shortcutsUncheckedCreateWithoutShortcutsInput> | users_shortcutsCreateWithoutShortcutsInput[] | users_shortcutsUncheckedCreateWithoutShortcutsInput[]
    connectOrCreate?: users_shortcutsCreateOrConnectWithoutShortcutsInput | users_shortcutsCreateOrConnectWithoutShortcutsInput[]
    createMany?: users_shortcutsCreateManyShortcutsInputEnvelope
    connect?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
  }

  export type shortcuts_keysCreateNestedManyWithoutShortcutsInput = {
    create?: XOR<shortcuts_keysCreateWithoutShortcutsInput, shortcuts_keysUncheckedCreateWithoutShortcutsInput> | shortcuts_keysCreateWithoutShortcutsInput[] | shortcuts_keysUncheckedCreateWithoutShortcutsInput[]
    connectOrCreate?: shortcuts_keysCreateOrConnectWithoutShortcutsInput | shortcuts_keysCreateOrConnectWithoutShortcutsInput[]
    createMany?: shortcuts_keysCreateManyShortcutsInputEnvelope
    connect?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
  }

  export type users_shortcutsUncheckedCreateNestedManyWithoutShortcutsInput = {
    create?: XOR<users_shortcutsCreateWithoutShortcutsInput, users_shortcutsUncheckedCreateWithoutShortcutsInput> | users_shortcutsCreateWithoutShortcutsInput[] | users_shortcutsUncheckedCreateWithoutShortcutsInput[]
    connectOrCreate?: users_shortcutsCreateOrConnectWithoutShortcutsInput | users_shortcutsCreateOrConnectWithoutShortcutsInput[]
    createMany?: users_shortcutsCreateManyShortcutsInputEnvelope
    connect?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
  }

  export type shortcuts_keysUncheckedCreateNestedManyWithoutShortcutsInput = {
    create?: XOR<shortcuts_keysCreateWithoutShortcutsInput, shortcuts_keysUncheckedCreateWithoutShortcutsInput> | shortcuts_keysCreateWithoutShortcutsInput[] | shortcuts_keysUncheckedCreateWithoutShortcutsInput[]
    connectOrCreate?: shortcuts_keysCreateOrConnectWithoutShortcutsInput | shortcuts_keysCreateOrConnectWithoutShortcutsInput[]
    createMany?: shortcuts_keysCreateManyShortcutsInputEnvelope
    connect?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
  }

  export type chaptersUpdateOneRequiredWithoutShortcutsNestedInput = {
    create?: XOR<chaptersCreateWithoutShortcutsInput, chaptersUncheckedCreateWithoutShortcutsInput>
    connectOrCreate?: chaptersCreateOrConnectWithoutShortcutsInput
    upsert?: chaptersUpsertWithoutShortcutsInput
    connect?: chaptersWhereUniqueInput
    update?: XOR<XOR<chaptersUpdateToOneWithWhereWithoutShortcutsInput, chaptersUpdateWithoutShortcutsInput>, chaptersUncheckedUpdateWithoutShortcutsInput>
  }

  export type applicationsUpdateOneRequiredWithoutShortcutsNestedInput = {
    create?: XOR<applicationsCreateWithoutShortcutsInput, applicationsUncheckedCreateWithoutShortcutsInput>
    connectOrCreate?: applicationsCreateOrConnectWithoutShortcutsInput
    upsert?: applicationsUpsertWithoutShortcutsInput
    connect?: applicationsWhereUniqueInput
    update?: XOR<XOR<applicationsUpdateToOneWithWhereWithoutShortcutsInput, applicationsUpdateWithoutShortcutsInput>, applicationsUncheckedUpdateWithoutShortcutsInput>
  }

  export type users_shortcutsUpdateManyWithoutShortcutsNestedInput = {
    create?: XOR<users_shortcutsCreateWithoutShortcutsInput, users_shortcutsUncheckedCreateWithoutShortcutsInput> | users_shortcutsCreateWithoutShortcutsInput[] | users_shortcutsUncheckedCreateWithoutShortcutsInput[]
    connectOrCreate?: users_shortcutsCreateOrConnectWithoutShortcutsInput | users_shortcutsCreateOrConnectWithoutShortcutsInput[]
    upsert?: users_shortcutsUpsertWithWhereUniqueWithoutShortcutsInput | users_shortcutsUpsertWithWhereUniqueWithoutShortcutsInput[]
    createMany?: users_shortcutsCreateManyShortcutsInputEnvelope
    set?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
    disconnect?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
    delete?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
    connect?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
    update?: users_shortcutsUpdateWithWhereUniqueWithoutShortcutsInput | users_shortcutsUpdateWithWhereUniqueWithoutShortcutsInput[]
    updateMany?: users_shortcutsUpdateManyWithWhereWithoutShortcutsInput | users_shortcutsUpdateManyWithWhereWithoutShortcutsInput[]
    deleteMany?: users_shortcutsScalarWhereInput | users_shortcutsScalarWhereInput[]
  }

  export type shortcuts_keysUpdateManyWithoutShortcutsNestedInput = {
    create?: XOR<shortcuts_keysCreateWithoutShortcutsInput, shortcuts_keysUncheckedCreateWithoutShortcutsInput> | shortcuts_keysCreateWithoutShortcutsInput[] | shortcuts_keysUncheckedCreateWithoutShortcutsInput[]
    connectOrCreate?: shortcuts_keysCreateOrConnectWithoutShortcutsInput | shortcuts_keysCreateOrConnectWithoutShortcutsInput[]
    upsert?: shortcuts_keysUpsertWithWhereUniqueWithoutShortcutsInput | shortcuts_keysUpsertWithWhereUniqueWithoutShortcutsInput[]
    createMany?: shortcuts_keysCreateManyShortcutsInputEnvelope
    set?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
    disconnect?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
    delete?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
    connect?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
    update?: shortcuts_keysUpdateWithWhereUniqueWithoutShortcutsInput | shortcuts_keysUpdateWithWhereUniqueWithoutShortcutsInput[]
    updateMany?: shortcuts_keysUpdateManyWithWhereWithoutShortcutsInput | shortcuts_keysUpdateManyWithWhereWithoutShortcutsInput[]
    deleteMany?: shortcuts_keysScalarWhereInput | shortcuts_keysScalarWhereInput[]
  }

  export type users_shortcutsUncheckedUpdateManyWithoutShortcutsNestedInput = {
    create?: XOR<users_shortcutsCreateWithoutShortcutsInput, users_shortcutsUncheckedCreateWithoutShortcutsInput> | users_shortcutsCreateWithoutShortcutsInput[] | users_shortcutsUncheckedCreateWithoutShortcutsInput[]
    connectOrCreate?: users_shortcutsCreateOrConnectWithoutShortcutsInput | users_shortcutsCreateOrConnectWithoutShortcutsInput[]
    upsert?: users_shortcutsUpsertWithWhereUniqueWithoutShortcutsInput | users_shortcutsUpsertWithWhereUniqueWithoutShortcutsInput[]
    createMany?: users_shortcutsCreateManyShortcutsInputEnvelope
    set?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
    disconnect?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
    delete?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
    connect?: users_shortcutsWhereUniqueInput | users_shortcutsWhereUniqueInput[]
    update?: users_shortcutsUpdateWithWhereUniqueWithoutShortcutsInput | users_shortcutsUpdateWithWhereUniqueWithoutShortcutsInput[]
    updateMany?: users_shortcutsUpdateManyWithWhereWithoutShortcutsInput | users_shortcutsUpdateManyWithWhereWithoutShortcutsInput[]
    deleteMany?: users_shortcutsScalarWhereInput | users_shortcutsScalarWhereInput[]
  }

  export type shortcuts_keysUncheckedUpdateManyWithoutShortcutsNestedInput = {
    create?: XOR<shortcuts_keysCreateWithoutShortcutsInput, shortcuts_keysUncheckedCreateWithoutShortcutsInput> | shortcuts_keysCreateWithoutShortcutsInput[] | shortcuts_keysUncheckedCreateWithoutShortcutsInput[]
    connectOrCreate?: shortcuts_keysCreateOrConnectWithoutShortcutsInput | shortcuts_keysCreateOrConnectWithoutShortcutsInput[]
    upsert?: shortcuts_keysUpsertWithWhereUniqueWithoutShortcutsInput | shortcuts_keysUpsertWithWhereUniqueWithoutShortcutsInput[]
    createMany?: shortcuts_keysCreateManyShortcutsInputEnvelope
    set?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
    disconnect?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
    delete?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
    connect?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
    update?: shortcuts_keysUpdateWithWhereUniqueWithoutShortcutsInput | shortcuts_keysUpdateWithWhereUniqueWithoutShortcutsInput[]
    updateMany?: shortcuts_keysUpdateManyWithWhereWithoutShortcutsInput | shortcuts_keysUpdateManyWithWhereWithoutShortcutsInput[]
    deleteMany?: shortcuts_keysScalarWhereInput | shortcuts_keysScalarWhereInput[]
  }

  export type shortcuts_keysCreateNestedManyWithoutKeysInput = {
    create?: XOR<shortcuts_keysCreateWithoutKeysInput, shortcuts_keysUncheckedCreateWithoutKeysInput> | shortcuts_keysCreateWithoutKeysInput[] | shortcuts_keysUncheckedCreateWithoutKeysInput[]
    connectOrCreate?: shortcuts_keysCreateOrConnectWithoutKeysInput | shortcuts_keysCreateOrConnectWithoutKeysInput[]
    createMany?: shortcuts_keysCreateManyKeysInputEnvelope
    connect?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
  }

  export type shortcuts_keysUncheckedCreateNestedManyWithoutKeysInput = {
    create?: XOR<shortcuts_keysCreateWithoutKeysInput, shortcuts_keysUncheckedCreateWithoutKeysInput> | shortcuts_keysCreateWithoutKeysInput[] | shortcuts_keysUncheckedCreateWithoutKeysInput[]
    connectOrCreate?: shortcuts_keysCreateOrConnectWithoutKeysInput | shortcuts_keysCreateOrConnectWithoutKeysInput[]
    createMany?: shortcuts_keysCreateManyKeysInputEnvelope
    connect?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
  }

  export type shortcuts_keysUpdateManyWithoutKeysNestedInput = {
    create?: XOR<shortcuts_keysCreateWithoutKeysInput, shortcuts_keysUncheckedCreateWithoutKeysInput> | shortcuts_keysCreateWithoutKeysInput[] | shortcuts_keysUncheckedCreateWithoutKeysInput[]
    connectOrCreate?: shortcuts_keysCreateOrConnectWithoutKeysInput | shortcuts_keysCreateOrConnectWithoutKeysInput[]
    upsert?: shortcuts_keysUpsertWithWhereUniqueWithoutKeysInput | shortcuts_keysUpsertWithWhereUniqueWithoutKeysInput[]
    createMany?: shortcuts_keysCreateManyKeysInputEnvelope
    set?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
    disconnect?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
    delete?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
    connect?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
    update?: shortcuts_keysUpdateWithWhereUniqueWithoutKeysInput | shortcuts_keysUpdateWithWhereUniqueWithoutKeysInput[]
    updateMany?: shortcuts_keysUpdateManyWithWhereWithoutKeysInput | shortcuts_keysUpdateManyWithWhereWithoutKeysInput[]
    deleteMany?: shortcuts_keysScalarWhereInput | shortcuts_keysScalarWhereInput[]
  }

  export type shortcuts_keysUncheckedUpdateManyWithoutKeysNestedInput = {
    create?: XOR<shortcuts_keysCreateWithoutKeysInput, shortcuts_keysUncheckedCreateWithoutKeysInput> | shortcuts_keysCreateWithoutKeysInput[] | shortcuts_keysUncheckedCreateWithoutKeysInput[]
    connectOrCreate?: shortcuts_keysCreateOrConnectWithoutKeysInput | shortcuts_keysCreateOrConnectWithoutKeysInput[]
    upsert?: shortcuts_keysUpsertWithWhereUniqueWithoutKeysInput | shortcuts_keysUpsertWithWhereUniqueWithoutKeysInput[]
    createMany?: shortcuts_keysCreateManyKeysInputEnvelope
    set?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
    disconnect?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
    delete?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
    connect?: shortcuts_keysWhereUniqueInput | shortcuts_keysWhereUniqueInput[]
    update?: shortcuts_keysUpdateWithWhereUniqueWithoutKeysInput | shortcuts_keysUpdateWithWhereUniqueWithoutKeysInput[]
    updateMany?: shortcuts_keysUpdateManyWithWhereWithoutKeysInput | shortcuts_keysUpdateManyWithWhereWithoutKeysInput[]
    deleteMany?: shortcuts_keysScalarWhereInput | shortcuts_keysScalarWhereInput[]
  }

  export type shortcutsCreateNestedOneWithoutShortcuts_keysInput = {
    create?: XOR<shortcutsCreateWithoutShortcuts_keysInput, shortcutsUncheckedCreateWithoutShortcuts_keysInput>
    connectOrCreate?: shortcutsCreateOrConnectWithoutShortcuts_keysInput
    connect?: shortcutsWhereUniqueInput
  }

  export type keysCreateNestedOneWithoutShortcuts_keysInput = {
    create?: XOR<keysCreateWithoutShortcuts_keysInput, keysUncheckedCreateWithoutShortcuts_keysInput>
    connectOrCreate?: keysCreateOrConnectWithoutShortcuts_keysInput
    connect?: keysWhereUniqueInput
  }

  export type shortcutsUpdateOneRequiredWithoutShortcuts_keysNestedInput = {
    create?: XOR<shortcutsCreateWithoutShortcuts_keysInput, shortcutsUncheckedCreateWithoutShortcuts_keysInput>
    connectOrCreate?: shortcutsCreateOrConnectWithoutShortcuts_keysInput
    upsert?: shortcutsUpsertWithoutShortcuts_keysInput
    connect?: shortcutsWhereUniqueInput
    update?: XOR<XOR<shortcutsUpdateToOneWithWhereWithoutShortcuts_keysInput, shortcutsUpdateWithoutShortcuts_keysInput>, shortcutsUncheckedUpdateWithoutShortcuts_keysInput>
  }

  export type keysUpdateOneRequiredWithoutShortcuts_keysNestedInput = {
    create?: XOR<keysCreateWithoutShortcuts_keysInput, keysUncheckedCreateWithoutShortcuts_keysInput>
    connectOrCreate?: keysCreateOrConnectWithoutShortcuts_keysInput
    upsert?: keysUpsertWithoutShortcuts_keysInput
    connect?: keysWhereUniqueInput
    update?: XOR<XOR<keysUpdateToOneWithWhereWithoutShortcuts_keysInput, keysUpdateWithoutShortcuts_keysInput>, keysUncheckedUpdateWithoutShortcuts_keysInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type users_shortcutsCreateWithoutUsersInput = {
    shortcuts: shortcutsCreateNestedOneWithoutUsers_shortcutsInput
  }

  export type users_shortcutsUncheckedCreateWithoutUsersInput = {
    shortcut_id: number
  }

  export type users_shortcutsCreateOrConnectWithoutUsersInput = {
    where: users_shortcutsWhereUniqueInput
    create: XOR<users_shortcutsCreateWithoutUsersInput, users_shortcutsUncheckedCreateWithoutUsersInput>
  }

  export type users_shortcutsCreateManyUsersInputEnvelope = {
    data: users_shortcutsCreateManyUsersInput | users_shortcutsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type users_shortcutsUpsertWithWhereUniqueWithoutUsersInput = {
    where: users_shortcutsWhereUniqueInput
    update: XOR<users_shortcutsUpdateWithoutUsersInput, users_shortcutsUncheckedUpdateWithoutUsersInput>
    create: XOR<users_shortcutsCreateWithoutUsersInput, users_shortcutsUncheckedCreateWithoutUsersInput>
  }

  export type users_shortcutsUpdateWithWhereUniqueWithoutUsersInput = {
    where: users_shortcutsWhereUniqueInput
    data: XOR<users_shortcutsUpdateWithoutUsersInput, users_shortcutsUncheckedUpdateWithoutUsersInput>
  }

  export type users_shortcutsUpdateManyWithWhereWithoutUsersInput = {
    where: users_shortcutsScalarWhereInput
    data: XOR<users_shortcutsUpdateManyMutationInput, users_shortcutsUncheckedUpdateManyWithoutUsersInput>
  }

  export type users_shortcutsScalarWhereInput = {
    AND?: users_shortcutsScalarWhereInput | users_shortcutsScalarWhereInput[]
    OR?: users_shortcutsScalarWhereInput[]
    NOT?: users_shortcutsScalarWhereInput | users_shortcutsScalarWhereInput[]
    user_id?: IntFilter<"users_shortcuts"> | number
    shortcut_id?: IntFilter<"users_shortcuts"> | number
  }

  export type app_categoriesCreateWithoutApplicationsInput = {
    categorie_name: string
  }

  export type app_categoriesUncheckedCreateWithoutApplicationsInput = {
    categorie_id?: number
    categorie_name: string
  }

  export type app_categoriesCreateOrConnectWithoutApplicationsInput = {
    where: app_categoriesWhereUniqueInput
    create: XOR<app_categoriesCreateWithoutApplicationsInput, app_categoriesUncheckedCreateWithoutApplicationsInput>
  }

  export type shortcutsCreateWithoutApplicationsInput = {
    shortcut_name: string
    shortcut_desc: string
    chapters: chaptersCreateNestedOneWithoutShortcutsInput
    users_shortcuts?: users_shortcutsCreateNestedManyWithoutShortcutsInput
    shortcuts_keys?: shortcuts_keysCreateNestedManyWithoutShortcutsInput
  }

  export type shortcutsUncheckedCreateWithoutApplicationsInput = {
    shortcut_id?: number
    chapter_id: number
    shortcut_name: string
    shortcut_desc: string
    users_shortcuts?: users_shortcutsUncheckedCreateNestedManyWithoutShortcutsInput
    shortcuts_keys?: shortcuts_keysUncheckedCreateNestedManyWithoutShortcutsInput
  }

  export type shortcutsCreateOrConnectWithoutApplicationsInput = {
    where: shortcutsWhereUniqueInput
    create: XOR<shortcutsCreateWithoutApplicationsInput, shortcutsUncheckedCreateWithoutApplicationsInput>
  }

  export type shortcutsCreateManyApplicationsInputEnvelope = {
    data: shortcutsCreateManyApplicationsInput | shortcutsCreateManyApplicationsInput[]
    skipDuplicates?: boolean
  }

  export type app_categoriesUpsertWithoutApplicationsInput = {
    update: XOR<app_categoriesUpdateWithoutApplicationsInput, app_categoriesUncheckedUpdateWithoutApplicationsInput>
    create: XOR<app_categoriesCreateWithoutApplicationsInput, app_categoriesUncheckedCreateWithoutApplicationsInput>
    where?: app_categoriesWhereInput
  }

  export type app_categoriesUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: app_categoriesWhereInput
    data: XOR<app_categoriesUpdateWithoutApplicationsInput, app_categoriesUncheckedUpdateWithoutApplicationsInput>
  }

  export type app_categoriesUpdateWithoutApplicationsInput = {
    categorie_name?: StringFieldUpdateOperationsInput | string
  }

  export type app_categoriesUncheckedUpdateWithoutApplicationsInput = {
    categorie_id?: IntFieldUpdateOperationsInput | number
    categorie_name?: StringFieldUpdateOperationsInput | string
  }

  export type shortcutsUpsertWithWhereUniqueWithoutApplicationsInput = {
    where: shortcutsWhereUniqueInput
    update: XOR<shortcutsUpdateWithoutApplicationsInput, shortcutsUncheckedUpdateWithoutApplicationsInput>
    create: XOR<shortcutsCreateWithoutApplicationsInput, shortcutsUncheckedCreateWithoutApplicationsInput>
  }

  export type shortcutsUpdateWithWhereUniqueWithoutApplicationsInput = {
    where: shortcutsWhereUniqueInput
    data: XOR<shortcutsUpdateWithoutApplicationsInput, shortcutsUncheckedUpdateWithoutApplicationsInput>
  }

  export type shortcutsUpdateManyWithWhereWithoutApplicationsInput = {
    where: shortcutsScalarWhereInput
    data: XOR<shortcutsUpdateManyMutationInput, shortcutsUncheckedUpdateManyWithoutApplicationsInput>
  }

  export type shortcutsScalarWhereInput = {
    AND?: shortcutsScalarWhereInput | shortcutsScalarWhereInput[]
    OR?: shortcutsScalarWhereInput[]
    NOT?: shortcutsScalarWhereInput | shortcutsScalarWhereInput[]
    shortcut_id?: IntFilter<"shortcuts"> | number
    chapter_id?: IntFilter<"shortcuts"> | number
    app_id?: IntFilter<"shortcuts"> | number
    shortcut_name?: StringFilter<"shortcuts"> | string
    shortcut_desc?: StringFilter<"shortcuts"> | string
  }

  export type applicationsCreateWithoutApp_categoriesInput = {
    app_name: string
    app_description: string
    app_logo?: number | null
    app_images?: applicationsCreateapp_imagesInput | string[]
    shortcuts?: shortcutsCreateNestedManyWithoutApplicationsInput
  }

  export type applicationsUncheckedCreateWithoutApp_categoriesInput = {
    app_id?: number
    app_name: string
    app_description: string
    app_logo?: number | null
    app_images?: applicationsCreateapp_imagesInput | string[]
    shortcuts?: shortcutsUncheckedCreateNestedManyWithoutApplicationsInput
  }

  export type applicationsCreateOrConnectWithoutApp_categoriesInput = {
    where: applicationsWhereUniqueInput
    create: XOR<applicationsCreateWithoutApp_categoriesInput, applicationsUncheckedCreateWithoutApp_categoriesInput>
  }

  export type applicationsCreateManyApp_categoriesInputEnvelope = {
    data: applicationsCreateManyApp_categoriesInput | applicationsCreateManyApp_categoriesInput[]
    skipDuplicates?: boolean
  }

  export type applicationsUpsertWithWhereUniqueWithoutApp_categoriesInput = {
    where: applicationsWhereUniqueInput
    update: XOR<applicationsUpdateWithoutApp_categoriesInput, applicationsUncheckedUpdateWithoutApp_categoriesInput>
    create: XOR<applicationsCreateWithoutApp_categoriesInput, applicationsUncheckedCreateWithoutApp_categoriesInput>
  }

  export type applicationsUpdateWithWhereUniqueWithoutApp_categoriesInput = {
    where: applicationsWhereUniqueInput
    data: XOR<applicationsUpdateWithoutApp_categoriesInput, applicationsUncheckedUpdateWithoutApp_categoriesInput>
  }

  export type applicationsUpdateManyWithWhereWithoutApp_categoriesInput = {
    where: applicationsScalarWhereInput
    data: XOR<applicationsUpdateManyMutationInput, applicationsUncheckedUpdateManyWithoutApp_categoriesInput>
  }

  export type applicationsScalarWhereInput = {
    AND?: applicationsScalarWhereInput | applicationsScalarWhereInput[]
    OR?: applicationsScalarWhereInput[]
    NOT?: applicationsScalarWhereInput | applicationsScalarWhereInput[]
    app_id?: IntFilter<"applications"> | number
    app_name?: StringFilter<"applications"> | string
    app_description?: StringFilter<"applications"> | string
    app_logo?: IntNullableFilter<"applications"> | number | null
    app_images?: StringNullableListFilter<"applications">
    categorie_id?: IntFilter<"applications"> | number
  }

  export type usersCreateWithoutUsers_shortcutsInput = {
    username: string
    email: string
    password: string
    job: string
    os: string
    role: string
  }

  export type usersUncheckedCreateWithoutUsers_shortcutsInput = {
    user_id?: number
    username: string
    email: string
    password: string
    job: string
    os: string
    role: string
  }

  export type usersCreateOrConnectWithoutUsers_shortcutsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUsers_shortcutsInput, usersUncheckedCreateWithoutUsers_shortcutsInput>
  }

  export type shortcutsCreateWithoutUsers_shortcutsInput = {
    shortcut_name: string
    shortcut_desc: string
    chapters: chaptersCreateNestedOneWithoutShortcutsInput
    applications: applicationsCreateNestedOneWithoutShortcutsInput
    shortcuts_keys?: shortcuts_keysCreateNestedManyWithoutShortcutsInput
  }

  export type shortcutsUncheckedCreateWithoutUsers_shortcutsInput = {
    shortcut_id?: number
    chapter_id: number
    app_id: number
    shortcut_name: string
    shortcut_desc: string
    shortcuts_keys?: shortcuts_keysUncheckedCreateNestedManyWithoutShortcutsInput
  }

  export type shortcutsCreateOrConnectWithoutUsers_shortcutsInput = {
    where: shortcutsWhereUniqueInput
    create: XOR<shortcutsCreateWithoutUsers_shortcutsInput, shortcutsUncheckedCreateWithoutUsers_shortcutsInput>
  }

  export type usersUpsertWithoutUsers_shortcutsInput = {
    update: XOR<usersUpdateWithoutUsers_shortcutsInput, usersUncheckedUpdateWithoutUsers_shortcutsInput>
    create: XOR<usersCreateWithoutUsers_shortcutsInput, usersUncheckedCreateWithoutUsers_shortcutsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutUsers_shortcutsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutUsers_shortcutsInput, usersUncheckedUpdateWithoutUsers_shortcutsInput>
  }

  export type usersUpdateWithoutUsers_shortcutsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    job?: StringFieldUpdateOperationsInput | string
    os?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateWithoutUsers_shortcutsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    job?: StringFieldUpdateOperationsInput | string
    os?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type shortcutsUpsertWithoutUsers_shortcutsInput = {
    update: XOR<shortcutsUpdateWithoutUsers_shortcutsInput, shortcutsUncheckedUpdateWithoutUsers_shortcutsInput>
    create: XOR<shortcutsCreateWithoutUsers_shortcutsInput, shortcutsUncheckedCreateWithoutUsers_shortcutsInput>
    where?: shortcutsWhereInput
  }

  export type shortcutsUpdateToOneWithWhereWithoutUsers_shortcutsInput = {
    where?: shortcutsWhereInput
    data: XOR<shortcutsUpdateWithoutUsers_shortcutsInput, shortcutsUncheckedUpdateWithoutUsers_shortcutsInput>
  }

  export type shortcutsUpdateWithoutUsers_shortcutsInput = {
    shortcut_name?: StringFieldUpdateOperationsInput | string
    shortcut_desc?: StringFieldUpdateOperationsInput | string
    chapters?: chaptersUpdateOneRequiredWithoutShortcutsNestedInput
    applications?: applicationsUpdateOneRequiredWithoutShortcutsNestedInput
    shortcuts_keys?: shortcuts_keysUpdateManyWithoutShortcutsNestedInput
  }

  export type shortcutsUncheckedUpdateWithoutUsers_shortcutsInput = {
    shortcut_id?: IntFieldUpdateOperationsInput | number
    chapter_id?: IntFieldUpdateOperationsInput | number
    app_id?: IntFieldUpdateOperationsInput | number
    shortcut_name?: StringFieldUpdateOperationsInput | string
    shortcut_desc?: StringFieldUpdateOperationsInput | string
    shortcuts_keys?: shortcuts_keysUncheckedUpdateManyWithoutShortcutsNestedInput
  }

  export type shortcutsCreateWithoutChaptersInput = {
    shortcut_name: string
    shortcut_desc: string
    applications: applicationsCreateNestedOneWithoutShortcutsInput
    users_shortcuts?: users_shortcutsCreateNestedManyWithoutShortcutsInput
    shortcuts_keys?: shortcuts_keysCreateNestedManyWithoutShortcutsInput
  }

  export type shortcutsUncheckedCreateWithoutChaptersInput = {
    shortcut_id?: number
    app_id: number
    shortcut_name: string
    shortcut_desc: string
    users_shortcuts?: users_shortcutsUncheckedCreateNestedManyWithoutShortcutsInput
    shortcuts_keys?: shortcuts_keysUncheckedCreateNestedManyWithoutShortcutsInput
  }

  export type shortcutsCreateOrConnectWithoutChaptersInput = {
    where: shortcutsWhereUniqueInput
    create: XOR<shortcutsCreateWithoutChaptersInput, shortcutsUncheckedCreateWithoutChaptersInput>
  }

  export type shortcutsCreateManyChaptersInputEnvelope = {
    data: shortcutsCreateManyChaptersInput | shortcutsCreateManyChaptersInput[]
    skipDuplicates?: boolean
  }

  export type shortcutsUpsertWithWhereUniqueWithoutChaptersInput = {
    where: shortcutsWhereUniqueInput
    update: XOR<shortcutsUpdateWithoutChaptersInput, shortcutsUncheckedUpdateWithoutChaptersInput>
    create: XOR<shortcutsCreateWithoutChaptersInput, shortcutsUncheckedCreateWithoutChaptersInput>
  }

  export type shortcutsUpdateWithWhereUniqueWithoutChaptersInput = {
    where: shortcutsWhereUniqueInput
    data: XOR<shortcutsUpdateWithoutChaptersInput, shortcutsUncheckedUpdateWithoutChaptersInput>
  }

  export type shortcutsUpdateManyWithWhereWithoutChaptersInput = {
    where: shortcutsScalarWhereInput
    data: XOR<shortcutsUpdateManyMutationInput, shortcutsUncheckedUpdateManyWithoutChaptersInput>
  }

  export type chaptersCreateWithoutShortcutsInput = {
    chapter_name: string
  }

  export type chaptersUncheckedCreateWithoutShortcutsInput = {
    chapter_id?: number
    chapter_name: string
  }

  export type chaptersCreateOrConnectWithoutShortcutsInput = {
    where: chaptersWhereUniqueInput
    create: XOR<chaptersCreateWithoutShortcutsInput, chaptersUncheckedCreateWithoutShortcutsInput>
  }

  export type applicationsCreateWithoutShortcutsInput = {
    app_name: string
    app_description: string
    app_logo?: number | null
    app_images?: applicationsCreateapp_imagesInput | string[]
    app_categories: app_categoriesCreateNestedOneWithoutApplicationsInput
  }

  export type applicationsUncheckedCreateWithoutShortcutsInput = {
    app_id?: number
    app_name: string
    app_description: string
    app_logo?: number | null
    app_images?: applicationsCreateapp_imagesInput | string[]
    categorie_id: number
  }

  export type applicationsCreateOrConnectWithoutShortcutsInput = {
    where: applicationsWhereUniqueInput
    create: XOR<applicationsCreateWithoutShortcutsInput, applicationsUncheckedCreateWithoutShortcutsInput>
  }

  export type users_shortcutsCreateWithoutShortcutsInput = {
    users: usersCreateNestedOneWithoutUsers_shortcutsInput
  }

  export type users_shortcutsUncheckedCreateWithoutShortcutsInput = {
    user_id: number
  }

  export type users_shortcutsCreateOrConnectWithoutShortcutsInput = {
    where: users_shortcutsWhereUniqueInput
    create: XOR<users_shortcutsCreateWithoutShortcutsInput, users_shortcutsUncheckedCreateWithoutShortcutsInput>
  }

  export type users_shortcutsCreateManyShortcutsInputEnvelope = {
    data: users_shortcutsCreateManyShortcutsInput | users_shortcutsCreateManyShortcutsInput[]
    skipDuplicates?: boolean
  }

  export type shortcuts_keysCreateWithoutShortcutsInput = {
    keys: keysCreateNestedOneWithoutShortcuts_keysInput
  }

  export type shortcuts_keysUncheckedCreateWithoutShortcutsInput = {
    key_id: number
  }

  export type shortcuts_keysCreateOrConnectWithoutShortcutsInput = {
    where: shortcuts_keysWhereUniqueInput
    create: XOR<shortcuts_keysCreateWithoutShortcutsInput, shortcuts_keysUncheckedCreateWithoutShortcutsInput>
  }

  export type shortcuts_keysCreateManyShortcutsInputEnvelope = {
    data: shortcuts_keysCreateManyShortcutsInput | shortcuts_keysCreateManyShortcutsInput[]
    skipDuplicates?: boolean
  }

  export type chaptersUpsertWithoutShortcutsInput = {
    update: XOR<chaptersUpdateWithoutShortcutsInput, chaptersUncheckedUpdateWithoutShortcutsInput>
    create: XOR<chaptersCreateWithoutShortcutsInput, chaptersUncheckedCreateWithoutShortcutsInput>
    where?: chaptersWhereInput
  }

  export type chaptersUpdateToOneWithWhereWithoutShortcutsInput = {
    where?: chaptersWhereInput
    data: XOR<chaptersUpdateWithoutShortcutsInput, chaptersUncheckedUpdateWithoutShortcutsInput>
  }

  export type chaptersUpdateWithoutShortcutsInput = {
    chapter_name?: StringFieldUpdateOperationsInput | string
  }

  export type chaptersUncheckedUpdateWithoutShortcutsInput = {
    chapter_id?: IntFieldUpdateOperationsInput | number
    chapter_name?: StringFieldUpdateOperationsInput | string
  }

  export type applicationsUpsertWithoutShortcutsInput = {
    update: XOR<applicationsUpdateWithoutShortcutsInput, applicationsUncheckedUpdateWithoutShortcutsInput>
    create: XOR<applicationsCreateWithoutShortcutsInput, applicationsUncheckedCreateWithoutShortcutsInput>
    where?: applicationsWhereInput
  }

  export type applicationsUpdateToOneWithWhereWithoutShortcutsInput = {
    where?: applicationsWhereInput
    data: XOR<applicationsUpdateWithoutShortcutsInput, applicationsUncheckedUpdateWithoutShortcutsInput>
  }

  export type applicationsUpdateWithoutShortcutsInput = {
    app_name?: StringFieldUpdateOperationsInput | string
    app_description?: StringFieldUpdateOperationsInput | string
    app_logo?: NullableIntFieldUpdateOperationsInput | number | null
    app_images?: applicationsUpdateapp_imagesInput | string[]
    app_categories?: app_categoriesUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type applicationsUncheckedUpdateWithoutShortcutsInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    app_name?: StringFieldUpdateOperationsInput | string
    app_description?: StringFieldUpdateOperationsInput | string
    app_logo?: NullableIntFieldUpdateOperationsInput | number | null
    app_images?: applicationsUpdateapp_imagesInput | string[]
    categorie_id?: IntFieldUpdateOperationsInput | number
  }

  export type users_shortcutsUpsertWithWhereUniqueWithoutShortcutsInput = {
    where: users_shortcutsWhereUniqueInput
    update: XOR<users_shortcutsUpdateWithoutShortcutsInput, users_shortcutsUncheckedUpdateWithoutShortcutsInput>
    create: XOR<users_shortcutsCreateWithoutShortcutsInput, users_shortcutsUncheckedCreateWithoutShortcutsInput>
  }

  export type users_shortcutsUpdateWithWhereUniqueWithoutShortcutsInput = {
    where: users_shortcutsWhereUniqueInput
    data: XOR<users_shortcutsUpdateWithoutShortcutsInput, users_shortcutsUncheckedUpdateWithoutShortcutsInput>
  }

  export type users_shortcutsUpdateManyWithWhereWithoutShortcutsInput = {
    where: users_shortcutsScalarWhereInput
    data: XOR<users_shortcutsUpdateManyMutationInput, users_shortcutsUncheckedUpdateManyWithoutShortcutsInput>
  }

  export type shortcuts_keysUpsertWithWhereUniqueWithoutShortcutsInput = {
    where: shortcuts_keysWhereUniqueInput
    update: XOR<shortcuts_keysUpdateWithoutShortcutsInput, shortcuts_keysUncheckedUpdateWithoutShortcutsInput>
    create: XOR<shortcuts_keysCreateWithoutShortcutsInput, shortcuts_keysUncheckedCreateWithoutShortcutsInput>
  }

  export type shortcuts_keysUpdateWithWhereUniqueWithoutShortcutsInput = {
    where: shortcuts_keysWhereUniqueInput
    data: XOR<shortcuts_keysUpdateWithoutShortcutsInput, shortcuts_keysUncheckedUpdateWithoutShortcutsInput>
  }

  export type shortcuts_keysUpdateManyWithWhereWithoutShortcutsInput = {
    where: shortcuts_keysScalarWhereInput
    data: XOR<shortcuts_keysUpdateManyMutationInput, shortcuts_keysUncheckedUpdateManyWithoutShortcutsInput>
  }

  export type shortcuts_keysScalarWhereInput = {
    AND?: shortcuts_keysScalarWhereInput | shortcuts_keysScalarWhereInput[]
    OR?: shortcuts_keysScalarWhereInput[]
    NOT?: shortcuts_keysScalarWhereInput | shortcuts_keysScalarWhereInput[]
    shortcut_id?: IntFilter<"shortcuts_keys"> | number
    key_id?: IntFilter<"shortcuts_keys"> | number
  }

  export type shortcuts_keysCreateWithoutKeysInput = {
    shortcuts: shortcutsCreateNestedOneWithoutShortcuts_keysInput
  }

  export type shortcuts_keysUncheckedCreateWithoutKeysInput = {
    shortcut_id: number
  }

  export type shortcuts_keysCreateOrConnectWithoutKeysInput = {
    where: shortcuts_keysWhereUniqueInput
    create: XOR<shortcuts_keysCreateWithoutKeysInput, shortcuts_keysUncheckedCreateWithoutKeysInput>
  }

  export type shortcuts_keysCreateManyKeysInputEnvelope = {
    data: shortcuts_keysCreateManyKeysInput | shortcuts_keysCreateManyKeysInput[]
    skipDuplicates?: boolean
  }

  export type shortcuts_keysUpsertWithWhereUniqueWithoutKeysInput = {
    where: shortcuts_keysWhereUniqueInput
    update: XOR<shortcuts_keysUpdateWithoutKeysInput, shortcuts_keysUncheckedUpdateWithoutKeysInput>
    create: XOR<shortcuts_keysCreateWithoutKeysInput, shortcuts_keysUncheckedCreateWithoutKeysInput>
  }

  export type shortcuts_keysUpdateWithWhereUniqueWithoutKeysInput = {
    where: shortcuts_keysWhereUniqueInput
    data: XOR<shortcuts_keysUpdateWithoutKeysInput, shortcuts_keysUncheckedUpdateWithoutKeysInput>
  }

  export type shortcuts_keysUpdateManyWithWhereWithoutKeysInput = {
    where: shortcuts_keysScalarWhereInput
    data: XOR<shortcuts_keysUpdateManyMutationInput, shortcuts_keysUncheckedUpdateManyWithoutKeysInput>
  }

  export type shortcutsCreateWithoutShortcuts_keysInput = {
    shortcut_name: string
    shortcut_desc: string
    chapters: chaptersCreateNestedOneWithoutShortcutsInput
    applications: applicationsCreateNestedOneWithoutShortcutsInput
    users_shortcuts?: users_shortcutsCreateNestedManyWithoutShortcutsInput
  }

  export type shortcutsUncheckedCreateWithoutShortcuts_keysInput = {
    shortcut_id?: number
    chapter_id: number
    app_id: number
    shortcut_name: string
    shortcut_desc: string
    users_shortcuts?: users_shortcutsUncheckedCreateNestedManyWithoutShortcutsInput
  }

  export type shortcutsCreateOrConnectWithoutShortcuts_keysInput = {
    where: shortcutsWhereUniqueInput
    create: XOR<shortcutsCreateWithoutShortcuts_keysInput, shortcutsUncheckedCreateWithoutShortcuts_keysInput>
  }

  export type keysCreateWithoutShortcuts_keysInput = {
    key_win: string
    key_mac: string
  }

  export type keysUncheckedCreateWithoutShortcuts_keysInput = {
    key_id?: number
    key_win: string
    key_mac: string
  }

  export type keysCreateOrConnectWithoutShortcuts_keysInput = {
    where: keysWhereUniqueInput
    create: XOR<keysCreateWithoutShortcuts_keysInput, keysUncheckedCreateWithoutShortcuts_keysInput>
  }

  export type shortcutsUpsertWithoutShortcuts_keysInput = {
    update: XOR<shortcutsUpdateWithoutShortcuts_keysInput, shortcutsUncheckedUpdateWithoutShortcuts_keysInput>
    create: XOR<shortcutsCreateWithoutShortcuts_keysInput, shortcutsUncheckedCreateWithoutShortcuts_keysInput>
    where?: shortcutsWhereInput
  }

  export type shortcutsUpdateToOneWithWhereWithoutShortcuts_keysInput = {
    where?: shortcutsWhereInput
    data: XOR<shortcutsUpdateWithoutShortcuts_keysInput, shortcutsUncheckedUpdateWithoutShortcuts_keysInput>
  }

  export type shortcutsUpdateWithoutShortcuts_keysInput = {
    shortcut_name?: StringFieldUpdateOperationsInput | string
    shortcut_desc?: StringFieldUpdateOperationsInput | string
    chapters?: chaptersUpdateOneRequiredWithoutShortcutsNestedInput
    applications?: applicationsUpdateOneRequiredWithoutShortcutsNestedInput
    users_shortcuts?: users_shortcutsUpdateManyWithoutShortcutsNestedInput
  }

  export type shortcutsUncheckedUpdateWithoutShortcuts_keysInput = {
    shortcut_id?: IntFieldUpdateOperationsInput | number
    chapter_id?: IntFieldUpdateOperationsInput | number
    app_id?: IntFieldUpdateOperationsInput | number
    shortcut_name?: StringFieldUpdateOperationsInput | string
    shortcut_desc?: StringFieldUpdateOperationsInput | string
    users_shortcuts?: users_shortcutsUncheckedUpdateManyWithoutShortcutsNestedInput
  }

  export type keysUpsertWithoutShortcuts_keysInput = {
    update: XOR<keysUpdateWithoutShortcuts_keysInput, keysUncheckedUpdateWithoutShortcuts_keysInput>
    create: XOR<keysCreateWithoutShortcuts_keysInput, keysUncheckedCreateWithoutShortcuts_keysInput>
    where?: keysWhereInput
  }

  export type keysUpdateToOneWithWhereWithoutShortcuts_keysInput = {
    where?: keysWhereInput
    data: XOR<keysUpdateWithoutShortcuts_keysInput, keysUncheckedUpdateWithoutShortcuts_keysInput>
  }

  export type keysUpdateWithoutShortcuts_keysInput = {
    key_win?: StringFieldUpdateOperationsInput | string
    key_mac?: StringFieldUpdateOperationsInput | string
  }

  export type keysUncheckedUpdateWithoutShortcuts_keysInput = {
    key_id?: IntFieldUpdateOperationsInput | number
    key_win?: StringFieldUpdateOperationsInput | string
    key_mac?: StringFieldUpdateOperationsInput | string
  }

  export type users_shortcutsCreateManyUsersInput = {
    shortcut_id: number
  }

  export type users_shortcutsUpdateWithoutUsersInput = {
    shortcuts?: shortcutsUpdateOneRequiredWithoutUsers_shortcutsNestedInput
  }

  export type users_shortcutsUncheckedUpdateWithoutUsersInput = {
    shortcut_id?: IntFieldUpdateOperationsInput | number
  }

  export type users_shortcutsUncheckedUpdateManyWithoutUsersInput = {
    shortcut_id?: IntFieldUpdateOperationsInput | number
  }

  export type shortcutsCreateManyApplicationsInput = {
    shortcut_id?: number
    chapter_id: number
    shortcut_name: string
    shortcut_desc: string
  }

  export type shortcutsUpdateWithoutApplicationsInput = {
    shortcut_name?: StringFieldUpdateOperationsInput | string
    shortcut_desc?: StringFieldUpdateOperationsInput | string
    chapters?: chaptersUpdateOneRequiredWithoutShortcutsNestedInput
    users_shortcuts?: users_shortcutsUpdateManyWithoutShortcutsNestedInput
    shortcuts_keys?: shortcuts_keysUpdateManyWithoutShortcutsNestedInput
  }

  export type shortcutsUncheckedUpdateWithoutApplicationsInput = {
    shortcut_id?: IntFieldUpdateOperationsInput | number
    chapter_id?: IntFieldUpdateOperationsInput | number
    shortcut_name?: StringFieldUpdateOperationsInput | string
    shortcut_desc?: StringFieldUpdateOperationsInput | string
    users_shortcuts?: users_shortcutsUncheckedUpdateManyWithoutShortcutsNestedInput
    shortcuts_keys?: shortcuts_keysUncheckedUpdateManyWithoutShortcutsNestedInput
  }

  export type shortcutsUncheckedUpdateManyWithoutApplicationsInput = {
    shortcut_id?: IntFieldUpdateOperationsInput | number
    chapter_id?: IntFieldUpdateOperationsInput | number
    shortcut_name?: StringFieldUpdateOperationsInput | string
    shortcut_desc?: StringFieldUpdateOperationsInput | string
  }

  export type applicationsCreateManyApp_categoriesInput = {
    app_id?: number
    app_name: string
    app_description: string
    app_logo?: number | null
    app_images?: applicationsCreateapp_imagesInput | string[]
  }

  export type applicationsUpdateWithoutApp_categoriesInput = {
    app_name?: StringFieldUpdateOperationsInput | string
    app_description?: StringFieldUpdateOperationsInput | string
    app_logo?: NullableIntFieldUpdateOperationsInput | number | null
    app_images?: applicationsUpdateapp_imagesInput | string[]
    shortcuts?: shortcutsUpdateManyWithoutApplicationsNestedInput
  }

  export type applicationsUncheckedUpdateWithoutApp_categoriesInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    app_name?: StringFieldUpdateOperationsInput | string
    app_description?: StringFieldUpdateOperationsInput | string
    app_logo?: NullableIntFieldUpdateOperationsInput | number | null
    app_images?: applicationsUpdateapp_imagesInput | string[]
    shortcuts?: shortcutsUncheckedUpdateManyWithoutApplicationsNestedInput
  }

  export type applicationsUncheckedUpdateManyWithoutApp_categoriesInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    app_name?: StringFieldUpdateOperationsInput | string
    app_description?: StringFieldUpdateOperationsInput | string
    app_logo?: NullableIntFieldUpdateOperationsInput | number | null
    app_images?: applicationsUpdateapp_imagesInput | string[]
  }

  export type shortcutsCreateManyChaptersInput = {
    shortcut_id?: number
    app_id: number
    shortcut_name: string
    shortcut_desc: string
  }

  export type shortcutsUpdateWithoutChaptersInput = {
    shortcut_name?: StringFieldUpdateOperationsInput | string
    shortcut_desc?: StringFieldUpdateOperationsInput | string
    applications?: applicationsUpdateOneRequiredWithoutShortcutsNestedInput
    users_shortcuts?: users_shortcutsUpdateManyWithoutShortcutsNestedInput
    shortcuts_keys?: shortcuts_keysUpdateManyWithoutShortcutsNestedInput
  }

  export type shortcutsUncheckedUpdateWithoutChaptersInput = {
    shortcut_id?: IntFieldUpdateOperationsInput | number
    app_id?: IntFieldUpdateOperationsInput | number
    shortcut_name?: StringFieldUpdateOperationsInput | string
    shortcut_desc?: StringFieldUpdateOperationsInput | string
    users_shortcuts?: users_shortcutsUncheckedUpdateManyWithoutShortcutsNestedInput
    shortcuts_keys?: shortcuts_keysUncheckedUpdateManyWithoutShortcutsNestedInput
  }

  export type shortcutsUncheckedUpdateManyWithoutChaptersInput = {
    shortcut_id?: IntFieldUpdateOperationsInput | number
    app_id?: IntFieldUpdateOperationsInput | number
    shortcut_name?: StringFieldUpdateOperationsInput | string
    shortcut_desc?: StringFieldUpdateOperationsInput | string
  }

  export type users_shortcutsCreateManyShortcutsInput = {
    user_id: number
  }

  export type shortcuts_keysCreateManyShortcutsInput = {
    key_id: number
  }

  export type users_shortcutsUpdateWithoutShortcutsInput = {
    users?: usersUpdateOneRequiredWithoutUsers_shortcutsNestedInput
  }

  export type users_shortcutsUncheckedUpdateWithoutShortcutsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type users_shortcutsUncheckedUpdateManyWithoutShortcutsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type shortcuts_keysUpdateWithoutShortcutsInput = {
    keys?: keysUpdateOneRequiredWithoutShortcuts_keysNestedInput
  }

  export type shortcuts_keysUncheckedUpdateWithoutShortcutsInput = {
    key_id?: IntFieldUpdateOperationsInput | number
  }

  export type shortcuts_keysUncheckedUpdateManyWithoutShortcutsInput = {
    key_id?: IntFieldUpdateOperationsInput | number
  }

  export type shortcuts_keysCreateManyKeysInput = {
    shortcut_id: number
  }

  export type shortcuts_keysUpdateWithoutKeysInput = {
    shortcuts?: shortcutsUpdateOneRequiredWithoutShortcuts_keysNestedInput
  }

  export type shortcuts_keysUncheckedUpdateWithoutKeysInput = {
    shortcut_id?: IntFieldUpdateOperationsInput | number
  }

  export type shortcuts_keysUncheckedUpdateManyWithoutKeysInput = {
    shortcut_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApplicationsCountOutputTypeDefaultArgs instead
     */
    export type ApplicationsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApplicationsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use App_categoriesCountOutputTypeDefaultArgs instead
     */
    export type App_categoriesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = App_categoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChaptersCountOutputTypeDefaultArgs instead
     */
    export type ChaptersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChaptersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShortcutsCountOutputTypeDefaultArgs instead
     */
    export type ShortcutsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShortcutsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KeysCountOutputTypeDefaultArgs instead
     */
    export type KeysCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KeysCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use applicationsDefaultArgs instead
     */
    export type applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = applicationsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use app_categoriesDefaultArgs instead
     */
    export type app_categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = app_categoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use users_shortcutsDefaultArgs instead
     */
    export type users_shortcutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = users_shortcutsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use chaptersDefaultArgs instead
     */
    export type chaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = chaptersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use shortcutsDefaultArgs instead
     */
    export type shortcutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = shortcutsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use speed_lineDefaultArgs instead
     */
    export type speed_lineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = speed_lineDefaultArgs<ExtArgs>
    /**
     * @deprecated Use keysDefaultArgs instead
     */
    export type keysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = keysDefaultArgs<ExtArgs>
    /**
     * @deprecated Use shortcuts_keysDefaultArgs instead
     */
    export type shortcuts_keysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = shortcuts_keysDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}